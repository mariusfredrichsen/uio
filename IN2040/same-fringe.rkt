(define (fringe tree)
  (cond ((null? tree) '())
        ((pair? (car tree))
         (append (fringe (car tree))
                 (fringe (cdr tree))))
        (else (cons (car tree)
                    (fringe (cdr tree))))))

(define (same-fringe? tree1 tree2 pred)
  (define (check-iter nodes1 nodes2)
    (cond ((and (null? nodes1) (null? nodes2)) #t)
          ((or (null? nodes1) (null? nodes2)) #f)
          ((pred (car nodes1) (car nodes2))
           (check-iter (cdr nodes1) (cdr nodes2)))
          (else #f)))
  (check-iter (fringe tree1) (fringe tree2)))

(same-fringe? '((1 2) 3 4)
              '((1 (2)) 3 (4))
              =)

(same-fringe? '((1 2) 3 4 5 7)
              '((1 2) 3 4 5)
              =)