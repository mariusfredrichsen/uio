"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));
var _dhis2CalendarsMap = require("../../constants/dhis2CalendarsMap");
var _getValidLocale2 = _interopRequireDefault(require("../../utils/getValidLocale"));
var _index = require("../../utils/index");
var _index2 = require("../daily-periods/index");
var _index3 = require("../generate-fixed-periods/index");
var _index4 = require("../period-id/index");
var _index5 = require("../yearly-periods/index");
var _getMonthlyFixedPeriodTypeForPeriodId = _interopRequireDefault(require("./get-monthly-fixed-period-type-for-period-id"));
var _getWeeklyFixedPeriodTypeForPeriodId = _interopRequireDefault(require("./get-weekly-fixed-period-type-for-period-id"));
var _getYearlyFixedPeriodTypeForPeriodId = _interopRequireDefault(require("./get-yearly-fixed-period-type-for-period-id"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const createFixedPeriodFromPeriodId = _ref => {
  var _dhis2CalendarsMap$re, _getValidLocale;
  let {
    periodId,
    calendar: requestedCalendar,
    locale = 'en'
  } = _ref;
  const calendar = (0, _index.getCustomCalendarIfExists)((_dhis2CalendarsMap$re = _dhis2CalendarsMap.dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);
  const validLocale = (_getValidLocale = (0, _getValidLocale2.default)(locale)) !== null && _getValidLocale !== void 0 ? _getValidLocale : 'en';
  if ((0, _index4.isAnyYearlyPeriodId)(periodId)) {
    const year = parseInt(periodId.substring(0, 4), 10);
    const periodType = (0, _getYearlyFixedPeriodTypeForPeriodId.default)(periodId);
    return (0, _index5.buildYearlyFixedPeriod)({
      year,
      periodType,
      calendar,
      locale
    });
  }
  if ((0, _index4.isAnyMonthlyPeriodId)(periodId)) {
    const periodType = (0, _getMonthlyFixedPeriodTypeForPeriodId.default)(periodId);
    const year = parseInt(periodId.substring(0, 4), 10);
    const monthlyPeriodsForYear = (0, _index3.generateFixedPeriods)({
      periodType,
      year,
      calendar,
      locale: validLocale
    });
    const foundThisYear = monthlyPeriodsForYear.find(_ref2 => {
      let {
        id
      } = _ref2;
      return id === periodId;
    });
    if (foundThisYear) {
      return foundThisYear;
    }

    // If we can't find the period in "this" year, it is in the next year.
    // E.g. 2023NovemberQ4 is actually in 2024
    const monthlyPeriodsForNextYear = (0, _index3.generateFixedPeriods)({
      year: year + 1,
      periodType,
      calendar,
      locale: validLocale
    }).slice(-1);
    const foundNextYear = monthlyPeriodsForNextYear.find(_ref3 => {
      let {
        id
      } = _ref3;
      return id === periodId;
    });
    if (!foundNextYear) {
      throw new Error(_d2I18n.default.t(`Couldn't find a monthly period for weekly period id "{{periodId}}"`, {
        periodId
      }));
    }
    return foundNextYear;
  }
  if ((0, _index4.isAnyWeeklyPeriodId)(periodId)) {
    const year = parseInt(periodId.substring(0, 4), 10);
    const periodType = (0, _getWeeklyFixedPeriodTypeForPeriodId.default)(periodId);
    const weeklyPeriodsForYear = (0, _index3.generateFixedPeriods)({
      year,
      periodType,
      calendar,
      locale
    });
    const foundThisYear = weeklyPeriodsForYear.find(_ref4 => {
      let {
        id
      } = _ref4;
      return id === periodId;
    });
    if (foundThisYear) {
      return foundThisYear;
    }

    // If the period is not in this year, it might have started at the
    // end of last year but is still considered the first week of this
    // year
    const [lastPeriodOfLastYear] = (0, _index3.generateFixedPeriods)({
      year: year - 1,
      periodType,
      calendar,
      locale
    }).slice(-1);
    if (lastPeriodOfLastYear.id === periodId) {
      return lastPeriodOfLastYear;
    }
    throw new Error(_d2I18n.default.t(`Couldn't find a weekly period for weekly period id "{{periodId}}"`, {
      periodId
    }));
  }
  if ((0, _index4.isDailyPeriodId)(periodId)) {
    const year = periodId.substring(0, 4);
    const month = periodId.substring(4, 6);
    const day = periodId.substring(6);
    const date = (0, _index.fromAnyDate)({
      date: `${year}-${month}-${day}`,
      calendar
    });
    return (0, _index2.buildDailyFixedPeriod)({
      date,
      locale,
      calendar
    });
  }
  throw new Error(_d2I18n.default.t(`Couldn't handle unknown period id "{{periodId}}"`, {
    periodId
  }));
};
var _default = createFixedPeriodFromPeriodId;
exports.default = _default;