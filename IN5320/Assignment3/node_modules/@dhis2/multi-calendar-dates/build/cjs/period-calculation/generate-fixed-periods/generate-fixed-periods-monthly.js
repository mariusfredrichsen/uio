"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _polyfill = require("@js-temporal/polyfill");
var _index = require("../../utils/index");
var _getStartingMonthForPeriodType = require("../get-starting-month-for-period-type");
var _monthNumbers = _interopRequireDefault(require("../month-numbers"));
var _index2 = require("../monthly-periods/index");
var _periodTypeGroups = require("../period-type-groups");
var _doesPeriodEndBefore = _interopRequireDefault(require("./does-period-end-before"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const generateFixedPeriodsMonthly = _ref => {
  let {
    year,
    calendar,
    periodType,
    endsBefore,
    locale
  } = _ref;
  let currentMonth = _polyfill.Temporal.PlainDate.from({
    year,
    month: getStartingMonth(periodType),
    // this should really just be 1 but have to set it to 14th because of a
    // quirk in custom calendars
    // @TODO: discuss this with the Temporal team
    day: calendar.toString() === 'nepali' ? 14 : 1,
    calendar
  });
  const months = [];
  while (currentMonth.year === year || needsExtraMonth(periodType, months.length)) {
    const monthToAdd = getMonthsToAdd({
      periodType,
      currentMonth: currentMonth.month,
      year,
      calendar
    });
    const ignoreMonth = isEthiopic13thMonth(calendar, currentMonth);
    if (!ignoreMonth) {
      const period = (0, _index2.buildMonthlyFixedPeriod)({
        periodType,
        month: currentMonth,
        year,
        calendar,
        locale: locale
      });
      if (endsBefore && (0, _doesPeriodEndBefore.default)({
        period,
        date: endsBefore,
        calendar
      })) {
        break;
      }
      months.push(period);
    }
    const nextMonth = currentMonth.add({
      months: monthToAdd
    });
    currentMonth = (0, _index.fromAnyDate)({
      date: nextMonth,
      calendar
    });
  }
  return months;
};
const isEthiopic13thMonth = (calendar, date) => {
  return calendar === 'ethiopic' && date.month === 13;
};
const getStartingMonth = periodType => {
  if (_periodTypeGroups.monthlyOffsetFixedPeriodTypes.includes(periodType)) {
    const month = (0, _getStartingMonthForPeriodType.getStartingMonthByPeriodType)(periodType);
    return _monthNumbers.default[month].value;
  }
  return 1;
};
const needsExtraMonth = (periodType, length) => {
  if (_periodTypeGroups.sixmonthlyFixedPeriodTypes.includes(periodType)) {
    return length < 2;
  }
  if (_periodTypeGroups.quarterlyFixedPeriodTypes.includes(periodType)) {
    return length < 4;
  }
  return false;
};
const getMonthsToAdd = _ref2 => {
  let {
    periodType
  } = _ref2;
  if (_periodTypeGroups.sixmonthlyFixedPeriodTypes.includes(periodType)) {
    return 6;
  }
  if (_periodTypeGroups.quarterlyFixedPeriodTypes.includes(periodType)) {
    return 3;
  }
  if (periodType === 'MONTHLY') {
    return 1;
  }
  if (periodType === 'BIMONTHLY') {
    return 2;
  }
  throw new Error(`unrecognised monthly period type ${periodType}`);
};
var _default = generateFixedPeriodsMonthly;
exports.default = _default;