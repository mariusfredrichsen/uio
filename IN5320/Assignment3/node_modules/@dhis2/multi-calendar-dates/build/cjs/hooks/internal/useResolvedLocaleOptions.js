"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useResolvedLocaleOptions = void 0;
var _polyfill = require("@js-temporal/polyfill");
var _react = require("react");
var _getValidLocale = _interopRequireDefault(require("../../utils/getValidLocale"));
var _helpers = require("../../utils/helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * A hook that returns the locale and locale options to be used by the calendar.
 *
 * The order of precedence of how the options are resolved should be:
 *
 * - Prop-values passed to the hook/component
 * - Properties available from the system/user settings resource* (in the future)
 * - Values coming from Intl.DateTimeFormat().resolvedOptions()
 * - Some hardcoded defaults
 *
 * @param options
 * @returns
 */
const useResolvedLocaleOptions = userOptions => {
  // validate that the passed locale is valid, use it if valid, otherwise, keep it undefined
  const locale = (0, _getValidLocale.default)(userOptions.locale);
  return (0, _react.useMemo)(() => {
    var _Intl$DateTimeFormat, _Intl$DateTimeFormat$, _Intl$DateTimeFormat$2, _defaultDateTimeOptio, _defaultDateTimeOptio2, _defaultDateTimeOptio3, _defaultDateTimeOptio4;
    /**
     * If no options are provided this will use the values of the user browser
     * If a locale identifier is provided it will use that to populate options
     * If any options are provided these will override the options for the
     * specified locale identifier or browser settings
     */
    const {
      locale: resolvedLocale,
      ...resolvedOptions
    } = new _polyfill.Intl.DateTimeFormat(locale, {
      calendar: userOptions.calendar,
      timeZone: userOptions.timeZone,
      numberingSystem: userOptions.numberingSystem,
      weekday: userOptions.weekDayFormat
    }).resolvedOptions();
    const defaultDateTimeOptions = _polyfill.Intl === null || _polyfill.Intl === void 0 ? void 0 : (_Intl$DateTimeFormat = _polyfill.Intl.DateTimeFormat) === null || _Intl$DateTimeFormat === void 0 ? void 0 : (_Intl$DateTimeFormat$ = (_Intl$DateTimeFormat$2 = _Intl$DateTimeFormat.call(_polyfill.Intl)).resolvedOptions) === null || _Intl$DateTimeFormat$ === void 0 ? void 0 : _Intl$DateTimeFormat$.call(_Intl$DateTimeFormat$2);
    const defaultUserOptions = {
      calendar: 'gregory',
      timeZone: (_defaultDateTimeOptio = defaultDateTimeOptions === null || defaultDateTimeOptions === void 0 ? void 0 : defaultDateTimeOptions.timeZone) !== null && _defaultDateTimeOptio !== void 0 ? _defaultDateTimeOptio : 'UTC',
      numberingSystem: (_defaultDateTimeOptio2 = defaultDateTimeOptions === null || defaultDateTimeOptions === void 0 ? void 0 : defaultDateTimeOptions.numberingSystem) !== null && _defaultDateTimeOptio2 !== void 0 ? _defaultDateTimeOptio2 : 'latn',
      locale: (_defaultDateTimeOptio3 = defaultDateTimeOptions === null || defaultDateTimeOptions === void 0 ? void 0 : defaultDateTimeOptions.locale) !== null && _defaultDateTimeOptio3 !== void 0 ? _defaultDateTimeOptio3 : 'en',
      weekDayFormat: (_defaultDateTimeOptio4 = defaultDateTimeOptions === null || defaultDateTimeOptions === void 0 ? void 0 : defaultDateTimeOptions.weekday) !== null && _defaultDateTimeOptio4 !== void 0 ? _defaultDateTimeOptio4 : 'narrow'
    };
    let localeToUse = resolvedLocale || defaultUserOptions.locale;
    // This step is necessary for custom locales where we have our own localisation values (like ne-NP)
    // otherwise they can be overridden by  Intl.DateTimeFormat().resolvedOptions()
    if (userOptions.calendar && userOptions.locale && (0, _helpers.isCustomCalendar)(userOptions.calendar)) {
      localeToUse = userOptions.locale;
    }
    return {
      calendar: userOptions.calendar || defaultUserOptions.calendar,
      locale: localeToUse,
      timeZone: resolvedOptions.timeZone || defaultUserOptions.timeZone,
      numberingSystem: resolvedOptions.numberingSystem || defaultUserOptions.numberingSystem,
      weekDayFormat: userOptions.weekDayFormat || defaultUserOptions.weekDayFormat
    };
  }, [locale, userOptions]);
};
exports.useResolvedLocaleOptions = useResolvedLocaleOptions;