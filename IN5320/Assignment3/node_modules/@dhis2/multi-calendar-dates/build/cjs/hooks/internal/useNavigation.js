"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigation = void 0;
var _react = require("react");
var _localisationHelpers = _interopRequireDefault(require("../../utils/localisationHelpers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * internal hook used by useDatePicker to build the navigation of the calendar
 *
 * @param options
 * @returns
 */
const useNavigation = (firstZdtOfVisibleMonth, setFirstZdtOfVisibleMonth, localeOptions) => {
  return (0, _react.useMemo)(() => {
    const prevYear = firstZdtOfVisibleMonth.subtract({
      years: 1
    });
    const nextYear = firstZdtOfVisibleMonth.add({
      years: 1
    });

    // Setting the day to the 14th is guaranteed to get the next month correctly
    // according to our defintion, which considers adding one month to be the equivalent
    // of adding 1 to the current month, while Temporal does the arithmetic in iso8601
    // then converts to the custom calendar, which could end up in the same month.
    // (for example in Nepali where current date + 30 can end up in the same month for a month that has 32 days)
    // todo: clarify the expected behaviour with the Temporal team
    const prevMonth = firstZdtOfVisibleMonth.with({
      day: 14
    }).subtract({
      months: 1
    });
    const nextMonth = firstZdtOfVisibleMonth.with({
      day: 14
    }).add({
      months: 1
    });
    const options = {
      locale: localeOptions.locale,
      calendar: localeOptions.calendar,
      numberingSystem: localeOptions.numberingSystem
    };
    const yearNumericFormat = {
      ...options,
      year: 'numeric'
    };
    const monthFormat = {
      ...options,
      month: 'long'
    };
    return {
      prevYear: {
        label: _localisationHelpers.default.localiseYear(prevYear, localeOptions, yearNumericFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(prevYear)
      },
      currYear: {
        label: _localisationHelpers.default.localiseYear(firstZdtOfVisibleMonth, localeOptions, yearNumericFormat)
      },
      nextYear: {
        label: _localisationHelpers.default.localiseYear(nextYear, localeOptions, yearNumericFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(nextYear)
      },
      prevMonth: {
        label: _localisationHelpers.default.localiseMonth(prevMonth, localeOptions, monthFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(prevMonth)
      },
      currMonth: {
        label: _localisationHelpers.default.localiseMonth(firstZdtOfVisibleMonth, localeOptions, monthFormat)
      },
      nextMonth: {
        label: _localisationHelpers.default.localiseMonth(nextMonth, localeOptions, monthFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(nextMonth)
      }
    };
  }, [firstZdtOfVisibleMonth, localeOptions, setFirstZdtOfVisibleMonth]);
};
exports.useNavigation = useNavigation;