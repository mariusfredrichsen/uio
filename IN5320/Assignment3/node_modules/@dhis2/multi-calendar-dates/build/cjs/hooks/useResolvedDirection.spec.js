"use strict";

var _reactHooks = require("@testing-library/react-hooks");
var _useResolvedDirection = require("./useResolvedDirection");
describe('useResolvedDirection hook', () => {
  it("should return rtl for locale 'ar'", () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)(undefined, 'ar'));
    expect(result.current).toEqual('rtl');
  });
  it("should return rtl for locale 'ar-EG'", () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)(undefined, 'ar-EG'));
    expect(result.current).toEqual('rtl');
  });
  it("should return ltr for locale 'fr'", () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)(undefined, 'fr'));
    expect(result.current).toEqual('ltr');
  });
  it("should return ltr for locale 'fr-TN'", () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)(undefined, 'fr-TN'));
    expect(result.current).toEqual('ltr');
  });
  it('should give precendence to a passed direction regardless of locale', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)('ltr', 'ar-EG'));
    expect(result.current).toEqual('ltr');
  });
  it('should default to LTR if no locale or direction passed', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)(undefined, undefined));
    expect(result.current).toEqual('ltr');
  });
  it('should default to LTR if no recognised locale or direction passed', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useResolvedDirection.useResolvedDirection)(undefined, 'somelanguage'));
    expect(result.current).toEqual('ltr');
  });
});