import i18n from '@dhis2/d2-i18n';
import monthNumbers from '../month-numbers';
import { regexMonthlyStandardPeriodId, regexBiMonthlyPeriodId, regexQuarterlyStandardPeriodId, regexQuarterlyOffsetPeriodId, regexSixmonthlyStandardPeriodId, regexSixmonthlyOffsetPeriodId } from '../period-id/index';
const getMonthlyFixedPeriodTypeForPeriodId = periodId => {
  if (regexMonthlyStandardPeriodId.test(periodId)) {
    return 'MONTHLY';
  }
  if (regexBiMonthlyPeriodId.test(periodId)) {
    return 'BIMONTHLY';
  }
  if (regexQuarterlyStandardPeriodId.test(periodId)) {
    return 'QUARTERLY';
  }
  const quarterlyFixedPeriodMatch = periodId.match(regexQuarterlyOffsetPeriodId);
  if (quarterlyFixedPeriodMatch) {
    const monthName = quarterlyFixedPeriodMatch[2];
    const result = Object.entries(monthNumbers).find(_ref => {
      let [, {
        name
      }] = _ref;
      return name === monthName;
    });
    if (!result) {
      throw new Error('@TODO');
    }
    const [month] = result;
    return `QUARTERLY${month}`;
  }
  if (regexSixmonthlyStandardPeriodId.test(periodId)) {
    return 'SIXMONTHLY';
  }
  const sixmonthlyFixedPeriodMatch = periodId.match(regexSixmonthlyOffsetPeriodId);
  if (sixmonthlyFixedPeriodMatch) {
    const monthName = sixmonthlyFixedPeriodMatch[2];
    const result = Object.entries(monthNumbers).find(_ref2 => {
      let [, {
        name
      }] = _ref2;
      return name === monthName;
    });
    if (!result) {
      throw new Error('@TODO');
    }
    const [month] = result;
    return `SIXMONTHLY${month}`;
  }
  throw new Error(i18n.t(`Could not find a period type for period id "{{periodId}}"`, {
    periodId
  }));
};
export default getMonthlyFixedPeriodTypeForPeriodId;