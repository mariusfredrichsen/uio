import { Temporal } from '@js-temporal/polyfill';
declare type CalendarYMD = {
    year: number;
    month: number;
    day: number;
};
/**
 * https://tc39.es/proposal-temporal/docs/calendar.html
 *
 * This implementation is based on World-Calendars library by Keith Wood:
 * https://github.com/kbwood/world-calendars
 */
declare class NepaliCalendar extends Temporal.Calendar {
    constructor();
    toString(): string;
    /**
     * The methods year, month, day return the Nepali date
     *
     * A custom implementation of these methods is used to convert the ISO calendar date to the calendar-space arguments.
     */
    year(date: Temporal.PlainDate | Temporal.PlainDateTime): number;
    eraYear(date: Temporal.PlainDate | Temporal.PlainDateTime): number;
    daysInMonth(date: Temporal.PlainDate | Temporal.PlainDateTime): number;
    month(date: Temporal.PlainDate): number;
    monthCode(date: Temporal.PlainDate): string;
    day(date: Temporal.PlainDate): number;
    /**
     * The methods dateFromFields, yearMonthFromFields, monthDayFromFields convert from nepali to iso
     *
     * A custom implementation of these methods is used to convert the calendar-space arguments to the ISO calendar.
     */
    dateFromFields(fields: CalendarYMD): Temporal.PlainDate;
    yearMonthFromFields(fields: CalendarYMD): Temporal.PlainYearMonth;
    monthDayFromFields(fields: CalendarYMD): Temporal.PlainMonthDay;
}
export { NepaliCalendar };
