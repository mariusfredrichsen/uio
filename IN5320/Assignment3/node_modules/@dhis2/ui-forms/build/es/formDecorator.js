function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { Button } from '@dhis2-ui/button';
import PropTypes from 'prop-types';
import React from 'react';
import { FormSpy, Form } from 'react-final-form';
const formProps = {
  onSubmit: values => {
    console.log('++++++++++++++++\n', 'Form was submitted with values:\n', values, '\n----------------');
  },
  mutators: {}
};
class FormWithSpyAndSubmit extends React.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      cypressProps: {}
    });
    _defineProperty(this, "updateCypressProps", updateObj => {
      const cypressProps = {
        ...this.state.cypressProps,
        ...updateObj
      };
      this.setState({
        cypressProps
      });
    });
    _defineProperty(this, "clearCypressProps", () => {
      this.setState({
        cypressProps: {}
      });
    });
  }
  componentDidMount() {
    window.updateCypressProps = this.updateCypressProps;
    window.clearCypressProps = this.clearCypressProps;
    this.forceUpdate();
  }
  componentWillUnmount() {
    delete window.updateCypressProps;
    delete window.clearCypressProps;
  }
  render() {
    return /*#__PURE__*/React.createElement(Form, formProps, formRenderProps => /*#__PURE__*/React.createElement("form", {
      onSubmit: formRenderProps.handleSubmit
    }, this.props.renderChildren({
      formRenderProps,
      cypressProps: this.state.cypressProps
    }), /*#__PURE__*/React.createElement(Button, {
      primary: true,
      type: "submit"
    }, "Submit"), /*#__PURE__*/React.createElement(FormSpy, null, _ref => {
      let {
        values
      } = _ref;
      window.formValues = values;
      return /*#__PURE__*/React.createElement("span", {
        className: "form-spy-internal"
      });
    })));
  }
}
FormWithSpyAndSubmit.propTypes = {
  renderChildren: PropTypes.func.isRequired
};
export const formDecorator = fn => /*#__PURE__*/React.createElement(FormWithSpyAndSubmit, {
  renderChildren: fn
});