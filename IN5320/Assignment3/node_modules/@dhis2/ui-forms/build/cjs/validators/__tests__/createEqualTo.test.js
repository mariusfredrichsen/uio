"use strict";

var _createEqualTo = require("../createEqualTo.js");
var _index = require("../helpers/index.js");
var _index2 = require("../test-helpers/index.js");
describe('validator: createEqualTo', () => {
  const equalToFoo = (0, _createEqualTo.createEqualTo)('foo');
  it('should throw an error when key is not a string', () => {
    expect(() => {
      (0, _createEqualTo.createEqualTo)(undefined);
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createEqualTo.createEqualTo)({});
    }).toThrowError(_index.requiredArgumentErrorMessage);
  });
  it('should create a function', () => {
    expect(typeof equalToFoo).toEqual('function');
  });
  (0, _index2.allowsEmptyValues)(equalToFoo);
  it('should return undefined when the fields have equal values', () => {
    const sameValue = 'abcde';
    expect(equalToFoo(sameValue, {
      foo: sameValue
    })).toEqual(undefined);
  });
  it('should return an error string when the fields have inequal values', () => {
    const inValidFooMsg = 'Please make sure the value of this input matches the value in "foo".';
    expect(equalToFoo('this', {
      foo: 'that'
    })).toEqual(inValidFooMsg);
  });
  it('should use the property description in the error string if provided', () => {
    const equalToBar = (0, _createEqualTo.createEqualTo)('bar', 'Barista');
    const inValidBarMsg = 'Please make sure the value of this input matches the value in "Barista".';
    expect(equalToBar('this', {
      bar: 'that'
    })).toEqual(inValidBarMsg);
  });
});