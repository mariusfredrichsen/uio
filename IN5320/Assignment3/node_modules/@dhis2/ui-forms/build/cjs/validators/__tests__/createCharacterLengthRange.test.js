"use strict";

var _createCharacterLengthRange = require("../createCharacterLengthRange.js");
var _index = require("../helpers/index.js");
var _index2 = require("../test-helpers/index.js");
describe('validator: createCharacterLengthRange', () => {
  const betweenSixAndTenChars = (0, _createCharacterLengthRange.createCharacterLengthRange)(6, 10);
  const inValidMsg = 'Please enter between 6 and 10 characters';
  it('should throw an error when lower or upper bound are not a number', () => {
    expect(() => {
      (0, _createCharacterLengthRange.createCharacterLengthRange)(undefined, undefined);
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createCharacterLengthRange.createCharacterLengthRange)('test', 'test');
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createCharacterLengthRange.createCharacterLengthRange)(1, undefined);
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createCharacterLengthRange.createCharacterLengthRange)(undefined, 0);
    }).toThrowError(_index.requiredArgumentErrorMessage);
  });
  it('should create a function', () => {
    expect(typeof betweenSixAndTenChars).toEqual('function');
  });
  (0, _index2.allowsEmptyValues)(betweenSixAndTenChars);
  describe('allows within-range strings', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTenChars, undefined, ['abcdef',
    // 6
    'abcdefgh', 'abcdefghij' // 10
    ]);
  });
  describe('rejects non-string values', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTenChars, inValidMsg, [true, 3, {}, [], () => {}]);
  });
  describe('rejects out-of-range strings', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTenChars, inValidMsg, ['a', 'abcde',
    // 5
    'abcdefghijk',
    // 11
    'abcdefghijklmnopqrstuvw']);
  });
});