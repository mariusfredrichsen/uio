"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Statuses = exports.Required = exports.HelpText = exports.Disabled = exports.Default = exports.Autogrow = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactFinalForm = require("react-final-form");
var _formDecorator = require("../formDecorator.js");
var _propTypes = require("../shared/propTypes.js");
var _index = require("../validators/index.js");
var _TextAreaFieldFF = require("./TextAreaFieldFF.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const description = `
The \`TextAreaFieldFF\` is a wrapper around a \`TextAreaField\` that enables it to work with Final Form, the preferred library for form validation and utilities in DHIS 2 apps.

#### Final Form

See how to use Final Form at [Final Form - Getting Started](https://final-form.org/docs/react-final-form/getting-started).

Inside a Final Form \`<Form>\` component, these 'FF' UI components are intended to be used in the \`component\` prop of the [Final Form \`<Field>\` components](https://final-form.org/docs/react-final-form/api/Field) where they will receive some props from the Field, e.g. \`<Field component={TextAreaFieldFF} />\`.  See the code samples below for examples.

#### Props

The props shown in the table below are generally provided to the \`TextAreaFieldFF\` wrapper by the Final Form \`Field\`.

Note that any props beyond the API of the \`Field\` component will be spread to the \`TextAreaFieldFF\`, which passes any extra props to the underlying \`TextAreaField\` using \`{...rest}\`.

Therefore, to add any props to the \`TextAreaFieldFF\` or \`TextAreaField\`, add those props to the parent Final Form \`Field\` component.

Also see \`TextArea\` and \`TextAreaField\` for notes about props and implementation.

\`\`\`js
import { TextAreaFieldFF } from '@dhis2/ui'
\`\`\`

Press **Submit** to see the form values logged to the console.
`;
var _default = exports.default = {
  title: 'Text Area Field (Final Form)',
  component: _TextAreaFieldFF.TextAreaFieldFF,
  decorators: [_formDecorator.formDecorator],
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    input: {
      ..._propTypes.inputArgType
    },
    meta: {
      ..._propTypes.metaArgType
    }
  }
};
const Default = () => /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  component: _TextAreaFieldFF.TextAreaFieldFF,
  name: "agree",
  label: "Do you agree?"
});
exports.Default = Default;
const Autogrow = () => /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  component: _TextAreaFieldFF.TextAreaFieldFF,
  name: "agree",
  label: "Do you agree?",
  autoGrow: true
});
exports.Autogrow = Autogrow;
const Required = () => /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  name: "agree",
  component: _TextAreaFieldFF.TextAreaFieldFF,
  required: true,
  validate: _index.hasValue,
  label: "Do you agree?"
});
exports.Required = Required;
const Disabled = () => /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  name: "agree",
  component: _TextAreaFieldFF.TextAreaFieldFF,
  disabled: true,
  label: "Do you agree?"
});
exports.Disabled = Disabled;
const HelpText = () => /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  name: "agree",
  component: _TextAreaFieldFF.TextAreaFieldFF,
  label: "Do you agree?",
  helpText: "Click to agree"
});
exports.HelpText = HelpText;
HelpText.storyName = 'Help text';
const Statuses = () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  name: "valid",
  component: _TextAreaFieldFF.TextAreaFieldFF,
  label: "Valid",
  valid: true,
  validationText: "Validation text"
}), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  name: "warning",
  component: _TextAreaFieldFF.TextAreaFieldFF,
  label: "Warning",
  warning: true,
  validationText: "Validation text"
}), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  name: "error",
  component: _TextAreaFieldFF.TextAreaFieldFF,
  label: "Error",
  error: true,
  validationText: "Validation text"
}));
exports.Statuses = Statuses;