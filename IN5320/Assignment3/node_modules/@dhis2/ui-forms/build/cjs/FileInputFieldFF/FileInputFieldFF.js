"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileInputFieldFF = void 0;
var _fileInput = require("@dhis2-ui/file-input");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = _interopRequireDefault(require("../locales/index.js"));
var _helpers = require("../shared/helpers.js");
var _propTypes2 = require("../shared/propTypes.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const btnLabel = _index.default.t('Upload file');
const btnLabelMulti = _index.default.t('Upload files');
const dedupeAndConcat = (currentFiles, newFileList) => {
  return [...currentFiles, ...newFileList].reduceRight((acc, file) => {
    if (!acc.unique.has(file.name)) {
      acc.unique.add(file.name);
      acc.files.unshift(file);
    }
    return acc;
  }, {
    files: [],
    unique: new Set()
  }).files;
};
const createChangeHandler = (input, multifile) => _ref => {
  let {
    files
  } = _ref;
  // A JavaScript FileList instance is read-only, so we cannot add files to it
  // FileList also doesn't have a .map method so by destructuring the FileList
  // instance into an array we can add, remove and map
  const currentFiles = Array.isArray(input.value) ? input.value : [];
  const value = multifile ? dedupeAndConcat(currentFiles, files) : [...files];
  input.onChange(value);
};
const createRemoveHandler = (input, fileToDelete) => () => {
  const files = input.value.filter(file => file !== fileToDelete);
  const value = files.length > 0 ? files : '';
  input.onChange(value);
};
const FileInputFieldFF = _ref2 => {
  let {
    buttonLabel,
    disabled,
    error,
    input,
    meta,
    multifile,
    showValidStatus,
    valid,
    validationText,
    ...rest
  } = _ref2;
  const files = input.value || [];
  return /*#__PURE__*/_react.default.createElement(_fileInput.FileInputField, _extends({}, rest, {
    onChange: createChangeHandler(input, multifile),
    buttonLabel: buttonLabel || (multifile ? btnLabelMulti : btnLabel),
    disabled: disabled || !multifile && files.length >= 1,
    multiple: multifile,
    name: input.name,
    error: (0, _helpers.hasError)(meta, error),
    valid: (0, _helpers.isValid)(meta, valid, showValidStatus),
    validationText: (0, _helpers.getValidationText)(meta, validationText, error)
  }), files.map(file => /*#__PURE__*/_react.default.createElement(_fileInput.FileListItem, {
    key: file.name,
    label: file.name,
    onRemove: createRemoveHandler(input, file),
    removeText: _index.default.t('Remove')
  })));
};
exports.FileInputFieldFF = FileInputFieldFF;
FileInputFieldFF.propTypes = {
  /** `input` props provided by Final Form `Field` */
  input: _propTypes2.inputPropType.isRequired,
  /** `meta` props provided by Final Form `Field` */
  meta: _propTypes2.metaPropType.isRequired,
  buttonLabel: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  error: _propTypes.default.bool,
  multifile: _propTypes.default.bool,
  showValidStatus: _propTypes.default.bool,
  valid: _propTypes.default.bool,
  validationText: _propTypes.default.string,
  value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.instanceOf(File)), _propTypes.default.oneOf([''])])
};