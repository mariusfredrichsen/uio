"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _uiConstants = require("@dhis2/ui-constants");
var _statusIcon = require("@dhis2-ui/status-icon");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _inputTypes = require("./inputTypes.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const styles = [`.input.jsx-31445346{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;gap:${_uiConstants.spacers.dp8};}`, `input.jsx-31445346{box-sizing:border-box;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;color:${_uiConstants.colors.grey900};background-color:white;padding:11px 12px;max-height:40px;outline:0;border:1px solid ${_uiConstants.colors.grey500};border-radius:3px;box-shadow:inset 0 0 1px 0 rgba(48,54,60,0.1);text-overflow:ellipsis;}`, "input.dense.jsx-31445346{max-height:32px;padding:7px 8px;}", `input.jsx-31445346:focus{outline:none;box-shadow:inset 0 0 0 2px ${_uiConstants.theme.focus};border-color:${_uiConstants.theme.focus};}`, `input.jsx-31445346::-webkit-input-placeholder{color:${_uiConstants.colors.grey600};opacity:1;}`, `input.jsx-31445346::-moz-placeholder{color:${_uiConstants.colors.grey600};opacity:1;}`, `input.jsx-31445346:-ms-input-placeholder{color:${_uiConstants.colors.grey600};opacity:1;}`, `input.jsx-31445346::placeholder{color:${_uiConstants.colors.grey600};opacity:1;}`, "input[type='date'].jsx-31445346::-webkit-inner-spin-button,input[type='date'].jsx-31445346::-webkit-calendar-picker-indicator,input[type='time'].jsx-31445346::-webkit-inner-spin-button,input[type='time'].jsx-31445346::-webkit-calendar-picker-indicator,input[type='datetime-local'].jsx-31445346::-webkit-inner-spin-button,input[type='datetime-local'].jsx-31445346::-webkit-calendar-picker-indicator{height:14px;padding-top:1px;padding-bottom:1px;}", "input[type='date'].jsx-31445346::-webkit-datetime-edit-fields-wrapper,input[type='datetime-local'].jsx-31445346::-webkit-datetime-edit-fields-wrapper,input[type='time'].jsx-31445346::-webkit-datetime-edit-fields-wrapper{padding:0;}", `input.warning.jsx-31445346{border-color:${_uiConstants.theme.warning};}`, `input.error.jsx-31445346{border-color:${_uiConstants.theme.error};}`, `input.read-only.jsx-31445346{background-color:${_uiConstants.colors.grey050};border-color:${_uiConstants.colors.grey300};box-shadow:none;cursor:text;}`, `input.disabled.jsx-31445346{background-color:${_uiConstants.colors.grey100};border-color:${_uiConstants.colors.grey500};color:${_uiConstants.theme.disabled};cursor:not-allowed;}`];
styles.__hash = "31445346";
class Input extends _react.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "inputRef", /*#__PURE__*/_react.default.createRef());
    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleKeyDown", e => {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(this.createHandlerPayload(e), e);
      }
    });
  }
  componentDidMount() {
    if (this.props.initialFocus) {
      this.inputRef.current.focus();
    }
  }
  createHandlerPayload(e) {
    return {
      value: e.target.value,
      name: this.props.name
    };
  }
  render() {
    const {
      role,
      className,
      type = 'text',
      dense,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      max,
      min,
      step,
      autoComplete,
      dataTest = 'dhis2-uicore-input'
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-test": dataTest,
      className: "jsx-3353877153 " + `jsx-${styles.__hash}` + " " + ((0, _classnames.default)('input', className) || "")
    }, /*#__PURE__*/_react.default.createElement("input", {
      role: role,
      id: name,
      name: name,
      placeholder: placeholder,
      ref: this.inputRef,
      type: type,
      value: value,
      max: max,
      min: min,
      step: step,
      disabled: disabled,
      readOnly: readOnly,
      tabIndex: tabIndex,
      autoComplete: autoComplete,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      onKeyDown: this.handleKeyDown,
      className: "jsx-3353877153 " + `jsx-${styles.__hash}` + " " + ((0, _classnames.default)({
        dense,
        disabled,
        error,
        valid,
        warning,
        'read-only': readOnly
      }) || "")
    }), /*#__PURE__*/_react.default.createElement(_statusIcon.StatusIcon, {
      error: error,
      valid: valid,
      loading: loading,
      warning: warning
    }), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: styles.__hash
    }, styles), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "3353877153"
    }, ["input.jsx-3353877153{width:100%;}"]));
  }
}
exports.Input = Input;
_defineProperty(Input, "defaultProps", {
  type: 'text',
  dataTest: 'dhis2-uicore-input'
});
Input.propTypes = {
  /** The [native `autocomplete` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) */
  autoComplete: _propTypes.default.string,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  /** Makes the input smaller */
  dense: _propTypes.default.bool,
  /** Disables the input */
  disabled: _propTypes.default.bool,
  /** Applies 'error' appearance for validation feedback. Mutually exclusive with `valid` and `warning` props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  /** The input grabs initial focus on the page */
  initialFocus: _propTypes.default.bool,
  /** Adds a loading indicator beside the input */
  loading: _propTypes.default.bool,
  /** The [native `max` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max), for use when `type` is `'number'` */
  max: _propTypes.default.string,
  /** The [native `min` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min), for use when `type` is `'number'` */
  min: _propTypes.default.string,
  /** Name associated with the input. Passed to event handler callbacks in object */
  name: _propTypes.default.string,
  /** Placeholder text for the input */
  placeholder: _propTypes.default.string,
  /** Makes the input read-only */
  readOnly: _propTypes.default.bool,
  /** Sets a role attribute on the input */
  role: _propTypes.default.string,
  /** The [native `step` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step), for use when `type` is `'number'` */
  step: _propTypes.default.string,
  tabIndex: _propTypes.default.string,
  /** The native input `type` attribute */
  type: _propTypes.default.oneOf(_inputTypes.inputTypes),
  /** Applies 'valid' appearance for validation feedback. Mutually exclusive with `error` and `warning` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,
  /** Value in the input. Can be used to control the component (recommended). Passed to event handler callbacks in object */
  value: _propTypes.default.string,
  /** Applies 'warning' appearance for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  /** Called with signature `({ name: string, value: string }, event)` */
  onBlur: _propTypes.default.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onChange: _propTypes.default.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onFocus: _propTypes.default.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onKeyDown: _propTypes.default.func
};