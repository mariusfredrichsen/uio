"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputFieldProps = exports.InputField = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _box = require("@dhis2-ui/box");
var _field = require("@dhis2-ui/field");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = require("../input/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class InputField extends _react.default.Component {
  render() {
    const {
      className,
      onChange,
      onFocus,
      onKeyDown,
      onBlur,
      initialFocus,
      type,
      dense,
      required,
      label,
      disabled,
      readOnly,
      placeholder,
      name,
      max,
      min,
      step,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      helpText,
      validationText,
      inputWidth,
      autoComplete,
      dataTest = 'dhis2-uiwidgets-inputfield'
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_field.Field, {
      className: className,
      dataTest: dataTest,
      error: error,
      warning: warning,
      valid: valid,
      helpText: helpText,
      validationText: validationText,
      label: label,
      name: name,
      disabled: disabled,
      required: required
    }, /*#__PURE__*/_react.default.createElement(_box.Box, {
      width: inputWidth,
      minWidth: "72px"
    }, /*#__PURE__*/_react.default.createElement(_index.Input, {
      onFocus: onFocus,
      onKeyDown: onKeyDown,
      onBlur: onBlur,
      onChange: onChange,
      name: name,
      type: type,
      value: value || '',
      placeholder: placeholder,
      disabled: disabled,
      max: max,
      min: min,
      step: step,
      valid: valid,
      warning: warning,
      error: error,
      loading: loading,
      dense: dense,
      tabIndex: tabIndex,
      initialFocus: initialFocus,
      readOnly: readOnly,
      autoComplete: autoComplete
    })));
  }
}
exports.InputField = InputField;
_defineProperty(InputField, "defaultProps", {
  dataTest: 'dhis2-uiwidgets-inputfield'
});
const InputFieldProps = exports.InputFieldProps = {
  /** The [native `autocomplete` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) */
  autoComplete: _propTypes.default.string,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  /** Makes the input smaller */
  dense: _propTypes.default.bool,
  /** Disables the input */
  disabled: _propTypes.default.bool,
  /** Applies 'error' appearance for validation feedback. Mutually exclusive with `valid` and `warning` props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  /** Guiding text for how to use this input */
  helpText: _propTypes.default.string,
  /** The input grabs initial focus on the page */
  initialFocus: _propTypes.default.bool,
  /** Defines the width of the input. Can be any valid CSS measurement */
  inputWidth: _propTypes.default.string,
  /** Label text for the input */
  label: _propTypes.default.string,
  /** Adds a loading indicator beside the input */
  loading: _propTypes.default.bool,
  /** The [native `max` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max), for use when `type` is `'number'` */
  max: _propTypes.default.string,
  /** The [native `min` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min), for use when `type` is `'number'` */
  min: _propTypes.default.string,
  /** Name associated with the input. Passed to event handler callbacks in object */
  name: _propTypes.default.string,
  /** Placeholder text for the input */
  placeholder: _propTypes.default.string,
  /** Makes the input read-only */
  readOnly: _propTypes.default.bool,
  /** Indicates this input is required */
  required: _propTypes.default.bool,
  /** The [native `step` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step), for use when `type` is `'number'` */
  step: _propTypes.default.string,
  tabIndex: _propTypes.default.string,
  /** Type of input */
  type: _propTypes.default.oneOf(_index.inputTypes),
  /** Applies 'valid' appearance for validation feedback. Mutually exclusive with `error` and `warning` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,
  /** Text below input for validation feedback. Receives styles depending on validation status */
  validationText: _propTypes.default.string,
  /** Value in the input. Can be used to control the component (recommended). Passed to event handler callbacks in object */
  value: _propTypes.default.string,
  /** Applies 'warning' appearance for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  /** Called with signature `({ name: string, value: string }, event)` */
  onBlur: _propTypes.default.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onChange: _propTypes.default.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onFocus: _propTypes.default.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onKeyDown: _propTypes.default.func
};
InputField.propTypes = InputFieldProps;