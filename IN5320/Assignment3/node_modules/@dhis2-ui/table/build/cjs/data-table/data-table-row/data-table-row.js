"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableRow = void 0;
var _propTypes = require("@dhis2/prop-types");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _index = require("../table-elements/index.js");
var _dataTableRowStyles = _interopRequireDefault(require("./data-table-row.styles.js"));
var _dragHandleCell = require("./drag-handle-cell.js");
var _expandHandleCell = require("./expand-handle-cell.js");
var _expandedRow = require("./expanded-row.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const DataTableRow = exports.DataTableRow = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-datatablerow',
    expandableContent,
    expanded,
    selected,
    draggable,
    role,
    onExpandToggle,
    ...rest
  } = _ref;
  const [isHoveringExpandedContent, setIsHoveringExpandedContent] = (0, _react.useState)(false);
  const classes = (0, _classnames.default)(className, _dataTableRowStyles.default.className, {
    expanded,
    selected,
    draggable,
    isHoveringExpandedContent
  });
  const childCount = _react.default.Children.count(children);
  const colSpan = String(draggable || expandableContent ? childCount + 1 : childCount);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TableRow, _extends({
    ref: ref,
    className: classes,
    dataTest: dataTest,
    selected: selected,
    draggable: draggable,
    role: role
  }, rest), draggable && /*#__PURE__*/_react.default.createElement(_dragHandleCell.DragHandleCell, null), expandableContent && /*#__PURE__*/_react.default.createElement(_expandHandleCell.ExpandHandleCell, {
    expanded: expanded,
    onClick: onExpandToggle
  }), children, _dataTableRowStyles.default.styles), expandableContent && expanded && /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
    className: className,
    dataTest: dataTest,
    setIsHoveringExpandedContent: setIsHoveringExpandedContent,
    colSpan: colSpan,
    selected: selected
  }, expandableContent));
});
DataTableRow.displayName = 'DataTableRow';
DataTableRow.propTypes = {
  /** Should be `<DataTableCell>` or `<DataTableCellHead>` components */
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  dataTest: _propTypes2.default.string,
  /** Renders and additional table cell with drag icon and applies draggable styles */
  draggable: _propTypes2.default.bool,
  /** This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon */
  expandableContent: (0, _propTypes.requiredIf)(props => props.onExpandToggle, _propTypes2.default.node),
  /** Toggles expand icon (up/down) and expandable content visibility */
  expanded: _propTypes2.default.bool,
  role: _propTypes2.default.string,
  /** Adds a green background color */
  selected: _propTypes2.default.bool,
  /** Callback for expand icon cell clicks */
  onExpandToggle: (0, _propTypes.requiredIf)(props => props.expandableContent, _propTypes2.default.func)
};