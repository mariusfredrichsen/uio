"use strict";

var _enzyme = require("enzyme");
var _react = _interopRequireDefault(require("react"));
var _dataTableCell = require("../data-table-cell.js");
var _index = require("../table-elements/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('<DataTableCell>', () => {
  it('renders children', () => {
    const children = 'children';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, null, children));
    expect(wrapper.containsMatchingElement(children)).toBe(true);
  });
  it('accepts a ref', () => {
    const ref = /*#__PURE__*/_react.default.createRef();
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement("table", null, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      ref: ref
    })))));
    expect(wrapper.find('td').getDOMNode()).toBe(ref.current);
  });
  it('accepts an active prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      active: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('active')).toBe(true);
  });
  it('accepts an align prop', () => {
    const right = 'right';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      align: right
    }));
    expect(wrapper.find(_index.TableDataCell).prop('align')).toBe(right);
  });
  it('accepts a bordered prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      bordered: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('bordered')).toBe(true);
  });
  it('accepts a className prop', () => {
    const className = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      className: className
    }));
    expect(wrapper.find(_index.TableDataCell).prop('className')).toBe(className);
  });
  it('accepts a colSpan prop', () => {
    const colSpan = '3';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      colSpan: colSpan
    }));
    expect(wrapper.find(_index.TableDataCell).prop('colSpan')).toBe(colSpan);
  });
  it('accepts a dataTest prop', () => {
    const dataTest = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      dataTest: dataTest
    }));
    expect(wrapper.find(_index.TableDataCell).prop('dataTest')).toBe(dataTest);
  });
  it('accepts an error prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      error: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('error')).toBe(true);
  });
  it('accepts a fixed prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      fixed: true
    }));
    expect(wrapper.find(_index.TableDataCell)).toHaveLength(0);
    expect(wrapper.find(_index.TableHeaderCell)).toHaveLength(1);
    expect(wrapper.find(_index.TableHeaderCell).dive().type()).toBe('th');
    expect(wrapper.find(_index.TableHeaderCell).prop('fixed')).toBe(true);
  });
  it('accepts a large prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      large: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('large')).toBe(true);
  });
  it('accepts a left prop', () => {
    const left = '200px';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      left: left
    }));
    expect(wrapper.find(_index.TableDataCell).prop('left')).toBe(left);
  });
  it('accepts a muted prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      muted: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('muted')).toBe(true);
  });
  it('accepts a role prop', () => {
    const role = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      role: role
    }));
    expect(wrapper.find(_index.TableDataCell).prop('role')).toBe(role);
  });
  it('accepts a rowSpan prop', () => {
    const rowSpan = '3';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      rowSpan: rowSpan
    }));
    expect(wrapper.find(_index.TableDataCell).prop('rowSpan')).toBe(rowSpan);
  });
  it('accepts a scope prop', () => {
    const scope = 'row';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      scope: scope
    }));
    expect(wrapper.find(_index.TableDataCell).prop('scope')).toBe(scope);
  });
  it('accepts a staticStyle prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      staticStyle: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('staticStyle')).toBe(true);
  });
  it('can render either a td or th tag depending on the fixed and tag prop', () => {
    // default
    expect((0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, null)).dive().type()).toBe('td');
    // using the tag prop
    expect((0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      tag: "td"
    })).dive().type()).toBe('td');
    expect((0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      tag: "th"
    })).dive().type()).toBe('th');
    // with fixed prop
    expect((0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      fixed: true
    })).dive().type()).toBe('th');
    // tag prop should take presedence over fixed prop
    expect((0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      fixed: true,
      tag: "td"
    })).dive().type()).toBe('td');
    expect((0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      fixed: true,
      tag: "th"
    })).dive().type()).toBe('th');
  });
  it('accepts a valid prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      valid: true
    }));
    expect(wrapper.find(_index.TableDataCell).prop('valid')).toBe(true);
  });
  it('accepts a width prop', () => {
    const width = '200px';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      width: width
    }));
    expect(wrapper.find(_index.TableDataCell).prop('width')).toBe(width);
  });
  it('accepts an onClick prop', () => {
    const onClick = jest.fn();
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableCell.DataTableCell, {
      onClick: onClick
    }));
    wrapper.simulate('click');
    expect(onClick).toHaveBeenCalledTimes(1);
  });
});