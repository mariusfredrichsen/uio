import _JSXStyle from "styled-jsx/style";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { mutuallyExclusive, requiredIf } from '@dhis2/prop-types';
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
import styles from './table-data-cell.styles.js';
const rtlCorrespondingAlignments = {
  left: 'right',
  right: 'left',
  center: 'center'
};
export const TableDataCell = /*#__PURE__*/forwardRef((_ref, ref) => {
  var _rtlCorrespondingAlig;
  let {
    active,
    align = 'left',
    backgroundColor,
    bordered,
    children,
    className,
    colSpan,
    dataTest = 'dhis2-uicore-tabledatacel',
    error,
    large,
    left = 'auto',
    muted,
    role,
    rowSpan,
    scope,
    staticStyle,
    valid,
    width = 'auto',
    onClick,
    ...props
  } = _ref;
  const rtlAlign = (_rtlCorrespondingAlig = rtlCorrespondingAlignments[align]) !== null && _rtlCorrespondingAlig !== void 0 ? _rtlCorrespondingAlig : align;
  return /*#__PURE__*/React.createElement("td", _extends({}, props, {
    ref: ref,
    colSpan: colSpan,
    rowSpan: rowSpan,
    onClick: onClick,
    "data-test": dataTest,
    role: role,
    scope: scope,
    className: `jsx-${styles.__hash}` + " " + _JSXStyle.dynamic([["836058623", [left, align, width, backgroundColor || colors.white, rtlAlign, backgroundColor || colors.teal100, backgroundColor || colors.grey100, backgroundColor || colors.grey200, backgroundColor || '#cdeae8']]]) + " " + (cx(className, {
      active,
      bordered,
      error,
      large,
      muted,
      staticStyle,
      valid
    }) || "")
  }), children, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "836058623",
    dynamic: [left, align, width, backgroundColor || colors.white, rtlAlign, backgroundColor || colors.teal100, backgroundColor || colors.grey100, backgroundColor || colors.grey200, backgroundColor || '#cdeae8']
  }, [`td.__jsx-style-dynamic-selector{inset-inline-start:${left};text-align:${align};width:${width};background-color:${backgroundColor || colors.white};}`, `.__jsx-style-dynamic-selector:dir(rtl){text-align:${rtlAlign};}`, `tr.selected>td.__jsx-style-dynamic-selector{background-color:${backgroundColor || colors.teal100};}`, `tr:hover>td.__jsx-style-dynamic-selector:not(.staticStyle){background-color:${backgroundColor || colors.grey100};}`, `tr:active>td.__jsx-style-dynamic-selector:not(.staticStyle){background-color:${backgroundColor || colors.grey200};}`, `tr.selected:hover>td.__jsx-style-dynamic-selector:not(.staticStyle){background-color:${backgroundColor || '#cdeae8'};}`]));
});
TableDataCell.displayName = 'TableDataCell';
const stylePropType = mutuallyExclusive(['valid', 'error', 'muted'], PropTypes.bool);
TableDataCell.propTypes = {
  /** To toggle border color, for example for editing */
  active: PropTypes.bool,
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /** Sets background color of the cell. Disables dynamic background colors from active, hover, and selected states */
  backgroundColor: PropTypes.string,
  bordered: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,
  colSpan: PropTypes.string,
  dataTest: PropTypes.string,
  /** Mutually exclusive with muted and valid */
  error: stylePropType,
  large: PropTypes.bool,
  /** Required when fixed */
  left: requiredIf(props => props.fixed, PropTypes.string),
  /** Mutually exclusive with error and valid */
  muted: stylePropType,
  role: PropTypes.string,
  rowSpan: PropTypes.string,
  scope: PropTypes.string,
  /** Surpress hover and active event styles */
  staticStyle: PropTypes.bool,
  /** Mutually exclusive with error and muted */
  valid: stylePropType,
  width: PropTypes.string,
  onClick: PropTypes.func
};