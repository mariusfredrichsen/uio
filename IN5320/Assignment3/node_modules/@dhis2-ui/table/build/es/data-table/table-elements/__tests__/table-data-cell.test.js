import { shallow, mount } from 'enzyme';
import React from 'react';
import { TableDataCell } from '../table-data-cell/table-data-cell.js';
describe('<TableDataCell>', () => {
  it('renders children', () => {
    const children = 'children';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, null, children));
    expect(wrapper.containsMatchingElement(children)).toBe(true);
  });
  it('accepts a ref', () => {
    const ref = /*#__PURE__*/React.createRef();
    const wrapper = mount( /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement(TableDataCell, {
      ref: ref
    })))));
    expect(wrapper.find('td').getDOMNode()).toBe(ref.current);
  });
  it('accepts an active prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      active: true
    }));
    expect(wrapper.find('td').hasClass('active')).toBe(true);
  });
  it('accepts an align prop', () => {
    const align = 'right';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      align: align
    }));
    expect(wrapper.html()).toContain(`text-align: ${align};`);
  });
  it('accepts a bordered prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      bordered: true
    }));
    expect(wrapper.find('td').hasClass('bordered')).toBe(true);
  });
  it('accepts a className prop', () => {
    const className = 'test';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      className: className
    }));
    expect(wrapper.find('td').hasClass(className)).toBe(true);
  });
  it('accepts a colSpan prop', () => {
    const colSpan = '3';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      colSpan: colSpan
    }));
    expect(wrapper.find('td').prop('colSpan')).toBe(colSpan);
  });
  it('accepts a dataTest prop', () => {
    const dataTest = 'test';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      dataTest: dataTest
    }));
    expect(wrapper.find('td').prop('data-test')).toBe(dataTest);
  });
  it('accepts an error prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      error: true
    }));
    expect(wrapper.find('td').hasClass('error')).toBe(true);
  });
  it('accepts a large prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      large: true
    }));
    expect(wrapper.find('td').hasClass('large')).toBe(true);
  });
  it('accepts a left prop', () => {
    const left = '200px';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      left: left
    }));
    expect(wrapper.html()).toContain(`inset-inline-start: ${left};`);
  });
  it('accepts a muted prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      muted: true
    }));
    expect(wrapper.find('td').hasClass('muted')).toBe(true);
  });
  it('accepts a role prop', () => {
    const role = 'test';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      role: role
    }));
    expect(wrapper.find('td').prop('role')).toBe(role);
  });
  it('accepts a rowSpan prop', () => {
    const rowSpan = '3';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      rowSpan: rowSpan
    }));
    expect(wrapper.find('td').prop('rowSpan')).toBe(rowSpan);
  });
  it('accepts a scope prop', () => {
    const scope = 'row';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      scope: scope
    }));
    expect(wrapper.find('td').prop('scope')).toBe(scope);
  });
  it('accepts a staticStyle prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      staticStyle: true
    }));
    expect(wrapper.find('td').hasClass('staticStyle')).toBe(true);
  });
  it('accepts a valid prop', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      valid: true
    }));
    expect(wrapper.find('td').hasClass('valid')).toBe(true);
  });
  it('accepts a width prop', () => {
    const width = '200px';
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      width: width
    }));
    expect(wrapper.html()).toContain(`width: ${width};`);
  });
  it('accepts an onClick prop', () => {
    const onClick = jest.fn();
    const wrapper = shallow( /*#__PURE__*/React.createElement(TableDataCell, {
      onClick: onClick
    }));
    wrapper.simulate('click');
    expect(onClick).toHaveBeenCalledTimes(1);
  });
});