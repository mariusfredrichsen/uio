import _JSXStyle from "styled-jsx/style";
import { requiredIf } from '@dhis2/prop-types';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
import { TableHeaderCell } from '../table-elements/index.js';
import { styles, resolvedTableHeaderCss } from './data-table-column-header.styles.js';
import { FilterHandle } from './filter-handle.js';
import { Sorter, SORT_DIRECTIONS } from './sorter.js';
const flexboxAlignLookup = {
  left: 'flex-start',
  center: 'center',
  right: 'flex-end'
};
export const DataTableColumnHeader = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    align,
    children,
    className,
    colSpan,
    dataTest = 'dhis2-uicore-datatablecellhead',
    filter,
    fixed,
    large,
    left,
    name,
    role,
    rowSpan,
    scope,
    showFilter,
    sortDirection,
    sortIconTitle,
    top,
    width,
    onFilterIconClick,
    onSortIconClick
  } = _ref;
  return /*#__PURE__*/React.createElement(TableHeaderCell, {
    align: align,
    className: cx(className, 'DataTableColumnHeader', resolvedTableHeaderCss.className),
    colSpan: colSpan,
    dataTest: dataTest,
    fixed: fixed,
    large: large,
    left: left,
    ref: ref,
    rowSpan: rowSpan,
    role: role,
    scope: scope,
    top: top,
    width: width
  }, /*#__PURE__*/React.createElement("span", {
    className: "jsx-3463223249 " + `jsx-${styles.__hash}` + " " + "container"
  }, /*#__PURE__*/React.createElement("span", {
    className: "jsx-3463223249 " + `jsx-${styles.__hash}` + " " + (cx('top', {
      large
    }) || "")
  }, /*#__PURE__*/React.createElement("span", {
    className: "jsx-3463223249 " + `jsx-${styles.__hash}` + " " + "content"
  }, children), sortDirection && /*#__PURE__*/React.createElement(Sorter, {
    name: name,
    sortDirection: sortDirection,
    onClick: onSortIconClick,
    title: sortIconTitle
  }), filter && /*#__PURE__*/React.createElement(FilterHandle, {
    name: name,
    active: showFilter,
    onClick: onFilterIconClick
  })), showFilter && filter), resolvedTableHeaderCss.styles, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3463223249"
  }, [`.label.jsx-3463223249{-webkit-box-pack:${flexboxAlignLookup[align]};-webkit-justify-content:${flexboxAlignLookup[align]};-ms-flex-pack:${flexboxAlignLookup[align]};justify-content:${flexboxAlignLookup[align]};}`]));
});
DataTableColumnHeader.displayName = 'DataTableColumnHeader';
DataTableColumnHeader.propTypes = {
  align: PropTypes.oneOf(['left', 'center', 'right']),
  children: PropTypes.node,
  className: PropTypes.string,
  colSpan: PropTypes.string,
  dataTest: PropTypes.string,
  /** The filter element (JSX), required when onFilterIconClick or showFilter are present */
  filter: requiredIf(props => props.onFilterIconClick || props.showFilter, PropTypes.node),
  fixed: PropTypes.bool,
  large: PropTypes.bool,
  /** Left or top required when fixed */
  left: requiredIf(props => props.fixed && !props.top, PropTypes.string),
  /** Can be used to match a column with a property name */
  name: PropTypes.string,
  role: PropTypes.string,
  rowSpan: PropTypes.string,
  scope: PropTypes.string,
  showFilter: requiredIf(props => props.filter, PropTypes.bool),
  sortDirection: requiredIf(props => props.onSortIconClick, PropTypes.oneOf(SORT_DIRECTIONS)),
  sortIconTitle: PropTypes.string,
  /** Left or top required when fixed */
  top: requiredIf(props => props.fixed && !props.left, PropTypes.string),
  width: PropTypes.string,
  onFilterIconClick: requiredIf(props => props.filter, PropTypes.func),
  /** Sort icon click callback with `nextSortDirection` and `name` in payload */
  onSortIconClick: requiredIf(props => props.sortDirection, PropTypes.func)
};