function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { requiredIf } from '@dhis2/prop-types';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useState, forwardRef } from 'react';
import { TableRow } from '../table-elements/index.js';
import resolvedCss from './data-table-row.styles.js';
import { DragHandleCell } from './drag-handle-cell.js';
import { ExpandHandleCell } from './expand-handle-cell.js';
import { ExpandedRow } from './expanded-row.js';
export const DataTableRow = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-datatablerow',
    expandableContent,
    expanded,
    selected,
    draggable,
    role,
    onExpandToggle,
    ...rest
  } = _ref;
  const [isHoveringExpandedContent, setIsHoveringExpandedContent] = useState(false);
  const classes = cx(className, resolvedCss.className, {
    expanded,
    selected,
    draggable,
    isHoveringExpandedContent
  });
  const childCount = React.Children.count(children);
  const colSpan = String(draggable || expandableContent ? childCount + 1 : childCount);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, _extends({
    ref: ref,
    className: classes,
    dataTest: dataTest,
    selected: selected,
    draggable: draggable,
    role: role
  }, rest), draggable && /*#__PURE__*/React.createElement(DragHandleCell, null), expandableContent && /*#__PURE__*/React.createElement(ExpandHandleCell, {
    expanded: expanded,
    onClick: onExpandToggle
  }), children, resolvedCss.styles), expandableContent && expanded && /*#__PURE__*/React.createElement(ExpandedRow, {
    className: className,
    dataTest: dataTest,
    setIsHoveringExpandedContent: setIsHoveringExpandedContent,
    colSpan: colSpan,
    selected: selected
  }, expandableContent));
});
DataTableRow.displayName = 'DataTableRow';
DataTableRow.propTypes = {
  /** Should be `<DataTableCell>` or `<DataTableCellHead>` components */
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  /** Renders and additional table cell with drag icon and applies draggable styles */
  draggable: PropTypes.bool,
  /** This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon */
  expandableContent: requiredIf(props => props.onExpandToggle, PropTypes.node),
  /** Toggles expand icon (up/down) and expandable content visibility */
  expanded: PropTypes.bool,
  role: PropTypes.string,
  /** Adds a green background color */
  selected: PropTypes.bool,
  /** Callback for expand icon cell clicks */
  onExpandToggle: requiredIf(props => props.expandableContent, PropTypes.func)
};