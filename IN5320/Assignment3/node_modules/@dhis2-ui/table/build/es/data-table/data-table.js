import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
import { Table, TableScrollBox } from './table-elements/index.js';
export const DataTable = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-datatable',
    layout = 'auto',
    role,
    scrollHeight,
    scrollWidth,
    width = '100%'
  } = _ref;
  const scrollable = !!(scrollHeight || scrollWidth);
  const table = /*#__PURE__*/React.createElement(Table, {
    borderless: scrollable,
    className: className,
    dataTest: dataTest,
    layout: layout,
    ref: ref,
    role: role,
    width: width
  }, children);
  return !scrollable ? table : /*#__PURE__*/React.createElement(TableScrollBox, {
    className: cx(className, 'tablescrollbox'),
    dataTest: `${dataTest}-scrollbox`,
    maxHeight: scrollHeight,
    maxWidth: scrollWidth
  }, table);
});
DataTable.displayName = 'DataTable';
DataTable.propTypes = {
  /**
   * Should be `<DataTableHead>`, `<DataTableBody>`, and `<DataTableFoot>` components
   */
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  /**
   * Sets the `datatable-layout` property. Switching to `fixed` can prevent style
   * issues when dealing with a datatable with multiple frozen columns or when dealing
   * with filter elements in the datatable headers.
   */
  layout: PropTypes.oneOf(['auto', 'fixed', 'initial', 'inherit']),
  role: PropTypes.string,
  /** Sets max-height of scrollbox */
  scrollHeight: PropTypes.string,
  /** Sets max-width of scrollbox */
  scrollWidth: PropTypes.string,
  /**
   * Sets the `width` property. Providing an explicit width can prevent style
   * issues when dealing with horizontally scrolling datatables with a fixed layout.
   */
  width: PropTypes.string
};