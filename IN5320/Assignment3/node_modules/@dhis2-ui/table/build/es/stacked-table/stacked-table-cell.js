import _JSXStyle from "styled-jsx/style";
import { colors } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React from 'react';
import { ContentWithTitle } from './content-with-title.js';
const defaultHeaderLabels = [];
export const StackedTableCell = _ref => {
  let {
    children,
    className,
    colSpan,
    column,
    dataTest = 'dhis2-uicore-stackedtablecell',
    headerLabels = defaultHeaderLabels,
    hideTitle,
    rowSpan,
    title
  } = _ref;
  const cellTitle = title || headerLabels[column] || '';
  const realTitle = hideTitle ? '' : cellTitle;
  return /*#__PURE__*/React.createElement("td", {
    colSpan: colSpan,
    rowSpan: rowSpan,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1923758240", [colors.grey300]]]) + " " + (className || "")
  }, /*#__PURE__*/React.createElement(ContentWithTitle, {
    title: realTitle
  }, children), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1923758240",
    dynamic: [colors.grey300]
  }, [`td.__jsx-style-dynamic-selector{border-bottom:1px solid ${colors.grey300};padding:0 12px;font-size:14px;width:100%;display:block;}`, "td.__jsx-style-dynamic-selector:dir(rtl){text-align:right;}", "td.__jsx-style-dynamic-selector:last-child{border-bottom:0;}"]));
};
StackedTableCell.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  colSpan: PropTypes.string,
  column: PropTypes.number,
  dataTest: PropTypes.string,
  headerLabels: PropTypes.arrayOf(PropTypes.string),
  hideTitle: PropTypes.bool,
  rowSpan: PropTypes.string,
  title: PropTypes.string
};