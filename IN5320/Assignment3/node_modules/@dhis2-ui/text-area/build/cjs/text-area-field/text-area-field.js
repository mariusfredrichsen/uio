"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextAreaField = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _box = require("@dhis2-ui/box");
var _field = require("@dhis2-ui/field");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = require("../text-area/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const TextAreaField = _ref => {
  let {
    className,
    onChange,
    onFocus,
    onKeyDown,
    onBlur,
    initialFocus,
    dense,
    required,
    label,
    disabled,
    placeholder,
    name,
    valid,
    error,
    warning,
    loading,
    value,
    tabIndex,
    helpText,
    validationText,
    autoGrow,
    readOnly,
    resize = 'vertical',
    rows = 4,
    inputWidth,
    dataTest = 'dhis2-uiwidgets-textareafield'
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_field.Field, {
    className: className,
    dataTest: dataTest,
    disabled: disabled,
    required: required,
    name: name,
    helpText: helpText,
    validationText: validationText,
    error: error,
    warning: warning,
    valid: valid,
    label: label
  }, /*#__PURE__*/_react.default.createElement(_box.Box, {
    width: inputWidth,
    minWidth: "220px"
  }, /*#__PURE__*/_react.default.createElement(_index.TextArea, {
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    onBlur: onBlur,
    onChange: onChange,
    name: name,
    value: value || '',
    placeholder: placeholder,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    loading: loading,
    dense: dense,
    tabIndex: tabIndex,
    initialFocus: initialFocus,
    autoGrow: autoGrow,
    readOnly: readOnly,
    resize: resize,
    rows: rows
  })));
};
exports.TextAreaField = TextAreaField;
TextAreaField.propTypes = {
  /** Grow the text area in response to overflow instead of adding a scroll bar */
  autoGrow: _propTypes.default.bool,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  /** Compact mode */
  dense: _propTypes.default.bool,
  /** Disables the textarea and makes in non-interactive */
  disabled: _propTypes.default.bool,
  /** Applies 'error' styles for validation feedback. Mutually exclusive with `valid` and `warning` props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  /** Adds useful help text below the textarea */
  helpText: _propTypes.default.string,
  /** Grabs initial focus on the page */
  initialFocus: _propTypes.default.bool,
  /** Sets the width of the textarea. Minimum 220px. Any valid CSS measurement can be used */
  inputWidth: _propTypes.default.string,
  /** Labels the textarea */
  label: _propTypes.default.string,
  /** Adds a loading spinner */
  loading: _propTypes.default.bool,
  /** Name associated with the text area. Passed in object argument to event handlers. */
  name: _propTypes.default.string,
  /** Placeholder text for an empty textarea */
  placeholder: _propTypes.default.string,
  /** Makes the textarea read-only */
  readOnly: _propTypes.default.bool,
  /** Adds an asterisk to the label to indicate this field is required */
  required: _propTypes.default.bool,
  /** [Resize property](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) for the textarea element */
  resize: _propTypes.default.oneOf(['none', 'both', 'horizontal', 'vertical']),
  /** Initial height of the textarea, in lines of text */
  rows: _propTypes.default.number,
  tabIndex: _propTypes.default.string,
  /** Applies 'valid' styles for validation feedback. Mutually exclusive with `warning` and `error` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,
  /** Validation text below the textarea to provide validation feedback. Changes appearance depending on validation status */
  validationText: _propTypes.default.string,
  /** Value in the textarea. Can be used to control component (recommended). Passed in object argument to event handlers. */
  value: _propTypes.default.string,
  /** Applies 'warning' styles for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  /** Called with signature ({ name: string, value: string }, event) */
  onBlur: _propTypes.default.func,
  /** Called with signature ({ name: string, value: string }, event) */
  onChange: _propTypes.default.func,
  /** Called with signature ({ name: string, value: string }, event) */
  onFocus: _propTypes.default.func,
  /** Called with signature ({ name: string, value: string }, event) */
  onKeyDown: _propTypes.default.func
};