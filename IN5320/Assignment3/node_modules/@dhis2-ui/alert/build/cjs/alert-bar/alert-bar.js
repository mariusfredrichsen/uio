"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlertBar = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _propTypes = require("@dhis2/prop-types");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _actions = require("./actions.js");
var _alertBarStyles = _interopRequireWildcard(require("./alert-bar.styles.js"));
var _dismiss = require("./dismiss.js");
var _icon = require("./icon.js");
var _message = require("./message.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const AlertBar = _ref => {
  let {
    actions,
    children,
    className,
    critical,
    dataTest = 'dhis2-uicore-alertbar',
    duration = 8000,
    hidden,
    icon = true,
    permanent,
    success,
    warning,
    onHidden
  } = _ref;
  const [inViewport, setInViewport] = (0, _react.useState)(!hidden);
  const [inDOM, setInDOM] = (0, _react.useState)(!hidden);
  const showTimeout = (0, _react.useRef)(null);
  const displayTimeout = (0, _react.useRef)(null);
  const hideTimeout = (0, _react.useRef)(null);
  const displayStartTime = (0, _react.useRef)(null);
  const displayTimeRemaining = (0, _react.useRef)(null);
  const info = !critical && !success && !warning;
  const shouldAutoHide = !(permanent || warning || critical);
  const show = () => {
    setInDOM(true);
    setInViewport(true);
  };
  const hide = () => {
    setInDOM(true);
    setInViewport(false);
  };
  const remove = () => {
    setInDOM(false);
    setInViewport(false);
    onHidden && onHidden({}, null);
  };
  const clearAllTimeouts = () => {
    clearTimeout(showTimeout.current);
    clearTimeout(displayTimeout.current);
    clearTimeout(hideTimeout.current);
  };
  const runHideAnimation = () => {
    clearAllTimeouts();
    hide();
    hideTimeout.current = setTimeout(remove, _alertBarStyles.ANIMATION_TIME);
  };
  const startDisplayTimeout = () => {
    if (shouldAutoHide) {
      clearAllTimeouts();
      displayStartTime.current = Date.now();
      displayTimeRemaining.current = duration;
      displayTimeout.current = setTimeout(runHideAnimation, displayTimeRemaining.current);
    }
  };
  const runShowAnimation = () => {
    clearAllTimeouts();
    show();
    showTimeout.current = setTimeout(startDisplayTimeout, _alertBarStyles.ANIMATION_TIME);
  };
  const pauseDisplayTimeout = () => {
    if (shouldAutoHide) {
      clearAllTimeouts();
      const elapsedTime = Date.now() - displayStartTime.current;
      displayTimeRemaining.current -= elapsedTime;
    }
  };
  const resumeDisplayTimeout = () => {
    if (shouldAutoHide) {
      clearAllTimeouts();
      displayTimeout.current = setTimeout(runHideAnimation, displayTimeRemaining.current);
    }
  };
  (0, _react.useEffect)(() => {
    // Additional check on inDOM prevents the AlertBar from briefly showing
    // when it is mounted with a hidden prop set to true
    if (hidden && inDOM) {
      runHideAnimation();
    }
    if (!hidden) {
      runShowAnimation();
    }
    return clearAllTimeouts;
  }, [hidden]);
  return !inDOM ? null : /*#__PURE__*/_react.default.createElement("div", {
    "data-test": dataTest,
    onMouseEnter: pauseDisplayTimeout,
    onMouseLeave: resumeDisplayTimeout,
    className: `jsx-${_alertBarStyles.default.__hash}` + " " + ((0, _classnames.default)(className, {
      info,
      success,
      warning,
      critical,
      inViewport
    }) || "")
  }, /*#__PURE__*/_react.default.createElement(_icon.Icon, {
    dataTest: `${dataTest}-icon`,
    icon: icon,
    critical: critical,
    success: success,
    warning: warning,
    info: info
  }), /*#__PURE__*/_react.default.createElement(_message.Message, null, children), /*#__PURE__*/_react.default.createElement(_actions.Actions, {
    actions: actions,
    hide: runHideAnimation,
    dataTest: dataTest
  }), /*#__PURE__*/_react.default.createElement(_dismiss.Dismiss, {
    onClick: runHideAnimation,
    dataTest: `${dataTest}-dismiss`
  }), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _alertBarStyles.default.__hash
  }, _alertBarStyles.default));
};
exports.AlertBar = AlertBar;
const alertTypePropType = (0, _propTypes.mutuallyExclusive)(['success', 'warning', 'critical'], _propTypes2.default.bool);
AlertBar.propTypes = {
  /** An array of 0-2 action objects 
  `[{label: "Save", onClick: clickHandler}]`*/
  actions: _actions.actionsPropType,
  /** The message string for the alert */
  children: _propTypes2.default.string,
  className: _propTypes2.default.string,
  /** Alert bars with `critical` will not autohide */
  critical: alertTypePropType,
  dataTest: _propTypes2.default.string,
  /** How long you want the notification to display, in `ms`, when it's not permanent */
  duration: _propTypes2.default.number,
  /** AlertBar will be hidden on creation when this is set to true */
  hidden: _propTypes2.default.bool,
  /**
   * A specific icon to override the default icon in the bar.
   * If `false` is provided, no icon will be shown.
   */
  icon: _icon.iconPropType,
  /** When set, AlertBar will not autohide */
  permanent: _propTypes2.default.bool,
  success: alertTypePropType,
  /** Alert bars with `warning` will not autohide */
  warning: alertTypePropType,
  onHidden: _propTypes2.default.func
};