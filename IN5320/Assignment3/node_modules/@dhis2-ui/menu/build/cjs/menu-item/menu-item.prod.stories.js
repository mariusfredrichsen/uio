"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleMenuItem = exports.SuffixAndChevron = exports.Suffix = exports.SubMenus = exports.RTLSuffixAndChevron = exports.OnClick = exports.Link = exports.Icon = exports.Disabled = exports.Destructive = exports.Dense = exports.Default = exports.Chevron = exports.Active = void 0;
var _ui = require("@dhis2/ui");
var _uiConstants = require("@dhis2/ui-constants");
var _uiIcons = require("@dhis2/ui-icons");
var _react = _interopRequireWildcard(require("react"));
var _index = require("../index.js");
var _menuItem = require("./menu-item.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const description = `
Menu Items are intended to be children of Menu and Flyout Menu components. They can be nested to create submenus.

Splitting menus into several levels with child menus makes sense when there are a lot of options that can be grouped together. An example may be an option in level 1 menu of 'Download' that has several different download formats as child menu items. Make sure that child menu items relate to their parent item, otherwise a user will struggle to discover them. A menu item with children is not selectable/actionable itself, it serves only as a container for the child elements. Try to keep menus to a maximum of 1, 2 or 3 levels, anything more than this can easily confuse the user.

There is no enforced ordering of menu items, they should be presented in order of relevance. Put the most commonly used items at the top of the menu for easy discovery and access.

See the [design system](https://github.com/dhis2/design-system/blob/master/molecules/menu.md) for more information about menus.

\`\`\`js
import { MenuItem } from '@dhis2/ui'
\`\`\`
`;
var _default = exports.default = {
  title: 'Menu Item',
  component: _menuItem.MenuItem,
  args: {
    label: 'Menu item'
  },
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_index.Menu, null, /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, args));
const Default = exports.Default = Template.bind({});
const Active = exports.Active = Template.bind({});
Active.args = {
  active: true
};
const Chevron = exports.Chevron = Template.bind({});
Chevron.args = {
  chevron: true
};
const Dense = exports.Dense = Template.bind({});
Dense.args = {
  dense: true
};
const Destructive = exports.Destructive = Template.bind({});
Destructive.args = {
  destructive: true
};
Destructive.parameters = {
  docs: {
    description: {
      story: "Destructive menu items should be used for critical, destructive actions such as 'Delete', 'Remove' or 'End process'. Do not use destructive menu items for actions that are simply important, they must also be destructive in nature. A menu should, ideally, only have one destructive action. Using a divider to separate normal and destructive options helps the user to understand that the destructive options is different from the rest of the options."
    }
  }
};
const Disabled = exports.Disabled = Template.bind({});
Disabled.args = {
  disabled: true
};
Disabled.parameters = {
  docs: {
    description: {
      story: 'Menu items should be disabled when they are not available, but could be available if something changes. Do not include menu items that will never be available, this will confuse a user. Instead, remove them from the menu.'
    }
  }
};
const Link = exports.Link = Template.bind({});
Link.args = {
  target: '_blank',
  href: 'http://dhis2.org'
};
const Icon = args => {
  // import { IconApps24 } from '@dhis2/ui'
  return /*#__PURE__*/_react.default.createElement(_index.Menu, null, /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, _extends({}, args, {
    icon: /*#__PURE__*/_react.default.createElement(_uiIcons.IconApps24, null),
    label: "Menu item"
  })), /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, {
    icon: /*#__PURE__*/_react.default.createElement(_uiIcons.IconApps24, {
      color: "magenta"
    }),
    label: "Menu item - with custom icon fill"
  }));
};
exports.Icon = Icon;
Icon.parameters = {
  docs: {
    source: {
      type: 'code'
    },
    description: {
      story: 'A menu item can include an icon to help the user understand or recognize the option. An icon should support the menu item text and be simple enough to be understood in a dense UI. Icons add a lot of visual noise a menu, so only include them where they will help the user. Do not include icons only for visual reasons, the icon must functionally support the users understanding. Do not use complex icons. All menu items in a single menu do not need to have icons.'
    }
  }
};
const Suffix = exports.Suffix = Template.bind({});
Suffix.args = {
  label: 'Open in Data Visualizer',
  icon: /*#__PURE__*/_react.default.createElement(_uiIcons.IconVisualizationColumn24, {
    color: _uiConstants.colors.grey600
  }),
  suffix: /*#__PURE__*/_react.default.createElement(_uiIcons.IconLaunch16, {
    color: _uiConstants.colors.grey600
  })
};
const SuffixAndChevron = exports.SuffixAndChevron = Template.bind({});
SuffixAndChevron.args = {
  label: 'Security notifications',
  chevron: true,
  suffix: /*#__PURE__*/_react.default.createElement(_ui.Tag, null, "3")
};
const OnClick = args => /*#__PURE__*/_react.default.createElement(_index.Menu, null, /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, _extends({
  onClick: (payload, event) => {
    console.log(payload.value, event.target);
  },
  value: "myValue",
  label: "Menu item"
}, args)));
exports.OnClick = OnClick;
OnClick.parameters = {
  docs: {
    source: {
      type: 'code'
    }
  }
};
OnClick.args = {
  onClick: console.log
};
const ToggleMenuItem = args => {
  const [on, setOn] = (0, _react.useState)(false);
  const toggleOn = () => setOn(!on);
  const checkMarkStyle = {
    fontSize: '24px',
    lineHeight: '24px'
  };
  const icon = on ? /*#__PURE__*/_react.default.createElement("span", {
    style: checkMarkStyle
  }, "\u2713") : /*#__PURE__*/_react.default.createElement("span", null);
  return /*#__PURE__*/_react.default.createElement(_index.Menu, null, /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, _extends({}, args, {
    onClick: toggleOn,
    icon: icon,
    label: "A toggle menu item",
    checkbox: true,
    checked: on
  })));
};
exports.ToggleMenuItem = ToggleMenuItem;
ToggleMenuItem.parameters = {
  docs: {
    source: {
      type: 'code'
    }
  }
};
const SubMenus = args => {
  const [showSubMenu, setShowSubMenu] = _react.default.useState(false);
  const toggleSubMenu = () => setShowSubMenu(!showSubMenu);
  return /*#__PURE__*/_react.default.createElement(_index.Menu, null, /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, _extends({
    showSubMenu: showSubMenu,
    toggleSubMenu: toggleSubMenu
  }, args, {
    label: "Parent of submenus"
  }), /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, {
    label: "Submenu child 1"
  }), /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, {
    label: "Submenu child 2"
  })), /*#__PURE__*/_react.default.createElement(_menuItem.MenuItem, _extends({}, args, {
    label: "Regular item"
  })));
};
exports.SubMenus = SubMenus;
SubMenus.parameters = {
  docs: {
    source: {
      type: 'code'
    },
    description: {
      story: "_View this story in the 'Canvas' tab for proper submenu alignment._"
    }
  }
};
const RTLSuffixAndChevron = args => /*#__PURE__*/_react.default.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/_react.default.createElement(Template, args));
exports.RTLSuffixAndChevron = RTLSuffixAndChevron;
RTLSuffixAndChevron.args = {
  label: 'Security notifications',
  chevron: true,
  suffix: /*#__PURE__*/_react.default.createElement(_ui.Tag, null, "3")
};