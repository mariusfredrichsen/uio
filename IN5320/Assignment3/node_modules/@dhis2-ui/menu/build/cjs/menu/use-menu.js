"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuNavigation = void 0;
var _react = require("react");
var _helpers = require("./helpers.js");
const useMenuNavigation = children => {
  const menuRef = (0, _react.useRef)(null);
  const [focusableItemsIndices, setFocusableItemsIndices] = (0, _react.useState)(null);
  const [activeItemIndex, setActiveItemIndex] = (0, _react.useState)(-1);

  // Initializes the indices for focusable items
  // focusable items have the role of menuitem || menuitemcheckbox || menuitemradio
  (0, _react.useEffect)(() => {
    if (menuRef) {
      const menuItems = Array.from(menuRef.current.children);
      const itemsIndices = (0, _helpers.getFocusableItemsIndices)(menuItems);
      setFocusableItemsIndices(itemsIndices);
    }
  }, [children]);

  // Focus the active menu child
  (0, _react.useEffect)(() => {
    if (menuRef) {
      if (focusableItemsIndices !== null && focusableItemsIndices !== void 0 && focusableItemsIndices.length && activeItemIndex > -1) {
        const currentIndex = focusableItemsIndices[activeItemIndex];
        menuRef.current.children[currentIndex].focus();
      }
    }
  }, [activeItemIndex, focusableItemsIndices]);

  // Navigate through focusable children using arrow keys
  // Trigger actionable items
  const handleKeyDown = (0, _react.useCallback)(event => {
    const totalFocusablePositions = focusableItemsIndices === null || focusableItemsIndices === void 0 ? void 0 : focusableItemsIndices.length;
    if (totalFocusablePositions) {
      const lastIndex = totalFocusablePositions - 1;
      switch (event.key) {
        case 'ArrowUp':
          event.preventDefault();
          setActiveItemIndex(activeItemIndex > 0 ? activeItemIndex - 1 : lastIndex);
          break;
        case 'ArrowDown':
          event.preventDefault();
          setActiveItemIndex(activeItemIndex >= lastIndex ? 0 : activeItemIndex + 1);
          break;
        case 'Enter':
        case ' ':
          if (event.target.nodeName === 'LI') {
            var _event$target$childre, _event$target$childre2;
            event.preventDefault();
            (_event$target$childre = event.target.children) === null || _event$target$childre === void 0 ? void 0 : (_event$target$childre2 = _event$target$childre[0]) === null || _event$target$childre2 === void 0 ? void 0 : _event$target$childre2.click();
          }
          break;
        default:
          break;
      }
    }
  }, [activeItemIndex, focusableItemsIndices === null || focusableItemsIndices === void 0 ? void 0 : focusableItemsIndices.length]);

  // Event listeners for menu focus and key handling
  (0, _react.useEffect)(() => {
    if (!menuRef) {
      return;
    }
    const menu = menuRef.current;

    // Focus the first menu item when the menu receives focus
    const handleFocus = event => {
      if (event.target === menuRef.current) {
        const firstItemIndex = focusableItemsIndices === null || focusableItemsIndices === void 0 ? void 0 : focusableItemsIndices[0];
        firstItemIndex && menuRef.current.children[firstItemIndex].focus();
        setActiveItemIndex(0);
      }
    };
    menu.addEventListener('focus', handleFocus);
    menu.addEventListener('keydown', handleKeyDown);
    return () => {
      menu.removeEventListener('focus', handleFocus);
      menu.removeEventListener('keydown', handleKeyDown);
    };
  }, [activeItemIndex, focusableItemsIndices, handleKeyDown]);
  return {
    menuRef,
    focusedIndex: focusableItemsIndices === null || focusableItemsIndices === void 0 ? void 0 : focusableItemsIndices[activeItemIndex]
  };
};
exports.useMenuNavigation = useMenuNavigation;