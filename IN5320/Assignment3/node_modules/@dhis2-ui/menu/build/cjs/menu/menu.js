"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menu = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _helpers = require("./helpers.js");
var _useMenu = require("./use-menu.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const Menu = _ref => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-menulist',
    dense
  } = _ref;
  const {
    menuRef,
    focusedIndex
  } = (0, _useMenu.useMenuNavigation)(children);
  const childrenToRender = (0, _react.useMemo)(() => _react.Children.map(children, (child, index) => {
    if (! /*#__PURE__*/(0, _react.isValidElement)(child)) {
      return child;
    }
    const tabIndex = index === focusedIndex ? 0 : -1;
    const childProps = {
      ...child.props
    };

    // this check is based on the type of child.
    // if it is a native HTML element, like li, a, span, only apply its child props
    // if it is a functional (React) component, it applies custom props, like dense, hideDivider, etc
    if (typeof child.type === 'string') {
      // if the native HTML element child is not li, then wrap it in an li tag
      // apply the tabindex prop if a child has the menuitem role to make it focusable
      if (child.type === 'li') {
        return (0, _helpers.hasMenuItemRole)(child.props.children[0]) ? /*#__PURE__*/(0, _react.cloneElement)(child, {
          ...childProps,
          tabIndex
        }) : /*#__PURE__*/(0, _react.cloneElement)(child, childProps);
      } else {
        return /*#__PURE__*/_react.default.createElement("li", {
          tabIndex: (0, _helpers.hasMenuItemRole)(child) ? tabIndex : null
        }, /*#__PURE__*/(0, _react.cloneElement)(child, childProps));
      }
    } else {
      childProps.dense = typeof child.props.dense === 'boolean' ? child.props.dense : dense;
      childProps.hideDivider = typeof child.props.hideDivider !== 'boolean' && index === 0 ? true : child.props.hideDivider;
      return /*#__PURE__*/(0, _react.cloneElement)(child, {
        ...childProps,
        tabIndex
      });
    }
  }), [children, dense, focusedIndex]);
  return /*#__PURE__*/_react.default.createElement("ul", {
    "data-test": dataTest,
    role: "menu",
    ref: menuRef,
    tabIndex: 0,
    className: "jsx-1636612837" + " " + (className || "")
  }, childrenToRender, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "1636612837"
  }, ["ul.jsx-1636612837{display:block;position:relative;width:100%;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]));
};
exports.Menu = Menu;
Menu.propTypes = {
  /** Typically `MenuItem`, `MenuDivider`, and `MenuSectionHeader` */
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  /** Applies `dense` property to all child components unless already specified */
  dense: _propTypes.default.bool
};