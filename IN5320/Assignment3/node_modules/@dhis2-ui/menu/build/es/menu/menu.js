import _JSXStyle from "styled-jsx/style";
import PropTypes from 'prop-types';
import React, { Children, cloneElement, isValidElement, useMemo } from 'react';
import { hasMenuItemRole } from './helpers.js';
import { useMenuNavigation } from './use-menu.js';
const Menu = _ref => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-menulist',
    dense
  } = _ref;
  const {
    menuRef,
    focusedIndex
  } = useMenuNavigation(children);
  const childrenToRender = useMemo(() => Children.map(children, (child, index) => {
    if (! /*#__PURE__*/isValidElement(child)) {
      return child;
    }
    const tabIndex = index === focusedIndex ? 0 : -1;
    const childProps = {
      ...child.props
    };

    // this check is based on the type of child.
    // if it is a native HTML element, like li, a, span, only apply its child props
    // if it is a functional (React) component, it applies custom props, like dense, hideDivider, etc
    if (typeof child.type === 'string') {
      // if the native HTML element child is not li, then wrap it in an li tag
      // apply the tabindex prop if a child has the menuitem role to make it focusable
      if (child.type === 'li') {
        return hasMenuItemRole(child.props.children[0]) ? /*#__PURE__*/cloneElement(child, {
          ...childProps,
          tabIndex
        }) : /*#__PURE__*/cloneElement(child, childProps);
      } else {
        return /*#__PURE__*/React.createElement("li", {
          tabIndex: hasMenuItemRole(child) ? tabIndex : null
        }, /*#__PURE__*/cloneElement(child, childProps));
      }
    } else {
      childProps.dense = typeof child.props.dense === 'boolean' ? child.props.dense : dense;
      childProps.hideDivider = typeof child.props.hideDivider !== 'boolean' && index === 0 ? true : child.props.hideDivider;
      return /*#__PURE__*/cloneElement(child, {
        ...childProps,
        tabIndex
      });
    }
  }), [children, dense, focusedIndex]);
  return /*#__PURE__*/React.createElement("ul", {
    "data-test": dataTest,
    role: "menu",
    ref: menuRef,
    tabIndex: 0,
    className: "jsx-1636612837" + " " + (className || "")
  }, childrenToRender, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1636612837"
  }, ["ul.jsx-1636612837{display:block;position:relative;width:100%;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]));
};
Menu.propTypes = {
  /** Typically `MenuItem`, `MenuDivider`, and `MenuSectionHeader` */
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  /** Applies `dense` property to all child components unless already specified */
  dense: PropTypes.bool
};
export { Menu };