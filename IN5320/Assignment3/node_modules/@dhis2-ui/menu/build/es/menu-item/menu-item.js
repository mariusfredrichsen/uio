import _JSXStyle from "styled-jsx/style";
import { IconChevronRight24 } from '@dhis2/ui-icons';
import { Popper } from '@dhis2-ui/popper';
import { Portal } from '@dhis2-ui/portal';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useEffect, useRef, useState } from 'react';
import { FlyoutMenu } from '../flyout-menu/index.js';
import styles from './menu-item.styles.js';
const isModifiedEvent = evt => evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey;
const createOnClickHandler = _ref => {
  let {
    onClick,
    toggleSubMenu,
    isLink,
    value
  } = _ref;
  return evt => {
    if (isLink && isModifiedEvent(evt) || !(onClick || toggleSubMenu)) {
      return;
    }
    evt.preventDefault();
    evt.stopPropagation();
    onClick && onClick({
      value
    }, evt);
    toggleSubMenu && toggleSubMenu();
  };
};
const MenuItem = _ref2 => {
  let {
    href,
    onClick,
    children,
    target,
    icon,
    className,
    destructive,
    disabled,
    dense,
    active,
    dataTest = 'dhis2-uicore-menuitem',
    chevron,
    value,
    label,
    showSubMenu,
    toggleSubMenu,
    suffix,
    checkbox,
    checked,
    tabIndex
  } = _ref2;
  const menuItemRef = useRef();
  const [openSubMenus, setOpenSubMenus] = useState([]);
  useEffect(() => {
    // track open submenus
    setOpenSubMenus(document.querySelectorAll('[data-submenu-open=true]'));
  }, []);
  useEffect(() => {
    if (!menuItemRef.current) {
      return;
    }
    const menuItem = menuItemRef.current;
    const handleKeyDown = event => {
      var _openSubMenus, _openSubMenus2;
      const firstChild = event.target.children[0];
      const hasSubMenu = firstChild === null || firstChild === void 0 ? void 0 : firstChild.getAttribute('aria-haspopup');
      switch (event.key) {
        // for submenus
        case 'ArrowRight':
          event.preventDefault();
          if (hasSubMenu) {
            firstChild.click();
          }
          break;
        case 'ArrowLeft':
        case 'Escape':
          // close flyout menu
          event.preventDefault();
          (_openSubMenus = openSubMenus[openSubMenus.length - 1]) === null || _openSubMenus === void 0 ? void 0 : _openSubMenus.focus();
          (_openSubMenus2 = openSubMenus[openSubMenus.length - 1]) === null || _openSubMenus2 === void 0 ? void 0 : _openSubMenus2.children[0].click();
          break;
      }
    };
    menuItem.addEventListener('keydown', handleKeyDown);
    return () => {
      menuItem.removeEventListener('keydown', handleKeyDown);
    };
  }, [openSubMenus]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("li", {
    ref: menuItemRef,
    "data-test": dataTest,
    role: "presentation",
    tabIndex: tabIndex,
    "data-submenu-open": children && showSubMenu,
    className: `jsx-${styles.__hash}` + " " + (cx(className, {
      destructive,
      disabled,
      dense,
      active: active || showSubMenu || tabIndex === 0,
      'with-chevron': children || chevron
    }) || "")
  }, /*#__PURE__*/React.createElement("a", {
    target: target,
    href: !disabled && href ? href : undefined,
    onClick: !disabled ? createOnClickHandler({
      onClick,
      toggleSubMenu,
      isLink: !!href,
      value
    }) : undefined,
    role: checkbox ? 'menuitemcheckbox' : 'menuitem',
    "aria-checked": checkbox ? checked : null,
    "aria-disabled": disabled,
    "aria-haspopup": children && 'menu',
    "aria-expanded": showSubMenu,
    "aria-label": label,
    className: `jsx-${styles.__hash}`
  }, icon && /*#__PURE__*/React.createElement("span", {
    className: `jsx-${styles.__hash}` + " " + "icon"
  }, icon), /*#__PURE__*/React.createElement("span", {
    className: `jsx-${styles.__hash}` + " " + "label"
  }, label), suffix && /*#__PURE__*/React.createElement("span", {
    className: `jsx-${styles.__hash}` + " " + "suffix"
  }, suffix), (chevron || children) && /*#__PURE__*/React.createElement("span", {
    className: `jsx-${styles.__hash}` + " " + "chevron"
  }, /*#__PURE__*/React.createElement(IconChevronRight24, null))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles)), children && showSubMenu && /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Popper, {
    placement: "right-start",
    reference: menuItemRef
  }, /*#__PURE__*/React.createElement(FlyoutMenu, {
    dense: dense
  }, children))));
};
MenuItem.propTypes = {
  active: PropTypes.bool,
  checkbox: PropTypes.bool,
  checked: PropTypes.bool,
  chevron: PropTypes.bool,
  /**
   * Nested menu items can become submenus.
   * See `showSubMenu` and `toggleSubMenu` props, and 'Children' demo
   */
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  dense: PropTypes.bool,
  destructive: PropTypes.bool,
  disabled: PropTypes.bool,
  /** For using menu item as a link */
  href: PropTypes.string,
  /** An icon for the left side of the menu item */
  icon: PropTypes.node,
  /** Text in the menu item */
  label: PropTypes.node,
  /** When true, nested menu items are shown in a Popper */
  showSubMenu: PropTypes.bool,
  /** A supporting element shown at the end of the menu item */
  suffix: PropTypes.node,
  tabIndex: PropTypes.number,
  /** For using menu item as a link */
  target: PropTypes.string,
  /** On click, this function is called (without args) */
  toggleSubMenu: PropTypes.func,
  /** Value associated with item. Passed as an argument to onClick handler. */
  value: PropTypes.string,
  /** Click handler called with signature `({ value: string }, event)` */
  onClick: PropTypes.func
};
export { MenuItem };