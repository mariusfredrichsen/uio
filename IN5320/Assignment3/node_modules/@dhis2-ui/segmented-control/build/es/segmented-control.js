import _JSXStyle from "styled-jsx/style";
import { colors, elevations, spacers, theme } from '@dhis2/ui-constants';
import cx from 'classnames';
import { PropTypes } from 'prop-types';
import React from 'react';

/**
A segmented control is used to select between options that relate to another
area of content. All of the options in a segmented control should be closely related.

Do not use a segmented control as a standalone selection, it should always be
used as a selector for other content. For example, do not use a segmented
control in place of radio buttons when making a single, standalone choice.

See specification: [Design System](https://github.com/dhis2/design-system/blob/master/molecules/segmented-control.md)

```js
import { SegmentedControl } from '@dhis2/ui'
```
*/

export const SegmentedControl = _ref => {
  let {
    options,
    selected,
    onChange,
    ariaLabel
  } = _ref;
  if (!options.map(_ref2 => {
    let {
      value
    } = _ref2;
    return value;
  }).includes(selected)) {
    const message = `There is no option with the value: "${selected}". ` + 'Make sure that the value passed to the selected ' + 'prop matches the value of an existing option.';
    throw new Error(message);
  }
  return /*#__PURE__*/React.createElement("ul", {
    "aria-label": ariaLabel,
    className: _JSXStyle.dynamic([["3664972916", [colors.grey300, colors.grey700, spacers.dp12, theme.focus, colors.grey400, colors.grey900, elevations.e100, colors.white, colors.grey900]]]) + " " + "segmented-control"
  }, options.map(_ref3 => {
    let {
      label,
      value,
      disabled
    } = _ref3;
    return /*#__PURE__*/React.createElement("li", {
      key: `option-${value}`,
      className: _JSXStyle.dynamic([["3664972916", [colors.grey300, colors.grey700, spacers.dp12, theme.focus, colors.grey400, colors.grey900, elevations.e100, colors.white, colors.grey900]]])
    }, /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: e => onChange({
        value
      }, e),
      disabled: disabled,
      className: _JSXStyle.dynamic([["3664972916", [colors.grey300, colors.grey700, spacers.dp12, theme.focus, colors.grey400, colors.grey900, elevations.e100, colors.white, colors.grey900]]]) + " " + (cx('segment', {
        selected: value === selected,
        disabled
      }) || "")
    }, label));
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3664972916",
    dynamic: [colors.grey300, colors.grey700, spacers.dp12, theme.focus, colors.grey400, colors.grey900, elevations.e100, colors.white, colors.grey900]
  }, [`.segmented-control.__jsx-style-dynamic-selector{all:unset;list-style:none;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:stretch;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;background:${colors.grey300};border-radius:5px;padding:2px;}`, `.segment.__jsx-style-dynamic-selector{all:unset;box-sizing:border-box;cursor:pointer;font-size:14px;text-align:center;border-radius:5px;background:transparent;color:${colors.grey700};min-width:72px;max-width:320px;height:100%;padding:6px ${spacers.dp12};}`, `.segment.__jsx-style-dynamic-selector:focus{outline:3px solid ${theme.focus};outline-offset:-3px;}`, ".segment.__jsx-style-dynamic-selector:focus.__jsx-style-dynamic-selector:not(:focus-visible){outline:none;}", `.segment.__jsx-style-dynamic-selector:not(.selected):not(.disabled):hover{background:${colors.grey400};color:${colors.grey900};}`, `.segment.selected.__jsx-style-dynamic-selector{cursor:default;box-shadow:${elevations.e100};background:${colors.white};color:${colors.grey900};}`, ".segment.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;opacity:0.5;}"]));
};
SegmentedControl.propTypes = {
  /** Options to populate the segmented control */
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    disabled: PropTypes.bool
  })).isRequired,
  /** An option to select; should match the `value` property of the option to be selected */
  selected: PropTypes.string.isRequired,
  /** Called with the signature `({ value: string }, event)` */
  onChange: PropTypes.func.isRequired,
  /** Used to provide an accessible label to a segmented control without a visible label */
  ariaLabel: PropTypes.string
};