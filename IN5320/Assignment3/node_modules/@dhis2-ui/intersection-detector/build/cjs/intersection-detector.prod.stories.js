"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BottomArea = exports.AbsoluteTopArea = exports.AbsoluteBottomArea = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _intersectionDetector = require("./intersection-detector.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const description = `
A tool to performantly detect when two components intersect, which is often better to use than scroll listeners. A common use case is to detect when a child component is in view inside a scrolling parent. Uses an [\`IntersectionObserver\`](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) object internally.

See the code examples below for examples on how to implement it.

\`\`\`js
import { IntersectionDetector } from '@dhis2/ui'
\`\`\`
`;
var _default = exports.default = {
  title: 'Intersection Observer',
  component: _intersectionDetector.IntersectionDetector,
  parameters: {
    docs: {
      description: {
        component: description
      },
      source: {
        type: 'code'
      }
    }
  },
  // Hide 'container styles' from Template in args table
  argTypes: {
    containerStyles: {
      table: {
        disable: true
      }
    }
  }
};
const Text = () => /*#__PURE__*/_react.default.createElement("p", {
  className: "jsx-3862390236"
}, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tempor venenatis hendrerit. Donec dictum sed ligula id efficitur. Suspendisse feugiat, elit in dictum imperdiet, mi tellus euismod nibh, vitae hendrerit turpis odio ut mauris. Vestibulum rhoncus interdum nunc eu eleifend. Aenean viverra nibh hendrerit nulla iaculis, vitae tincidunt erat ullamcorper. Donec tempus mattis faucibus. Donec nec lacus vitae elit aliquet pharetra. Cras vitae odio eu lorem euismod malesuada. Nunc eu rhoncus mauris. Nullam vehicula elit id vehicula maximus. Phasellus gravida tincidunt mauris, vitae laoreet erat commodo id. Nullam vitae erat ante. Proin id ultricies risus, in ultricies mauris. Vivamus lectus enim, ultricies vel egestas nec, tempor a magna. Nam sed fermentum ipsum, a ullamcorper felis. Aenean finibus erat elit, at eleifend nulla rutrum at.", /*#__PURE__*/_react.default.createElement(_style.default, {
  id: "3862390236"
}, ["p.jsx-3862390236{margin:0;}"]));
const Template = _ref => {
  let {
    containerStyles,
    ...args
  } = _ref;
  const rootRef = (0, _react.useRef)();
  const [isIntersecting, setIsIntersecting] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "jsx-2697878418" + " " + "container"
  }, /*#__PURE__*/_react.default.createElement("p", {
    className: "jsx-2697878418"
  }, "Is intersecting: ", ` ${isIntersecting}`), /*#__PURE__*/_react.default.createElement("div", {
    ref: rootRef,
    className: "jsx-2697878418" + " " + "scrollContainer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "jsx-2697878418" + " " + "contentContainer"
  }, /*#__PURE__*/_react.default.createElement(Text, null), /*#__PURE__*/_react.default.createElement("div", {
    style: containerStyles,
    className: "jsx-2697878418"
  }, /*#__PURE__*/_react.default.createElement(_intersectionDetector.IntersectionDetector, _extends({}, args, {
    onChange: _ref2 => {
      let {
        isIntersecting
      } = _ref2;
      return setIsIntersecting(isIntersecting);
    },
    rootRef: rootRef
  }))))), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2697878418"
  }, [".scrollContainer.jsx-2697878418{width:200px;height:300px;overflow:hidden;overflow-y:auto;}", ".contentContainer.jsx-2697878418{position:relative;}"]));
};
Template.propTypes = {
  containerStyles: _propTypes.default.shape({})
};
const boxStyles = {
  boxSizing: 'border-box',
  border: '1px solid #f76a8c',
  background: 'rgba(246,172,200,0.4)',
  width: '100%',
  height: '100px'
};
const AbsoluteBottomArea = exports.AbsoluteBottomArea = Template.bind({});
AbsoluteBottomArea.args = {
  containerStyles: {
    ...boxStyles,
    position: 'absolute',
    bottom: '0',
    left: '0'
  }
};
const AbsoluteTopArea = exports.AbsoluteTopArea = Template.bind({});
AbsoluteTopArea.args = {
  containerStyles: {
    ...boxStyles,
    position: 'absolute',
    top: '0',
    left: '0'
  }
};
const BottomArea = exports.BottomArea = Template.bind({});
BottomArea.args = {
  containerStyles: {
    ...boxStyles
  }
};