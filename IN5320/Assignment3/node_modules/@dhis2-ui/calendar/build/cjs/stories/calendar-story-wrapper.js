"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarStoryWrapper = void 0;
var _multiCalendarDates = require("@dhis2/multi-calendar-dates");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _calendar = require("../calendar/calendar.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const {
  calendars,
  numberingSystems
} = _multiCalendarDates.constants;
const CalendarStoryWrapper = props => {
  var _selectedDate$calenda;
  const {
    calendar = 'gregory',
    locale,
    timeZone,
    dir,
    component: Component = _calendar.Calendar,
    date,
    weekDayFormat = 'narrow'
  } = props;
  const [selectedCalendar, setSelectedCalendar] = (0, _react.useState)(calendar);
  const [selectedNumberingSystem, setSelectedNumberingSystem] = (0, _react.useState)();
  const [selectedDirection, setSelectedDirection] = (0, _react.useState)(dir);
  const [selectedWeekFormat, setWeekDayFormat] = (0, _react.useState)(weekDayFormat);
  const [selectedLocale, setLocale] = (0, _react.useState)(locale);
  const [selectedDate, setSelectedDate] = (0, _react.useState)({
    calendarDateString: date
  });
  const changeCalendar = _ref => {
    let {
      target: {
        value
      }
    } = _ref;
    setSelectedCalendar(value);
  };
  const changeNumberingSystem = _ref2 => {
    let {
      target: {
        value
      }
    } = _ref2;
    if (value === '-1') {
      setSelectedNumberingSystem(null);
    } else {
      setSelectedNumberingSystem(value);
    }
  };
  const changeDirection = _ref3 => {
    let {
      target: {
        value
      }
    } = _ref3;
    setSelectedDirection(value);
  };
  const changeWeekFormat = _ref4 => {
    let {
      target: {
        value
      }
    } = _ref4;
    setWeekDayFormat(value);
  };
  const onLocaleChanged = _ref5 => {
    let {
      target: {
        value
      }
    } = _ref5;
    setLocale(value);
  };
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      fontSize: '0.8em',
      marginBottom: 20,
      gap: 5,
      display: 'flex',
      alignItems: 'center'
    }
  }, /*#__PURE__*/_react.default.createElement("div", null, "Options"), /*#__PURE__*/_react.default.createElement("input", {
    defaultValue: locale,
    placeholder: "locale",
    onBlur: onLocaleChanged
  }), /*#__PURE__*/_react.default.createElement("select", {
    onChange: changeCalendar,
    value: selectedCalendar
  }, /*#__PURE__*/_react.default.createElement("option", {
    disabled: true,
    key: calendar,
    value: "-1"
  }, "Select calendar"), calendars.map(calendar => {
    return /*#__PURE__*/_react.default.createElement("option", {
      value: calendar,
      key: calendar
    }, calendar);
  })), /*#__PURE__*/_react.default.createElement("select", {
    onChange: changeNumberingSystem,
    value: selectedNumberingSystem
  }, /*#__PURE__*/_react.default.createElement("option", {
    disabled: true,
    key: calendar,
    value: "-1"
  }, "Select numbering system"), numberingSystems.map(system => {
    return /*#__PURE__*/_react.default.createElement("option", {
      value: system,
      key: system
    }, system);
  })), /*#__PURE__*/_react.default.createElement("select", {
    onChange: changeDirection,
    value: selectedDirection
  }, /*#__PURE__*/_react.default.createElement("option", {
    disabled: true,
    value: "-1"
  }, "Select direction"), /*#__PURE__*/_react.default.createElement("option", {
    value: "ltr"
  }, "Left-To-Right"), /*#__PURE__*/_react.default.createElement("option", {
    value: "rtl"
  }, "Right-To-Left")), /*#__PURE__*/_react.default.createElement("select", {
    onChange: changeWeekFormat,
    value: selectedWeekFormat
  }, /*#__PURE__*/_react.default.createElement("option", {
    disabled: true,
    value: "-1"
  }, "Select format"), /*#__PURE__*/_react.default.createElement("option", {
    value: "narrow"
  }, "narrow"), /*#__PURE__*/_react.default.createElement("option", {
    value: "short"
  }, "short"), /*#__PURE__*/_react.default.createElement("option", {
    value: "long"
  }, "long"))), /*#__PURE__*/_react.default.createElement(Component, _extends({}, props, {
    calendar: selectedCalendar,
    dir: selectedDirection,
    locale: selectedLocale,
    date: selectedDate.calendarDateString,
    onDateSelect: date => {
      setSelectedDate(date);
    },
    timeZone: timeZone,
    weekDayFormat: selectedWeekFormat,
    numberingSystem: selectedNumberingSystem
  })), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: 10,
      gap: 5,
      fontSize: '12px',
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/_react.default.createElement("div", null, selectedDate && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, "calendar date: "), /*#__PURE__*/_react.default.createElement("span", {
    "data-test": "storybook-calendar-result"
  }, selectedDate.calendarDateString)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, "iso date: "), /*#__PURE__*/_react.default.createElement("span", {
    "data-test": "storybook-calendar-result-iso"
  }, (_selectedDate$calenda = selectedDate.calendarDate) === null || _selectedDate$calenda === void 0 ? void 0 : _selectedDate$calenda.withCalendar('iso8601').toLocaleString('en-GB', {
    dateStyle: 'long'
  }))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, "callback:"), JSON.stringify(selectedDate, null, 2))))));
};
exports.CalendarStoryWrapper = CalendarStoryWrapper;
CalendarStoryWrapper.propTypes = {
  calendar: _propTypes.default.string.isRequired,
  component: _propTypes.default.elementType.isRequired,
  date: _propTypes.default.string,
  dir: _propTypes.default.oneOf(['ltr', 'rtl']),
  locale: _propTypes.default.string,
  timeZone: _propTypes.default.string,
  weekDayFormat: _propTypes.default.string
};