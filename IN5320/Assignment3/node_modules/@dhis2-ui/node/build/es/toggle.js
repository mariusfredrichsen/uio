import _JSXStyle from "styled-jsx/style";
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
const ArrowDown = () => /*#__PURE__*/React.createElement("div", {
  className: "nodeArrow"
}, /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  className: "jsx-4098137027"
}, /*#__PURE__*/React.createElement("path", {
  d: "M15.7041 10.3329L12.1495 14.3318C12.0699 14.4213 11.9301 14.4213 11.8505 14.3318L8.29589 10.3329C8.18124 10.2039 8.2728 10 8.44537 10H15.5546C15.7272 10 15.8188 10.2039 15.7041 10.3329Z",
  className: "jsx-4098137027"
}), /*#__PURE__*/React.createElement(_JSXStyle, {
  id: "4098137027"
}, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"])));
export const Toggle = _ref => {
  let {
    open,
    onOpen,
    onClose,
    dataTest
  } = _ref;
  const onClick = open ? onClose : onOpen;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    onClick: event => onClick && onClick({
      open: !open
    }, event),
    className: _JSXStyle.dynamic([["375729792", [colors.grey400, colors.grey900, colors.grey100]]]) + " " + (cx({
      open
    }) || "")
  }, /*#__PURE__*/React.createElement("span", {
    className: _JSXStyle.dynamic([["375729792", [colors.grey400, colors.grey900, colors.grey100]]])
  }, /*#__PURE__*/React.createElement(ArrowDown, null)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "375729792",
    dynamic: [colors.grey400, colors.grey900, colors.grey100]
  }, ["div.__jsx-style-dynamic-selector{width:24px;position:relative;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", `div.__jsx-style-dynamic-selector:after{background:${colors.grey400};height:calc(100% - 24px);inset-inline-start:12px;position:absolute;top:15px;width:1px;z-index:1;}`, ".open.__jsx-style-dynamic-selector:after{content:'';}", `span.__jsx-style-dynamic-selector{display:block;position:relative;z-index:2;fill:${colors.grey900};}`, "div.__jsx-style-dynamic-selector .nodeArrow{vertical-align:top;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);transform:rotate(-90deg);-webkit-transition:-webkit-transform 0.1s ease-out;-webkit-transition:transform 0.1s ease-out;transition:transform 0.1s ease-out;}", "div.__jsx-style-dynamic-selector .nodeArrow:dir(rtl){-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg);}", ".open.__jsx-style-dynamic-selector .nodeArrow{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}", ".open.__jsx-style-dynamic-selector .nodeArrow:dir(rtl){-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}", `div.__jsx-style-dynamic-selector:hover{cursor:pointer;border-radius:3px;background:${colors.grey100};}`, "div.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector:after{background:#bcc8d4;}"]));
};
Toggle.propTypes = {
  dataTest: PropTypes.string.isRequired,
  open: PropTypes.bool,
  onClose: PropTypes.func,
  onOpen: PropTypes.func
};