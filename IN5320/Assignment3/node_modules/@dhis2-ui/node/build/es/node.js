import _JSXStyle from "styled-jsx/style";
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { Leaves } from './leaves.js';
import { Spacer } from './spacer.js';
import { Toggle } from './toggle.js';
export const Node = _ref => {
  let {
    open,
    className,
    component: label,
    children,
    icon,
    onOpen,
    onClose,
    dataTest = 'dhis2-uicore-node'
  } = _ref;
  const hasLeaves = !!React.Children.toArray(children).filter(i => i).length;
  const showArrow = !icon && hasLeaves;
  const showSpacer = !icon && !hasLeaves;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    className: "jsx-1433072554" + " " + (cx('node', className) || "")
  }, icon && /*#__PURE__*/React.createElement("div", {
    "data-test": `${dataTest}-icon`,
    className: "jsx-1433072554"
  }, icon), showArrow && /*#__PURE__*/React.createElement(Toggle, {
    open: open,
    onOpen: onOpen,
    onClose: onClose,
    dataTest: `${dataTest}-toggle`
  }), showSpacer && /*#__PURE__*/React.createElement(Spacer, null), /*#__PURE__*/React.createElement("div", {
    "data-test": `${dataTest}-content`,
    className: "jsx-1433072554"
  }, /*#__PURE__*/React.createElement("div", {
    "data-test": `${dataTest}-label`,
    className: "jsx-1433072554"
  }, label), /*#__PURE__*/React.createElement(Leaves, {
    open: open,
    dataTest: `${dataTest}-leaves`
  }, children)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1433072554"
  }, [".node.jsx-1433072554{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}"]));
};
Node.propTypes = {
  /** Content below this level of the hierarchy; children are revealed when this leaf is 'open' */
  children: PropTypes.node,
  className: PropTypes.string,
  /** Content/label for this leaf, for example a checkbox */
  component: PropTypes.element,
  dataTest: PropTypes.string,
  /** A custom icon to use instead of a toggle arrow */
  icon: PropTypes.node,
  open: PropTypes.bool,
  onClose: PropTypes.func,
  onOpen: PropTypes.func
};