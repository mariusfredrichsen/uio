"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithOnBackdropClick = exports.WithCenteredContentCircularLoader = exports.Translucent = exports.Default = void 0;
var _center = require("@dhis2-ui/center");
var _loader = require("@dhis2-ui/loader");
var _react = _interopRequireDefault(require("react"));
var _layer = require("./layer.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const description = `
Layers are used for creating different levels of stacking of interface elements.
See more about stacking guidelines at the [design system](https://github.com/dhis2/design-system/blob/master/principles/layout.md#stacking).

Layers are used in Modals, Popovers, and Alerts.

\`\`\`js
import { Layer } from '@dhis2/ui'
\`\`\`

_**Note:** These demos may take some time to load._
`;
var _default = exports.default = {
  title: 'Layer',
  component: _layer.Layer,
  /**
   * `inlineStories: false` renders these layers in iframes instead of inline.
   * This fixes an issue where all the layers on the docs page render on top
   * of eachother, each covering the whole screen.
   * There is a performance tradeof, and they are slow to load.
   */
  parameters: {
    docs: {
      inlineStories: false,
      iframeHeight: '180px',
      description: {
        component: description
      }
    }
  },
  // Handle weird treatment of non-literal defaultProps (see Transfer.stories)
  args: {
    position: 'fixed',
    dataTest: 'dhis2-uicore-layer',
    level: 'auto'
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_layer.Layer, args), /*#__PURE__*/_react.default.createElement("h1", null, "Text behind the layer"), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum"));
const Default = exports.Default = Template.bind({});
const Translucent = exports.Translucent = Template.bind({});
Translucent.args = {
  translucent: true
};
const WithOnBackdropClick = exports.WithOnBackdropClick = Template.bind({});
WithOnBackdropClick.args = {
  onBackdropClick: () => alert('layer backdrop was clicked')
};
const WithCenteredContentCircularLoader = exports.WithCenteredContentCircularLoader = Template.bind({});
WithCenteredContentCircularLoader.args = {
  children: /*#__PURE__*/_react.default.createElement(_center.Center, null, /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, null))
};