"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WarningDense = exports.Warning = exports.ValidDense = exports.Valid = exports.RTL = exports.NoLabel = exports.ImageLabelDense = exports.ImageLabel = exports.FocusedUncheckedDense = exports.FocusedUnchecked = exports.FocusedCheckedDense = exports.FocusedChecked = exports.ErrorDense = exports.Error = exports.DisabledDense = exports.Disabled = exports.DefaultDense = exports.Default = exports.CheckedDense = exports.Checked = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _radio = require("./radio.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const subtitle = `A control that allows a user to select a single option from a choice of several`;
const description = `
Radio buttons are used where a user has the choice of several options but must select only one. Radio buttons should be used where the user has to make a choice, there is no 'off' or 'none' state unless explicitly defined. Radio buttons should be used when there are 5 or less options available. With more than five, a dropdown/Select menu should be used instead.

Do not use a radio button if only a single option is available; use a Checkbox here instead.

If there are many options that need to select from, consider using a Select instead.

#### Size

Radio buttons are available in Regular and Dense sizes. Regular size is usually used in forms and whenever radio buttons are used standalone. Dense size radio buttons are used inside other complex components, not as main elements of a UI.

#### See more

Learn more about Radio buttons at [Design System: Radio](https://github.com/dhis2/design-system/blob/master/atoms/radio.md).

\`\`\`js
import { Radio } from '@dhis2/ui'
\`\`\`
`;
window.onChange = (payload, event) => {
  console.log('onChange payload', payload);
  console.log('onChange event', event);
};
window.onFocus = (payload, event) => {
  console.log('onFocus payload', payload);
  console.log('onFocus event', event);
};
window.onBlur = (payload, event) => {
  console.log('onBlur payload', payload);
  console.log('onBlur event', event);
};
const onChange = function () {
  return window.onChange(...arguments);
};
const onFocus = function () {
  return window.onFocus(...arguments);
};
const onBlur = function () {
  return window.onBlur(...arguments);
};
var _default = exports.default = {
  title: 'Radio',
  component: _radio.Radio,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  },
  // Default args for all stories
  args: {
    name: 'Ex',
    label: 'Radio',
    value: 'default',
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur
  },
  argTypes: {
    valid: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: {
      ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_radio.Radio, args);
const CheckedUncheckedTemplate = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_radio.Radio, args), /*#__PURE__*/_react.default.createElement(_radio.Radio, _extends({}, args, {
  checked: true
})));
const Default = exports.Default = Template.bind({});
const FocusedUnchecked = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_radio.Radio, _extends({}, args, {
  initialFocus: true,
  className: "initially-focused"
})), /*#__PURE__*/_react.default.createElement(_radio.Radio, _extends({}, args, {
  className: "initially-unfocused"
})));
// Stories with initial focus are distracting on docs page
exports.FocusedUnchecked = FocusedUnchecked;
FocusedUnchecked.parameters = {
  docs: {
    disable: true
  }
};
const FocusedChecked = exports.FocusedChecked = FocusedUnchecked.bind({});
FocusedChecked.args = {
  checked: true
};
FocusedChecked.parameters = {
  docs: {
    disable: true
  }
};
const Checked = exports.Checked = Template.bind({});
Checked.args = {
  checked: true,
  value: 'checked'
};
const Disabled = exports.Disabled = CheckedUncheckedTemplate.bind({});
Disabled.args = {
  disabled: true,
  value: 'disabled'
};
const Valid = exports.Valid = CheckedUncheckedTemplate.bind({});
Valid.args = {
  valid: true,
  value: 'valid'
};
const Warning = exports.Warning = CheckedUncheckedTemplate.bind({});
Warning.args = {
  warning: true,
  value: 'warning'
};
const Error = exports.Error = CheckedUncheckedTemplate.bind({});
Error.args = {
  error: true,
  value: 'error'
};
const ImageLabel = exports.ImageLabel = Template.bind({});
ImageLabel.args = {
  label: /*#__PURE__*/_react.default.createElement("img", {
    src: "https://picsum.photos/id/82/200/100"
  }),
  value: 'with-help'
};
const DefaultDense = exports.DefaultDense = Template.bind({});
DefaultDense.args = {
  dense: true
};
DefaultDense.storyName = 'Default - Dense';
const FocusedUncheckedDense = exports.FocusedUncheckedDense = FocusedUnchecked.bind({});
FocusedUncheckedDense.args = {
  ...DefaultDense.args
};
FocusedUncheckedDense.storyName = 'Focused unchecked - Dense';
FocusedUncheckedDense.parameters = {
  docs: {
    disable: true
  }
};
const FocusedCheckedDense = exports.FocusedCheckedDense = FocusedUnchecked.bind({});
FocusedCheckedDense.args = {
  ...DefaultDense.args,
  checked: true
};
FocusedCheckedDense.storyName = 'Focused checked - Dense';
FocusedCheckedDense.parameters = {
  docs: {
    disable: true
  }
};
const CheckedDense = exports.CheckedDense = Template.bind({});
CheckedDense.args = {
  ...Checked.args,
  ...DefaultDense.args
};
CheckedDense.storyName = 'Checked - Dense';
const DisabledDense = exports.DisabledDense = CheckedUncheckedTemplate.bind({});
DisabledDense.args = {
  ...Disabled.args,
  ...DefaultDense.args
};
DisabledDense.storyName = 'Disabled - Dense';
const ValidDense = exports.ValidDense = CheckedUncheckedTemplate.bind({});
ValidDense.args = {
  ...Valid.args,
  ...DefaultDense.args
};
ValidDense.storyName = 'Valid - Dense';
const WarningDense = exports.WarningDense = CheckedUncheckedTemplate.bind({});
WarningDense.args = {
  ...Warning.args,
  ...DefaultDense.args
};
WarningDense.storyName = 'Warning - Dense';
const ErrorDense = exports.ErrorDense = CheckedUncheckedTemplate.bind({});
ErrorDense.args = {
  ...Error.args,
  ...DefaultDense.args
};
ErrorDense.storyName = 'Error - Dense';
const ImageLabelDense = exports.ImageLabelDense = Template.bind({});
ImageLabelDense.args = {
  ...ImageLabel.args,
  ...DefaultDense.args
};
ImageLabelDense.storyName = 'Image label - Dense';
const NoLabel = exports.NoLabel = Template.bind({});
NoLabel.args = {
  label: null,
  className: 'some-name'
};
const RTL = args => /*#__PURE__*/_react.default.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/_react.default.createElement(Template, args));
exports.RTL = RTL;