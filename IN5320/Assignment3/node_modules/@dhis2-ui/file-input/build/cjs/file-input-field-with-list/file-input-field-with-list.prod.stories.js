"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RTL = exports.DefaultPlaceholder = exports.DefaultButtonLabelAndRemoveText = exports.Default = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _fileInputFieldWithList = require("./file-input-field-with-list.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const description = `
A FileInputField with logic for creating a dynamic list of removable files from an array of \`File\` objects.

\`\`\`js
import { FileInputFieldWithList } from '@dhis2/ui'
\`\`\`
`;
const files = new Array(10).fill('dummy-file-name').map((name, i) => new File([], `${name}-${i + 1}.txt`));
const onChange = _ref => {
  let {
    files
  } = _ref;
  console.log('files: ', files);
};
var _default = exports.default = {
  title: 'File Input Field With List',
  component: _fileInputFieldWithList.FileInputFieldWithList,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  args: {
    // Handle default props bug (see Transfer stories)
    dataTest: 'dhis2-uiwidgets-fileinputfieldwithlist',
    files: [],
    buttonLabel: 'Upload a file',
    placeholder: 'No file uploaded yet',
    removeText: 'Remove',
    multiple: true,
    onChange: onChange,
    name: 'uploadName'
  },
  argTypes: {
    small: {
      ..._uiConstants.sharedPropTypes.sizeArgType
    },
    large: {
      ..._uiConstants.sharedPropTypes.sizeArgType
    },
    valid: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: {
      ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_fileInputFieldWithList.FileInputFieldWithList, args);
const Default = exports.Default = Template.bind({});
Default.args = {
  buttonLabel: 'Upload file (custom label)',
  files: files,
  removeText: 'Custom remove text'
};
const DefaultButtonLabelAndRemoveText = exports.DefaultButtonLabelAndRemoveText = Template.bind({});
DefaultButtonLabelAndRemoveText.args = {
  files: files
};
DefaultButtonLabelAndRemoveText.storyName = 'Default: buttonLabel and removeText';
const DefaultPlaceholder = exports.DefaultPlaceholder = Template.bind({});
DefaultPlaceholder.storyName = 'Default: placeholder';
const RTL = args => /*#__PURE__*/_react.default.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/_react.default.createElement(Template, args));
exports.RTL = RTL;
RTL.args = {
  files: files
};