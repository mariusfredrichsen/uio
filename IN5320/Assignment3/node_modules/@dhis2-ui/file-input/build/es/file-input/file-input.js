import _JSXStyle from "styled-jsx/style";
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { colors, spacers, sharedPropTypes } from '@dhis2/ui-constants';
import { IconUpload24 } from '@dhis2/ui-icons';
import { Button } from '@dhis2-ui/button';
import { StatusIcon } from '@dhis2-ui/status-icon';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { createRef, Component } from 'react';
class FileInput extends Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "ref", /*#__PURE__*/createRef());
    _defineProperty(this, "handleClick", () => {
      this.ref.current.click();
    });
    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      }

      // reset the file input so it won't prevent on-change
      // if the same file was added in a second attempt
      this.ref.current.value = '';
    });
    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });
    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
    _defineProperty(this, "handleKeyDown", e => {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(this.createHandlerPayload(), e);
      }
    });
  }
  createHandlerPayload() {
    return {
      files: this.ref.current.files,
      name: this.props.name
    };
  }
  render() {
    const {
      accept = '*',
      buttonLabel,
      className,
      dataTest = 'dhis2-uicore-fileinput',
      disabled,
      error,
      initialFocus,
      large,
      multiple,
      name,
      small,
      tabIndex,
      valid,
      warning
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["1746996489", [spacers.dp8, spacers.dp4]]]) + " " + (cx('file-input', className) || "")
    }, /*#__PURE__*/React.createElement("div", {
      className: _JSXStyle.dynamic([["1746996489", [spacers.dp8, spacers.dp4]]])
    }, /*#__PURE__*/React.createElement("input", {
      id: name,
      name: name,
      type: "file",
      ref: this.ref,
      onChange: this.handleChange,
      accept: accept,
      multiple: multiple,
      disabled: disabled,
      "data-test": `${dataTest}-input`,
      className: _JSXStyle.dynamic([["1746996489", [spacers.dp8, spacers.dp4]]])
    }), /*#__PURE__*/React.createElement(Button, {
      disabled: disabled,
      icon: /*#__PURE__*/React.createElement(IconUpload24, {
        color: colors.grey700
      }),
      initialFocus: initialFocus,
      large: large,
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      onFocus: this.handleFocus,
      onKeyDown: this.handleKeyDown,
      small: small,
      tabIndex: tabIndex,
      type: "button"
    }, buttonLabel)), /*#__PURE__*/React.createElement(StatusIcon, {
      error: error,
      valid: valid,
      warning: warning
    }), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "1746996489",
      dynamic: [spacers.dp8, spacers.dp4]
    }, ["input.__jsx-style-dynamic-selector{display:none;}", `.file-input.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;gap:${spacers.dp8};padding-bottom:${spacers.dp4};}`]));
  }
}
_defineProperty(FileInput, "defaultProps", {
  accept: '*',
  dataTest: 'dhis2-uicore-fileinput'
});
FileInput.propTypes = {
  /**
   * The `accept` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)
   */
  accept: PropTypes.string,
  buttonLabel: PropTypes.string,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,
  /** Input status. Mutually exclusive with `warning` and `valid` */
  error: sharedPropTypes.statusPropType,
  initialFocus: PropTypes.bool,
  /** Button size. Mutually exclusive with `small` */
  large: sharedPropTypes.sizePropType,
  /**
   * The `multiple` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple)
   */
  multiple: PropTypes.bool,
  name: PropTypes.string,
  /** Button size. Mutually exclusive with `large` */
  small: sharedPropTypes.sizePropType,
  tabIndex: PropTypes.string,
  /** Input status. Mutually exclusive with `warning` and `error` */
  valid: sharedPropTypes.statusPropType,
  /** Input status. Mutually exclusive with `valid` and `error` */
  warning: sharedPropTypes.statusPropType,
  /** Called with signature `(object, event)` */
  onBlur: PropTypes.func,
  /** Called with signature `(object, event)` */
  onChange: PropTypes.func,
  /** Called with signature `(object, event)` */
  onFocus: PropTypes.func,
  /** Called with signature `(object, event)` */
  onKeyDown: PropTypes.func
};
export { FileInput };