"use strict";

var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
var _closeButton = require("./close-button.js");
var _modal = require("./modal.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('Modal', () => {
  describe('Modal Accessibility', () => {
    it('closes when ESC key is pressed', () => {
      const onCloseMock = jest.fn();
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
        onClose: onCloseMock
      }));
      const modalElement = _react.screen.getByRole('dialog');
      _react.fireEvent.keyDown(modalElement, {
        key: 'Escape',
        code: 'Escape'
      });
      expect(onCloseMock).toHaveBeenCalled();
    });
    it('does not close when "Enter" is pressed', () => {
      const onCloseMock = jest.fn();
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
        onClose: onCloseMock
      }));
      const modalElement = _react.screen.getByRole('dialog');
      _react.fireEvent.keyDown(modalElement, {
        key: 'Enter',
        code: 'Enter'
      });
      expect(onCloseMock).not.toHaveBeenCalled();
    });
    it('does not close when "SpaceBar" is pressed', () => {
      const onCloseMock = jest.fn();
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
        onClose: onCloseMock
      }));
      const modalElement = _react.screen.getByRole('dialog');
      _react.fireEvent.keyDown(modalElement, {
        key: ' ',
        code: ' '
      });
      expect(onCloseMock).not.toHaveBeenCalled();
    });
    it('has a close button with proper accessibility attributes', async () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_closeButton.CloseButton, null));
      const closeButton = await _react.screen.findByLabelText(/Close modal dialog/);
      expect(closeButton).toBeInTheDocument();
      expect(closeButton.tagName).toBe('BUTTON');
    });
  });
  describe('Regular dimensions', () => {
    it('has the correct dimension styles in its default state', () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, null));
      const modalEl = _react.screen.getByRole('dialog');
      const style = window.getComputedStyle(modalEl);
      expect(style.height).toBe('auto');
      expect(style.maxHeight).toBe('calc(100vh - 128px)');
      expect(style.maxWidth).toBe('calc(100vw - 128px)');
      expect(style.width).toBe('600px');
    });
    it('has the correct dimension styles when the "small" prop is provided', () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
        small: true
      }));
      const modalEl = _react.screen.getByRole('dialog');
      const style = window.getComputedStyle(modalEl);
      expect(style.height).toBe('auto');
      expect(style.maxHeight).toBe('calc(100vh - 128px)');
      expect(style.maxWidth).toBe('calc(100vw - 128px)');
      expect(style.width).toBe('400px');
    });
    it('has the correct dimension styles when the "large" prop is provided', () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
        large: true
      }));
      const modalEl = _react.screen.getByRole('dialog');
      const style = window.getComputedStyle(modalEl);
      expect(style.height).toBe('auto');
      expect(style.maxHeight).toBe('calc(100vh - 128px)');
      expect(style.maxWidth).toBe('calc(100vw - 128px)');
      expect(style.width).toBe('800px');
    });
    it('has the correct dimension styles when the "fluid" prop is provided', () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
        fluid: true
      }));
      const modalEl = _react.screen.getByRole('dialog');
      const style = window.getComputedStyle(modalEl);
      expect(style.height).toBe('auto');
      expect(style.maxHeight).toBe('calc(100vh - 128px)');
      expect(style.maxWidth).toBe('calc(100vw - 128px)');
      expect(style.width).toBe('auto');
    });
  });
});