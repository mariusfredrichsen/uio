"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectorBar = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _uiConstants = require("@dhis2/ui-constants");
var _button = require("@dhis2-ui/button");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _index = _interopRequireDefault(require("../locales/index.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const ClearSelection = _ref => {
  let {
    disabled,
    onClick
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["3676026375", [_uiConstants.spacers.dp8]]]) + " " + "clear-selections"
  }, /*#__PURE__*/_react.default.createElement(_button.Button, {
    small: true,
    secondary: true,
    disabled: disabled,
    onClick: onClick
  }, _index.default.t('Clear selections')), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "3676026375",
    dynamic: [_uiConstants.spacers.dp8]
  }, [`.clear-selections.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:40px;padding:0 ${_uiConstants.spacers.dp8};}`]));
};
ClearSelection.propTypes = {
  disabled: _propTypes.default.bool,
  onClick: _propTypes.default.func
};
const SelectorBar = _ref2 => {
  let {
    className,
    children,
    onClearSelectionClick,
    dataTest = 'dhis2-ui-selectorbar',
    disableClearSelections,
    additionalContent,
    ariaLabel
  } = _ref2;
  const container = (0, _react.useRef)(null);
  const [childrenToFocus, setChildrenToFocus] = (0, _react.useState)([]);
  (0, _react.useEffect)(() => {
    if (container.current) {
      const controlsDiv = container.current.querySelector('.controls');
      if (controlsDiv) {
        const childElements = Array.from(controlsDiv.children);
        childElements.forEach(child => {
          child.tabIndex = -1;
        });
        setChildrenToFocus(childElements);
      }
    }
  }, [children]);
  const handleKeyDown = event => {
    const currentFocus = document.activeElement;
    if (container.current && container.current === currentFocus) {
      if (childrenToFocus.length > 0 && childrenToFocus[0]) {
        childrenToFocus[0].focus();
      }
      return;
    }
    if (!childrenToFocus.length) {
      return;
    }
    const currentIndex = childrenToFocus.findIndex(element => element === currentFocus);
    if (currentIndex === -1) {
      return;
    }
    if (event.key === 'ArrowRight') {
      event.preventDefault();
      const nextIndex = (currentIndex + 1) % childrenToFocus.length;
      childrenToFocus[nextIndex].focus();
    }
    if (event.key === 'ArrowLeft') {
      event.preventDefault();
      const prevIndex = (currentIndex - 1 + childrenToFocus.length) % childrenToFocus.length;
      childrenToFocus[prevIndex].focus();
    }
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    "data-test": dataTest,
    onKeyDown: handleKeyDown,
    tabIndex: 0,
    ref: container,
    role: "toolbar",
    "aria-label": ariaLabel,
    className: _style.default.dynamic([["2030607490", [_uiConstants.colors.white, _uiConstants.colors.grey400,
    /*
     * Specs define the space to be 12px.
     * 8px already come from the clear selection component
     */
    '']]]) + " " + ((0, _classnames.default)('container', {
      withRHSContents: additionalContent
    }, className) || "")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["2030607490", [_uiConstants.colors.white, _uiConstants.colors.grey400, '']]]) + " " + "controls"
  }, children, onClearSelectionClick && /*#__PURE__*/_react.default.createElement(ClearSelection, {
    disabled: disableClearSelections,
    onClick: onClearSelectionClick
  })), additionalContent && /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["2030607490", [_uiConstants.colors.white, _uiConstants.colors.grey400, '']]]) + " " + "additional-contents"
  }, additionalContent), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2030607490",
    dynamic: [_uiConstants.colors.white, _uiConstants.colors.grey400, '']
  }, [`.container.__jsx-style-dynamic-selector{background:${_uiConstants.colors.white};box-shadow:inset 0 -1px 0 0 ${_uiConstants.colors.grey400};padding-bottom:1px;}`, ".withRHSContents.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".controls.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;gap:1px;}", `.additional-contents.__jsx-style-dynamic-selector{${''} padding-inline-start:4px;}`])));
};
exports.SelectorBar = SelectorBar;
SelectorBar.propTypes = {
  children: _propTypes.default.any.isRequired,
  additionalContent: _propTypes.default.any,
  ariaLabel: _propTypes.default.string,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  disableClearSelections: _propTypes.default.bool,
  onClearSelectionClick: _propTypes.default.func
};