import _JSXStyle from "styled-jsx/style";
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { requiredIf } from '@dhis2/prop-types';
import { spacers, sharedPropTypes } from '@dhis2/ui-constants';
import { Layer } from '@dhis2-ui/layer';
import { Popper } from '@dhis2-ui/popper';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { Button } from '../button/index.js';
function ArrowDown(_ref) {
  let {
    className
  } = _ref;
  return /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 12 12",
    className: "jsx-2347926856" + " " + (className || "")
  }, /*#__PURE__*/React.createElement("path", {
    d: "m5.29289 8.7071c.39053.3905 1.02369.3905 1.41422 0l2.99999-2.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-2.2929 2.2929-2.29289-2.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z",
    className: "jsx-2347926856"
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2347926856"
  }, ["svg.jsx-2347926856{fill:inherit;height:12px;width:12px;vertical-align:middle;pointer-events:none;}"]));
}
ArrowDown.propTypes = {
  className: PropTypes.string
};
function ArrowUp(_ref2) {
  let {
    className
  } = _ref2;
  return /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 12 12",
    className: "jsx-2347926856" + " " + (className || "")
  }, /*#__PURE__*/React.createElement("path", {
    d: "m5.29289 8.7071c.39053.3905 1.02369.3905 1.41422 0l2.99999-2.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-2.2929 2.2929-2.29289-2.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z",
    transform: "matrix(1 0 0 -1 0 12.999974)",
    className: "jsx-2347926856"
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2347926856"
  }, ["svg.jsx-2347926856{fill:inherit;height:12px;width:12px;vertical-align:middle;pointer-events:none;}"]));
}
ArrowUp.propTypes = {
  className: PropTypes.string
};
const arrow = {
  styles: /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1035250400"
  }, [`.jsx-1035250400{margin-inline-start:${spacers.dp12};}`]),
  className: "jsx-1035250400"
};
class DropdownButton extends Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      open: false
    });
    _defineProperty(this, "anchorRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === 'Escape' && this.state.open) {
        event.preventDefault();
        event.stopPropagation();
        this.setState({
          open: false
        });
      }
    });
    _defineProperty(this, "onClickHandler", (_ref3, event) => {
      let {
        name,
        value
      } = _ref3;
      const handleClick = open => {
        if (this.props.onClick) {
          this.props.onClick({
            name,
            value,
            open
          }, event);
        }
      };
      if (typeof this.props.open === 'boolean') {
        handleClick(!this.props.open);
      } else {
        this.setState({
          open: !this.state.open
        }, () => {
          handleClick(this.state.open);
        });
      }
    });
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown);
  }
  render() {
    const {
      component,
      children,
      className,
      destructive,
      disabled,
      icon,
      large,
      primary,
      secondary,
      small,
      name,
      value,
      tabIndex,
      type,
      initialFocus,
      dataTest = 'dhis2-uicore-dropdownbutton'
    } = this.props;
    const open = typeof this.props.open === 'boolean' ? this.props.open : this.state.open;
    const ArrowIconComponent = open ? ArrowUp : ArrowDown;
    return /*#__PURE__*/React.createElement("div", {
      ref: this.anchorRef,
      "data-test": dataTest,
      className: "jsx-3163060161"
    }, /*#__PURE__*/React.createElement(Button, {
      className: className,
      destructive: destructive,
      disabled: disabled,
      icon: icon,
      large: large,
      primary: primary,
      secondary: secondary,
      small: small,
      onClick: this.onClickHandler,
      name: name,
      value: value,
      tabIndex: tabIndex,
      type: type,
      initialFocus: initialFocus,
      "data-test": "dhis2-uicore-dropdownbutton-toggle"
    }, children, /*#__PURE__*/React.createElement(ArrowIconComponent, {
      className: "jsx-3163060161" + " " + (arrow.className || "")
    })), open && /*#__PURE__*/React.createElement(Layer, {
      onBackdropClick: this.onClickHandler,
      transparent: true
    }, /*#__PURE__*/React.createElement(Popper, {
      dataTest: `${dataTest}-popper`,
      placement: "bottom-start",
      reference: this.anchorRef
    }, component)), arrow.styles, /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "3163060161"
    }, ["div.jsx-3163060161{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;color:inherit;white-space:nowrap;}"]));
  }
}
_defineProperty(DropdownButton, "defaultProps", {
  dataTest: 'dhis2-uicore-dropdownbutton'
});
DropdownButton.propTypes = {
  /** Children to render inside the buton */
  children: PropTypes.node,
  className: PropTypes.string,
  /** Component to show/hide when button is clicked */
  component: PropTypes.element,
  dataTest: PropTypes.string,
  /**
   * Applies 'destructive' button appearance, implying a dangerous action.
   */
  destructive: PropTypes.bool,
  /** Make the button non-interactive */
  disabled: PropTypes.bool,
  icon: PropTypes.element,
  /** Grants button initial focus on the page */
  initialFocus: PropTypes.bool,
  /** Button size. Mutually exclusive with `small` prop */
  large: sharedPropTypes.sizePropType,
  name: PropTypes.string,
  /** Controls popper visibility. When implementing this prop the component becomes a controlled component */
  open: PropTypes.bool,
  /**
   * Applies 'primary' button appearance, implying the most important action.
   */
  primary: PropTypes.bool,
  /**
   * Applies 'secondary' button appearance.
   */
  secondary: PropTypes.bool,
  /** Button size. Mutually exclusive with `large` prop */
  small: sharedPropTypes.sizePropType,
  tabIndex: PropTypes.string,
  /** Type of button. Can take advantage of different default behavior */
  type: PropTypes.oneOf(['submit', 'reset', 'button']),
  value: PropTypes.string,
  /**
   * Callback triggered on click.
   * Called with signature `({ name: string, value: string, open: bool }, event)`
   * Is required when using the `open` prop to override the internal
   * state.
   */
  onClick: requiredIf(props => typeof props.open === 'boolean', PropTypes.func)
};
export { DropdownButton };