import _JSXStyle from "styled-jsx/style";
import { mutuallyExclusive } from '@dhis2/prop-types';
import { spacers } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Children } from 'react';
const ButtonStrip = _ref => {
  let {
    className,
    children,
    middle,
    end,
    dataTest = 'dhis2-uicore-buttonstrip'
  } = _ref;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3148822533", [spacers.dp8]]]) + " " + (cx(className, {
      start: !middle && !end,
      middle,
      end
    }) || "")
  }, Children.map(children, child => /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3148822533", [spacers.dp8]]]) + " " + "box"
  }, child)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3148822533",
    dynamic: [spacers.dp8]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "div.middle.__jsx-style-dynamic-selector{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}", "div.end.__jsx-style-dynamic-selector{-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}", `.box.__jsx-style-dynamic-selector{margin-inline-start:${spacers.dp8};}`, ".box.__jsx-style-dynamic-selector:first-child{margin-inline-start:0;}"]));
};
const alignmentPropType = mutuallyExclusive(['middle', 'end'], PropTypes.bool);
ButtonStrip.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  /** Horizontal alignment for buttons. Mutually exclusive with `middle` prop */
  end: alignmentPropType,
  /** Horizontal alignment. Mutually exclusive with `end` prop */
  middle: alignmentPropType
};
export { ButtonStrip };