import { CustomDataProvider } from '@dhis2/app-runtime';
import { renderHook } from '@testing-library/react-hooks';
import React from 'react';
import { useOrgData } from './use-org-data.js';
describe('OrganisationUnitTree - useOrgData', () => {
  // @TODO: Figure out why this is necessary at all...
  const origError = console.error;
  jest.spyOn(console, 'error').mockImplementation(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    const [err] = args;
    if (!err.toString().match(/^Warning: An update to/)) {
      origError(...args);
    }
  });
  afterAll(() => {
    console.error.mockRestore();
  });
  const dataProviderData = {
    organisationUnits: jest.fn((type, _ref) => {
      let {
        id
      } = _ref;
      if (id === 'A0000000000') {
        return {
          id: 'A0000000000',
          path: '/A0000000000',
          displayName: 'Org Unit 1'
        };
      }
      return Promise.reject(`No org unit with id "${id}"`);
    })
  };
  const wrapper = _ref2 => {
    let {
      children
    } = _ref2;
    return /*#__PURE__*/React.createElement(CustomDataProvider, {
      data: dataProviderData
    }, children);
  };
  it('should respond with `loading: true`, `error: null` and `data: { displayName, id }` initially', () => {
    const {
      result
    } = renderHook(() => useOrgData('A0000000000', {
      displayName: 'Display name'
    }), {
      wrapper
    });
    expect(result.current).toEqual({
      loading: true,
      error: null,
      data: {
        displayName: 'Display name',
        id: 'A0000000000'
      }
    });
  });
  it('should provide the org unit data', async () => {
    const {
      result,
      waitForNextUpdate
    } = renderHook(() => useOrgData('A0000000000', {
      displayName: 'Display name'
    }), {
      wrapper
    });
    await waitForNextUpdate();
    expect(result.current).toEqual({
      loading: false,
      error: null,
      data: {
        id: 'A0000000000',
        path: '/A0000000000',
        displayName: 'Org Unit 1'
      }
    });
  });
  it('should provide the error', async () => {
    const errorWrapper = _ref3 => {
      let {
        children
      } = _ref3;
      return /*#__PURE__*/React.createElement(CustomDataProvider, {
        data: {
          organisationUnits: async () => {
            throw new Error('Error message');
          }
        }
      }, children);
    };
    const {
      result,
      waitForNextUpdate
    } = renderHook(() => useOrgData('A0000000000', {
      displayName: 'Display name'
    }), {
      wrapper: errorWrapper
    });
    await waitForNextUpdate();
    expect(result.current).toEqual({
      loading: false,
      error: new Error('Error message'),
      data: {
        displayName: 'Display name',
        id: 'A0000000000'
      }
    });
  });
  it('should send the "isUserDataViewFallback" parameter with value "undefined"', async () => {
    const options = {
      displayName: 'Display name'
    };
    const {
      waitForNextUpdate
    } = renderHook(() => useOrgData('A0000000000', options), {
      wrapper
    });
    await waitForNextUpdate();
    expect(dataProviderData.organisationUnits).toHaveBeenCalledWith('read', expect.objectContaining({
      params: expect.objectContaining({
        isUserDataViewFallback: undefined
      })
    }), expect.objectContaining({}) // contains the `signal`
    );
  });
  it('should send the "isUserDataViewFallback" parameter with value "true"', async () => {
    const options = {
      isUserDataViewFallback: true,
      displayName: 'Display name'
    };
    const {
      waitForNextUpdate
    } = renderHook(() => useOrgData('A0000000000', options), {
      wrapper
    });
    await waitForNextUpdate();
    expect(dataProviderData.organisationUnits).toHaveBeenCalledWith('read', expect.objectContaining({
      params: expect.objectContaining({
        isUserDataViewFallback: true
      })
    }), expect.objectContaining({}) // contains the `signal`
    );
  });
});