/**
 * @param {Object} args
 * @param {string[]} args.expanded
 * @param {Function} args.setExpanded
 * @param {Function} [args.onExpand]
 * @param {Function} [args.onCollapse]
 * @returns {{ handleExpand: Function, handleCollapse: Function }}
 */
export const createExpandHandlers = _ref => {
  let {
    expanded,
    setExpanded,
    onExpand,
    onCollapse
  } = _ref;
  const handleExpand = _ref2 => {
    let {
      path,
      ...rest
    } = _ref2;
    if (!expanded.includes(path)) {
      setExpanded([...expanded, path]);
      if (onExpand) {
        onExpand({
          path,
          ...rest
        });
      }
    }
  };
  const handleCollapse = _ref3 => {
    let {
      path,
      ...rest
    } = _ref3;
    const pathIndex = expanded.indexOf(path);
    if (pathIndex !== -1) {
      const updatedExpanded = pathIndex === 0 ? expanded.slice(1) : [...expanded.slice(0, pathIndex), ...expanded.slice(pathIndex + 1)];
      setExpanded(updatedExpanded);
      if (onCollapse) {
        onCollapse({
          path,
          ...rest
        });
      }
    }
  };
  return {
    handleExpand,
    handleCollapse
  };
};