"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menu = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = require("../select/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const onIgnoredClick = (_, e) => {
  e.stopPropagation();
  e.preventDefault();
};
const Menu = _ref => {
  let {
    options,
    onChange,
    selected,
    empty = '',
    handleFocusInput,
    handleClose,
    dataTest
  } = _ref;
  const renderedOptions = (0, _index.filterIgnored)(options);
  if (_react.default.Children.count(renderedOptions) === 0) {
    // If it's a string, supply it to our <Empty> component so it looks better
    if (typeof empty === 'string') {
      return /*#__PURE__*/_react.default.createElement(_index.Empty, {
        message: empty,
        dataTest: `${dataTest}-empty`
      });
    }

    // Otherwise just render the supplied markup
    return empty;
  }
  const children = _react.default.Children.map(options, child => {
    const isValidOption = (0, _index.checkIfValidOption)(child);

    // Return early if the child isn't an option, to prevent attaching handlers etc.
    if (!isValidOption) {
      return child;
    }
    const {
      value,
      disabled: isDisabled
    } = child.props;

    // Active means the option is currently selected
    const isActive = value === selected;
    const onClick = (_, e) => {
      const data = {
        selected: value
      };
      e.stopPropagation();
      onChange(data, e);
      handleClose();
      handleFocusInput();
    };

    // Clicks on active options or disabled options should be ignored for the single select
    const isIgnored = isActive || isDisabled;
    return /*#__PURE__*/_react.default.cloneElement(child, {
      ...child.props,
      onClick: isIgnored ? onIgnoredClick : onClick,
      active: isActive
    });
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
};
exports.Menu = Menu;
Menu.propTypes = {
  dataTest: _propTypes.default.string.isRequired,
  empty: _propTypes.default.node,
  handleClose: _propTypes.default.func,
  handleFocusInput: _propTypes.default.func,
  options: _propTypes.default.node,
  selected: _propTypes.default.string,
  onChange: _propTypes.default.func
};