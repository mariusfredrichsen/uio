import _JSXStyle from "styled-jsx/style";
import { colors, theme, sharedPropTypes } from '@dhis2/ui-constants';
import { IconChevronDown16 } from '@dhis2/ui-icons';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
const InputWrapper = _ref => {
  let {
    dataTest,
    onToggle,
    children,
    tabIndex = '0',
    error,
    warning,
    valid,
    disabled,
    dense,
    className,
    inputRef
  } = _ref;
  const classNames = cx(className, 'root', {
    error,
    warning,
    valid,
    disabled,
    dense
  });
  return /*#__PURE__*/React.createElement("div", {
    onClick: onToggle,
    tabIndex: tabIndex,
    ref: inputRef,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1568723238", [colors.grey500, theme.focus, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + (classNames || "")
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["1568723238", [colors.grey500, theme.focus, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + "root-children"
  }, children), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["1568723238", [colors.grey500, theme.focus, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + "root-right"
  }, /*#__PURE__*/React.createElement(IconChevronDown16, null)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1568723238",
    dynamic: [colors.grey500, theme.focus, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]
  }, [`.root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:white;border-radius:3px;border:1px solid ${colors.grey500};box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:40px;padding-block:6px;padding-inline:12px;box-shadow:inset 0 0 1px 0 rgba(48,54,60,0.1);}`, `.root.__jsx-style-dynamic-selector:not(.disabled):focus,.root.__jsx-style-dynamic-selector:not(.disabled):active{outline:none;box-shadow:inset 0 0 0 2px ${theme.focus};border-color:${theme.focus};}`, `.root.valid.__jsx-style-dynamic-selector{border-color:${theme.valid};}`, `.root.warning.__jsx-style-dynamic-selector{border-color:${theme.warning};}`, `.root.error.__jsx-style-dynamic-selector{border-color:${theme.error};}`, `.root.disabled.__jsx-style-dynamic-selector{background-color:${colors.grey100};border-color:${colors.grey500};color:${theme.disabled};cursor:not-allowed;}`, ".root.dense.__jsx-style-dynamic-selector{padding-block:2px;padding-inline:8px;min-height:32px;}", ".root-children.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".root-right.__jsx-style-dynamic-selector{margin-block-start:4px;margin-inline-start:8px;}"]));
};
InputWrapper.propTypes = {
  dataTest: PropTypes.string.isRequired,
  inputRef: PropTypes.object.isRequired,
  tabIndex: PropTypes.string.isRequired,
  onToggle: PropTypes.func.isRequired,
  children: PropTypes.element,
  className: PropTypes.string,
  dense: PropTypes.bool,
  disabled: PropTypes.bool,
  error: sharedPropTypes.statusPropType,
  valid: sharedPropTypes.statusPropType,
  warning: sharedPropTypes.statusPropType
};
export { InputWrapper };