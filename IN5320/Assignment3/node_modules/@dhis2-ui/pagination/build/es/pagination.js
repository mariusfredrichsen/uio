import _JSXStyle from "styled-jsx/style";
import { requiredIf } from '@dhis2/prop-types';
import { spacers } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { getDefaultPageSummaryText } from './get-default-page-summary-text.js';
import { getItemRange } from './get-item-range.js';
import i18n from './locales/index.js';
import { PageControls } from './page-controls.js';
import { PageSelect } from './page-select.js';
import { PageSizeSelect } from './page-size-select.js';
import { PageSummary } from './page-summary.js';
const MAX_PAGE_COUNT = 2000;
const defaultProps = {
  dataTest: 'dhis2-uiwidgets-pagination',
  nextPageText: () => i18n.t('Next'),
  pageSelectText: () => i18n.t('Page'),
  pageSizes: ['5', '10', '20', '30', '40', '50', '75', '100'],
  pageSizeSelectText: () => i18n.t('Items per page'),
  pageSummaryText: getDefaultPageSummaryText,
  previousPageText: () => i18n.t('Previous')
};
const Pagination = _ref => {
  let {
    className,
    dataTest = defaultProps.dataTest,
    disabled,
    hidePageSelect,
    hidePageSizeSelect,
    hidePageSummary,
    isLastPage,
    nextPageText = defaultProps.nextPageText,
    onPageChange,
    onPageSizeChange,
    page,
    pageCount,
    pageLength,
    pageSelectText = defaultProps.pageSelectText,
    pageSize,
    pageSizes = defaultProps.pageSizes,
    pageSizeSelectText = defaultProps.pageSizeSelectText,
    pageSummaryText = defaultProps.pageSummaryText,
    previousPageText = defaultProps.previousPageText,
    total
  } = _ref;
  const {
    firstItem,
    lastItem
  } = getItemRange({
    isLastPage,
    page,
    pageLength,
    pageSize,
    total
  });
  const showPageSelect = !hidePageSelect && typeof pageCount === 'number' && pageCount > 1 && pageCount <= MAX_PAGE_COUNT;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3796520840", [spacers.dp4]]]) + " " + (cx('container', className) || "")
  }, hidePageSizeSelect ? /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3796520840", [spacers.dp4]]]) + " " + "spacer"
  }) : /*#__PURE__*/React.createElement(PageSizeSelect, {
    dataTest: dataTest,
    disabled: disabled,
    pageSize: pageSize,
    pageSizes: pageSizes,
    onChange: onPageSizeChange,
    pageSizeSelectText: pageSizeSelectText
  }), !hidePageSummary && /*#__PURE__*/React.createElement(PageSummary, {
    dataTest: dataTest,
    inactive: disabled,
    firstItem: firstItem,
    lastItem: lastItem,
    page: page,
    pageCount: pageCount,
    pageSummaryText: pageSummaryText,
    total: total
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3796520840", [spacers.dp4]]]) + " " + "page-navigation"
  }, showPageSelect && /*#__PURE__*/React.createElement(PageSelect, {
    dataTest: dataTest,
    disabled: disabled,
    pageSelectText: pageSelectText,
    page: page,
    pageCount: pageCount,
    onChange: onPageChange
  }), /*#__PURE__*/React.createElement(PageControls, {
    dataTest: dataTest,
    nextPageText: nextPageText,
    page: page,
    previousPageText: previousPageText,
    onClick: onPageChange,
    isNextDisabled: disabled || isLastPage || page === pageCount,
    isPreviousDisabled: disabled || page === 1
  })), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3796520840",
    dynamic: [spacers.dp4]
  }, [`.container.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;row-gap:${spacers.dp4};}`, ".spacer.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".page-navigation.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;min-height:32px;}"]));
};
Pagination.propTypes = {
  page: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,
  hidePageSelect: PropTypes.bool,
  hidePageSizeSelect: PropTypes.bool,
  hidePageSummary: PropTypes.bool,
  isLastPage: PropTypes.bool,
  nextPageText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  pageCount: PropTypes.number,
  pageLength: requiredIf(props => props.isLastPage, PropTypes.number),
  pageSelectText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  pageSizeSelectText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  pageSizes: PropTypes.arrayOf(PropTypes.string),
  pageSummaryText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  previousPageText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  total: PropTypes.number,
  onPageChange: PropTypes.func,
  onPageSizeChange: PropTypes.func
};
export { Pagination };