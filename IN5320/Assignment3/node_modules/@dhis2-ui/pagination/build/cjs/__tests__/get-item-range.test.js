"use strict";

var mockPagers = _interopRequireWildcard(require("../__fixtures__/index.js"));
var _getItemRange = require("../get-item-range.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
describe('getItemRange', () => {
  it('calculates the firstItem and lastItem correctly', () => {
    const {
      page,
      pageSize,
      total
    } = mockPagers.atTenthPage;
    const {
      firstItem,
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page,
      pageSize,
      total
    });
    expect(firstItem).toBe(451);
    expect(lastItem).toBe(500);
  });
  it('returns 0 for firstItem and lastItem if the total is 0', () => {
    const {
      firstItem,
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 1,
      pageSize: 50,
      total: 0
    });
    expect(firstItem).toBe(0);
    expect(lastItem).toBe(0);
  });
  it('uses the total count as lastItem when the last page is reached', () => {
    const {
      page,
      pageSize,
      total
    } = mockPagers.atLastPage;
    const {
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page,
      pageSize,
      total
    });
    expect(lastItem).toBe(total);
  });
  it('handles pagers without totals', () => {
    const {
      firstItem,
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 3,
      pageSize: 50
    });
    expect(firstItem).toBe(101);
    expect(lastItem).toBe(150);
  });
  it('bases the lastItem on the pageLength for pagers without total when the last page is reached', () => {
    const {
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 3,
      pageSize: 50,
      pageLength: 21,
      isLastPage: true
    });
    expect(lastItem).toBe(121);
  });
  it('sets lastItem to NaN when on the last page and there is no total or pageLength', () => {
    const {
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 3,
      pageSize: 50,
      isLastPage: true
    });
    expect(lastItem).toBe(NaN);
  });
});