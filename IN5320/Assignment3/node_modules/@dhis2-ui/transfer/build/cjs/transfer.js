"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transfer = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _actions = require("./actions.js");
var _addAll = require("./add-all.js");
var _addIndividual = require("./add-individual.js");
var _container = require("./container.js");
var _filter = require("./filter.js");
var _leftFooter = require("./left-footer.js");
var _leftHeader = require("./left-header.js");
var _leftSide = require("./left-side.js");
var _optionsContainer = require("./options-container.js");
var _removeAll = require("./remove-all.js");
var _removeIndividual = require("./remove-individual.js");
var _reorderingActions = require("./reordering-actions.js");
var _rightFooter = require("./right-footer.js");
var _rightHeader = require("./right-header.js");
var _rightSide = require("./right-side.js");
var _index = require("./transfer/index.js");
var _transferOption = require("./transfer-option.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const identity = value => value;
const defaultSelected = [];
const Transfer = _ref => {
  let {
    options,
    onChange,
    addAllText,
    addIndividualText,
    className,
    dataTest = 'dhis2-uicore-transfer',
    disabled,
    enableOrderChange,
    filterCallback = _index.defaultFilterCallback,
    filterCallbackPicked = _index.defaultFilterCallback,
    filterLabel,
    filterLabelPicked,
    filterPlaceholder,
    filterPlaceholderPicked,
    filterable,
    filterablePicked,
    height = '240px',
    hideFilterInput,
    hideFilterInputPicked,
    initialSearchTerm = '',
    initialSearchTermPicked = '',
    leftFooter,
    leftHeader,
    loadingPicked,
    loading,
    maxSelections = Infinity,
    optionsWidth = '320px',
    removeAllText,
    removeIndividualText,
    renderOption = defaultRenderOption,
    rightFooter,
    rightHeader,
    searchTerm,
    searchTermPicked,
    selected = defaultSelected,
    selectedEmptyComponent,
    selectedWidth = '320px',
    sourceEmptyPlaceholder,
    onFilterChange,
    onFilterChangePicked,
    onEndReached,
    onEndReachedPicked
  } = _ref;
  /* Source options search value:
   * Depending on whether the onFilterChange callback has been provided
   * either the internal or external search value is used */
  const {
    filterValue: actualFilter,
    filter: actualFilterCallback,
    setInternalFilter
  } = (0, _index.useFilter)({
    initialSearchTerm,
    onFilterChange,
    externalSearchTerm: searchTerm,
    filterable,
    filterCallback
  });

  /*
   * Actual source options:
   * Extract the not-selected options.
   * Filters options if filterable is true.
   */
  const sourceOptions = actualFilterCallback(options.filter(_ref2 => {
    let {
      value
    } = _ref2;
    return !selected.includes(value);
  }), actualFilter);

  /*
   * Picked options highlighting:
   * These are all the highlighted options on the options side.
   */
  const {
    highlightedOptions: highlightedSourceOptions,
    setHighlightedOptions: setHighlightedSourceOptions,
    toggleHighlightedOption: toggleHighlightedSourceOption
  } = (0, _index.useHighlightedOptions)({
    options: sourceOptions,
    disabled,
    maxSelections
  });

  /* Picked options search value:
   * Depending on whether the onFilterChangePicked callback has been provided
   * either the internal or external search value is used */
  const {
    filterValue: actualFilterPicked,
    filter: actualFilterPickedCallback,
    setInternalFilter: setInternalFilterPicked
  } = (0, _index.useFilter)({
    filterable: filterablePicked,
    initialSearchTerm: initialSearchTermPicked,
    onFilterChange: onFilterChangePicked,
    externalSearchTerm: searchTermPicked,
    filterCallback: filterCallbackPicked
  });

  /*
   * Actual picked options:
   * Extract the selected options. Can't use `options.filter`
   * because we need to keep the order of `selected`
   */
  let pickedOptions = [];

  // Only map if selected is an array
  if (Array.isArray(selected)) {
    pickedOptions = actualFilterPickedCallback(selected.map(value => options.find(option => value === option.value))
    // filter -> in case a selected value has been provided
    // that does not exist as option
    .filter(identity), actualFilterPicked);
  }

  /*
   * Source options highlighting:
   * These are all the highlighted options on the selected side.
   */
  const {
    highlightedOptions: highlightedPickedOptions,
    setHighlightedOptions: setHighlightedPickedOptions,
    toggleHighlightedOption: toggleHighlightedPickedOption
  } = (0, _index.useHighlightedOptions)({
    options: pickedOptions,
    disabled,
    maxSelections
  });

  /*
   * Source & Picked options:
   * These are the double click handlers for (de-)selection
   */
  const {
    selectSingleOption,
    deselectSingleOption
  } = (0, _index.createDoubleClickHandlers)({
    selected,
    setHighlightedSourceOptions,
    setHighlightedPickedOptions,
    onChange,
    maxSelections
  });

  /**
   * Disabled button states
   */
  const isAddAllDisabled = disabled || sourceOptions.filter(_ref3 => {
    let {
      disabled
    } = _ref3;
    return !disabled;
  }).length === 0;
  const isAddIndividualDisabled = disabled || !highlightedSourceOptions.length;
  const isRemoveAllDisabled = disabled || !selected.length;
  const isRemoveIndividualDisabled = disabled || !highlightedPickedOptions.length;
  return /*#__PURE__*/_react.default.createElement(_container.Container, {
    dataTest: dataTest,
    className: className,
    height: height
  }, /*#__PURE__*/_react.default.createElement(_leftSide.LeftSide, {
    dataTest: `${dataTest}-leftside`,
    width: optionsWidth
  }, (leftHeader || filterable) && /*#__PURE__*/_react.default.createElement(_leftHeader.LeftHeader, {
    dataTest: `${dataTest}-leftheader`
  }, leftHeader, filterable && !hideFilterInput && /*#__PURE__*/_react.default.createElement(_filter.Filter, {
    label: filterLabel,
    placeholder: filterPlaceholder,
    dataTest: `${dataTest}-filter`,
    filter: actualFilter,
    onChange: onFilterChange ? onFilterChange : _ref4 => {
      let {
        value
      } = _ref4;
      return setInternalFilter(value);
    }
  })), /*#__PURE__*/_react.default.createElement(_optionsContainer.OptionsContainer, {
    dataTest: `${dataTest}-sourceoptions`,
    emptyComponent: sourceEmptyPlaceholder,
    getOptionClickHandlers: _index.getOptionClickHandlers,
    highlightedOptions: highlightedSourceOptions,
    loading: loading,
    options: sourceOptions,
    renderOption: renderOption,
    selectionHandler: selectSingleOption,
    toggleHighlightedOption: toggleHighlightedSourceOption,
    onEndReached: onEndReached
  }), leftFooter && /*#__PURE__*/_react.default.createElement(_leftFooter.LeftFooter, {
    dataTest: `${dataTest}-leftfooter`
  }, leftFooter)), /*#__PURE__*/_react.default.createElement(_actions.Actions, {
    dataTest: `${dataTest}-actions`
  }, maxSelections === Infinity && /*#__PURE__*/_react.default.createElement(_addAll.AddAll, {
    label: addAllText,
    dataTest: `${dataTest}-actions-addall`,
    disabled: isAddAllDisabled,
    onClick: () => (0, _index.addAllSelectableSourceOptions)({
      sourceOptions,
      selected,
      onChange,
      setHighlightedSourceOptions
    })
  }), /*#__PURE__*/_react.default.createElement(_addIndividual.AddIndividual, {
    label: addIndividualText,
    dataTest: `${dataTest}-actions-addindividual`,
    disabled: isAddIndividualDisabled,
    onClick: () => (0, _index.addIndividualSourceOptions)({
      filterable,
      sourceOptions,
      highlightedSourceOptions,
      selected,
      maxSelections,
      onChange,
      setHighlightedSourceOptions
    })
  }), maxSelections === Infinity && /*#__PURE__*/_react.default.createElement(_removeAll.RemoveAll, {
    label: removeAllText,
    dataTest: `${dataTest}-actions-removeall`,
    disabled: isRemoveAllDisabled,
    onClick: () => (0, _index.removeAllPickedOptions)({
      setHighlightedPickedOptions,
      onChange
    })
  }), /*#__PURE__*/_react.default.createElement(_removeIndividual.RemoveIndividual, {
    label: removeIndividualText,
    dataTest: `${dataTest}-actions-removeindividual`,
    disabled: isRemoveIndividualDisabled,
    onClick: () => (0, _index.removeIndividualPickedOptions)({
      filterablePicked,
      pickedOptions,
      highlightedPickedOptions,
      onChange,
      selected,
      setHighlightedPickedOptions
    })
  })), /*#__PURE__*/_react.default.createElement(_rightSide.RightSide, {
    dataTest: `${dataTest}-rightside`,
    width: selectedWidth
  }, (rightHeader || filterablePicked) && /*#__PURE__*/_react.default.createElement(_rightHeader.RightHeader, {
    dataTest: `${dataTest}-rightheader`
  }, rightHeader, filterablePicked && !hideFilterInputPicked && /*#__PURE__*/_react.default.createElement(_filter.Filter, {
    label: filterLabelPicked,
    placeholder: filterPlaceholderPicked,
    dataTest: `${dataTest}-filter`,
    filter: actualFilterPicked,
    onChange: onFilterChangePicked ? onFilterChangePicked : _ref5 => {
      let {
        value
      } = _ref5;
      return setInternalFilterPicked(value);
    }
  })), /*#__PURE__*/_react.default.createElement(_optionsContainer.OptionsContainer, {
    selected: true,
    dataTest: `${dataTest}-pickedoptions`,
    emptyComponent: selectedEmptyComponent,
    getOptionClickHandlers: _index.getOptionClickHandlers,
    highlightedOptions: highlightedPickedOptions,
    loading: loadingPicked,
    options: pickedOptions,
    renderOption: renderOption,
    selectionHandler: deselectSingleOption,
    toggleHighlightedOption: toggleHighlightedPickedOption,
    onEndReached: onEndReachedPicked
  }), (rightFooter || enableOrderChange) && /*#__PURE__*/_react.default.createElement(_rightFooter.RightFooter, {
    dataTest: `${dataTest}-rightfooter`
  }, enableOrderChange && /*#__PURE__*/_react.default.createElement(_reorderingActions.ReorderingActions, {
    dataTest: `${dataTest}-reorderingactions`,
    disabledDown: (0, _index.isReorderDownDisabled)({
      highlightedPickedOptions,
      selected
    }),
    disabledUp: (0, _index.isReorderUpDisabled)({
      highlightedPickedOptions,
      selected
    }),
    onChangeUp: () => (0, _index.moveHighlightedPickedOptionUp)({
      selected,
      highlightedPickedOptions,
      onChange
    }),
    onChangeDown: () => {
      (0, _index.moveHighlightedPickedOptionDown)({
        selected,
        highlightedPickedOptions,
        onChange
      });
    }
  }), rightFooter)));
};
exports.Transfer = Transfer;
const defaultRenderOption = option => /*#__PURE__*/_react.default.createElement(_transferOption.TransferOption, option);
Transfer.propTypes = {
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.string.isRequired,
    disabled: _propTypes.default.bool
  })).isRequired,
  onChange: _propTypes.default.func.isRequired,
  addAllText: _propTypes.default.string,
  addIndividualText: _propTypes.default.string,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  enableOrderChange: _propTypes.default.bool,
  filterCallback: _propTypes.default.func,
  filterCallbackPicked: _propTypes.default.func,
  filterLabel: _propTypes.default.string,
  filterLabelPicked: _propTypes.default.string,
  filterPlaceholder: _propTypes.default.string,
  filterPlaceholderPicked: _propTypes.default.string,
  filterable: _propTypes.default.bool,
  filterablePicked: _propTypes.default.bool,
  height: _propTypes.default.string,
  hideFilterInput: _propTypes.default.bool,
  hideFilterInputPicked: _propTypes.default.bool,
  initialSearchTerm: _propTypes.default.string,
  initialSearchTermPicked: _propTypes.default.string,
  leftFooter: _propTypes.default.node,
  leftHeader: _propTypes.default.node,
  loading: _propTypes.default.bool,
  loadingPicked: _propTypes.default.bool,
  maxSelections: _propTypes.default.oneOf([1, Infinity]),
  optionsWidth: _propTypes.default.string,
  removeAllText: _propTypes.default.string,
  removeIndividualText: _propTypes.default.string,
  renderOption: _propTypes.default.func,
  rightFooter: _propTypes.default.node,
  rightHeader: _propTypes.default.node,
  searchTerm: _propTypes.default.string,
  searchTermPicked: _propTypes.default.string,
  selected: _propTypes.default.arrayOf(_propTypes.default.string),
  selectedEmptyComponent: _propTypes.default.node,
  selectedWidth: _propTypes.default.string,
  sourceEmptyPlaceholder: _propTypes.default.node,
  onEndReached: _propTypes.default.func,
  onEndReachedPicked: _propTypes.default.func,
  onFilterChange: _propTypes.default.func,
  onFilterChangePicked: _propTypes.default.func
};