"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
var _index = require("../common/index.js");
(0, _cypressCucumberPreprocessor.Given)('filtering is enabled', () => {
  // no op
});
(0, _cypressCucumberPreprocessor.Given)('the options list is being filtered', () => {
  // no op
});
(0, _cypressCucumberPreprocessor.Given)('the result is not empty', () => {
  cy.visitStory('Transfer filtering', 'Some Results');
});
(0, _cypressCucumberPreprocessor.Given)('the result is empty', () => {
  cy.visitStory('Transfer filtering', 'Empty Result');
});
(0, _cypressCucumberPreprocessor.Given)('a no-result message has been provided', () => {
  // no op
});
(0, _cypressCucumberPreprocessor.Given)('the options are being search with a {string} search term', firstCase => {
  if (firstCase === 'uppercase') {
    cy.visitStory('Transfer filtering', 'Uppercase Search');
  } else if (firstCase === 'lowercase') {
    cy.visitStory('Transfer filtering', 'Lowercase Search');
  }
  cy.get('{transfer-filter} input').then($input => $input.val()).as('firstCaseTerm');
});
(0, _cypressCucumberPreprocessor.Given)('some options are listed', () => {
  cy.get('{transfer-sourceoptions} {transferoption}').should('have.length.of.at.least', 1).as('firstCaseOptions');
});
(0, _cypressCucumberPreprocessor.Given)('the filter function only returns ANC options', () => {
  cy.visitStory('Transfer filtering', 'Anc Custom Filter');
});
(0, _cypressCucumberPreprocessor.Given)("the filter value is controlled by the component's consumer", () => {
  cy.visitStory('Transfer filtering', 'Controlled Filter');
});
(0, _cypressCucumberPreprocessor.When)('the user uses the same search term but {string}', secondCase => {
  cy.all(() => cy.get('@firstCaseTerm'), () => cy.get('{transfer-filter} input')).then(_ref => {
    let [firstCaseTerm, $filterInput] = _ref;
    let secondCaseTerm;
    if (secondCase === 'uppercase') {
      secondCaseTerm = firstCaseTerm.toUpperCase();
    } else if (secondCase === 'lowercase') {
      secondCaseTerm = firstCaseTerm.toLowerCase();
    }
    cy.wrap($filterInput).clear().type(secondCaseTerm);
  });
});
(0, _cypressCucumberPreprocessor.When)('searching for "s"', () => {
  cy.get('{transfer-filter} input').type('s');
});
(0, _cypressCucumberPreprocessor.When)('the filter value changes', () => {
  cy.get('{transfer-filter} input').then($input => console.log('$input', $input) || $input).type('ANC');
});
(0, _cypressCucumberPreprocessor.Then)('all the matching items should be shown in the options list', () => {
  cy.all(() => cy.get('{transfer-filter}'), () => cy.get('{transferoption}')).should(_ref2 => {
    let [$filter, $options] = _ref2;
    const searchTerm = $filter.val();
    expect($options).to.have.length.of.at.least(1);
    $options.each((index, option) => {
      const text = Cypress.$(option).text();
      expect(text).to.match(new RegExp(searchTerm));
    });
  });
});
(0, _cypressCucumberPreprocessor.Then)('no items should be shown in the options list', () => {
  cy.get('{transferoption}').should('not.exist');
});
(0, _cypressCucumberPreprocessor.Then)('information should be displayed that no items matched the filter', () => {
  cy.get('{no-results}', {
    prefix: ''
  }).should('exist');
});
(0, _cypressCucumberPreprocessor.Then)('the same options should be shown', () => {
  cy.all(() => cy.get('@firstCaseOptions'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref3 => {
    let [$firstCaseOptions, $secondCaseOptions] = _ref3;
    const firstCaseOptions = $firstCaseOptions.toArray().map(_index.extractOptionFromElement);
    const secondCaseOptions = $secondCaseOptions.toArray().map(_index.extractOptionFromElement);
    expect(firstCaseOptions).to.eql(secondCaseOptions);
  });
});
(0, _cypressCucumberPreprocessor.Then)('only the results including the word "ANC" are included', () => {
  cy.get('{transfer-sourceoptions} {transferoption}').each($option => expect($option.text()).to.match(/ANC/));
});
(0, _cypressCucumberPreprocessor.Then)('the onFilterChange callback will be called with the new value', () => {
  cy.window().should(win => {
    expect(win.customFilterCallback.callCount).to.equal(4);
    expect(win.customFilterCallback.getCall(0).args[1]).to.equal('');
    expect(win.customFilterCallback.getCall(1).args[1]).to.equal('A');
    expect(win.customFilterCallback.getCall(2).args[1]).to.equal('AN');
    expect(win.customFilterCallback.getCall(3).args[1]).to.equal('ANC');
  });
});