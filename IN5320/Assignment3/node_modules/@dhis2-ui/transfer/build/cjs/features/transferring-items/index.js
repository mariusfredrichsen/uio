"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
var _parseSelectorWithDataTest = require("../../../../../cypress/support/common/parseSelectorWithDataTest.js");
var _index = require("../common/index.js");
(0, _cypressCucumberPreprocessor.Given)('some options are selectable', () => {
  cy.visitStory('Transfer Transferring Items', 'Has Options');
});
(0, _cypressCucumberPreprocessor.Given)('some options are selected', () => {
  cy.visitStory('Transfer Transferring Items', 'Some Selected');
});
(0, _cypressCucumberPreprocessor.Given)('one or more items in the options list are highlighted', () => {
  cy.get('{transfer-sourceoptions} {transferoption}').filter(index => index < 3)
  // shuffle order so we can check they're added in the right order
  .then($options => cy.wrap([$options[2], $options[0], $options[1]])).each($option => cy.wrap($option).clickWith('ctrl')).then($options => $options.toArray().map(_index.extractOptionFromElement)).as('itemsToBeSelected');
});
(0, _cypressCucumberPreprocessor.Given)('some items in the options list are highlighted', () => {
  cy.get('{transfer-sourceoptions} {transferoption}').filter(index => index < 3)
  // shuffle order so we can check they're added in the right order
  .then($options => cy.wrap([$options[2], $options[0], $options[1]])).each($option => cy.wrap($option).clickWith('ctrl')).then($options => $options.toArray().map(_index.extractOptionFromElement)).as('itemsToBeSelected');
});
(0, _cypressCucumberPreprocessor.Given)('some items in the selected list are highlighted', () => {
  cy.get('{transfer-pickedoptions} {transferoption}').filter(index => index < 3)
  // shuffle order so we can check they're added in the right order
  .then($options => cy.wrap([$options[2], $options[0], $options[1]])).each($option => cy.wrap($option).clickWith('ctrl')).then($options => $options.toArray().map(_index.extractOptionFromElement)).as('itemsToBeDeselected');
});
(0, _cypressCucumberPreprocessor.When)("the user clicks the 'move to selected list' button", () => {
  cy.get('{transfer-actions-addindividual}').click();
});
(0, _cypressCucumberPreprocessor.When)("the user clicks the 'move to options list' button", () => {
  cy.get('{transfer-actions-removeindividual}').click();
});
(0, _cypressCucumberPreprocessor.When)("the user clicks the 'move all to selected list' button", () => {
  cy.get('{transfer-sourceoptions} {transferoption}').then($options => $options.toArray().map(_index.extractOptionFromElement)).as('itemsToBeSelected');
  cy.get('{transfer-actions-addall}').click();
});
(0, _cypressCucumberPreprocessor.When)("the user clicks the 'move all to options list' button", () => {
  cy.get('{transfer-pickedoptions} {transferoption}').then($options => $options.toArray().map(_index.extractOptionFromElement)).as('itemsToBeDeselected');
  cy.get('{transfer-actions-removeall}').click();
});
(0, _cypressCucumberPreprocessor.When)('the user double clicks an item in the options list', () => {
  cy.get('{transfer-sourceoptions} {transferoption}').first().dblclick().then(_index.extractOptionFromElement).as('doubleClickedPlainOption');
});
(0, _cypressCucumberPreprocessor.When)('the user double clicks an item in the selected list', () => {
  cy.get('{transfer-pickedoptions} {transferoption}').first().dblclick().then(_index.extractOptionFromElement).as('doubleClickedPlainOption');
});
(0, _cypressCucumberPreprocessor.Then)('the highlighted items should be removed from the options list', () => {
  cy.all(() => cy.get('@itemsToBeSelected'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref => {
    let [itemsToBeSelected, $selectableSourceOptions] = _ref;
    const selectableSourceOptions = $selectableSourceOptions.toArray().map(_index.extractOptionFromElement);
    const itemsStillSelectable = itemsToBeSelected.every(itemToBeSelected => {
      const result = selectableSourceOptions.find(_ref2 => {
        let {
          label,
          value
        } = _ref2;
        return label === itemToBeSelected.label && value === itemToBeSelected.value;
      });
      return result;
    });
    expect(itemsStillSelectable).to.equal(false);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the highlighted items should be visible in the selected list', () => {
  cy.all(() => cy.get('@itemsToBeSelected'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref3 => {
    let [itemsToBeSelected, $selectedOptions] = _ref3;
    const selectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement);
    const itemsSelected = itemsToBeSelected.every(itemToBeSelected => selectedOptions.find(_ref4 => {
      let {
        label,
        value
      } = _ref4;
      return label === itemToBeSelected.label && value === itemToBeSelected.value;
    }));
    expect(itemsSelected).to.equal(true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the highlighted items should be appended to the selected list in the order they were highlighted', () => {
  cy.all(() => cy.get('@itemsToBeSelected'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref5 => {
    let [itemsToBeSelected, $selectedOptions] = _ref5;
    const lastNSelectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement).slice(itemsToBeSelected.length * -1);
    expect(itemsToBeSelected).to.eql(lastNSelectedOptions);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the highlighted items should be removed from the selected list', () => {
  cy.all(() => cy.get('@itemsToBeDeselected'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref6 => {
    let [itemsToBeDeselected, $selectedOptions] = _ref6;
    const selectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement);
    const itemsStillSelected = itemsToBeDeselected.every(itemToBeSelected => {
      const result = selectedOptions.find(_ref7 => {
        let {
          label,
          value
        } = _ref7;
        return label === itemToBeSelected.label && value === itemToBeSelected.value;
      });
      return result;
    });
    expect(itemsStillSelected).to.equal(false);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the highlighted items should be visible in the options list', () => {
  cy.all(() => cy.get('@itemsToBeDeselected'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref8 => {
    let [itemsToBeDeselected, $selectedOptions] = _ref8;
    const selectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement);
    const itemsSelectable = itemsToBeDeselected.every(itemToBeSelected => {
      const result = selectedOptions.find(_ref9 => {
        let {
          label,
          value
        } = _ref9;
        return label === itemToBeSelected.label && value === itemToBeSelected.value;
      });
      return result;
    });
    expect(itemsSelectable).to.equal(true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the highlighted items should be in the original options list ordering', () => {
  cy.all(() => cy.window(), () => cy.get('{transfer-sourceoptions} {transferoption}'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref10 => {
    let [win, $selectableSourceOptions, $selectedOptions] = _ref10;
    const selectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement);
    const selectableSourceOptions = $selectableSourceOptions.toArray().map(_index.extractOptionFromElement);
    const allOptionsWithoutSelected = win.options.filter(option => {
      return !selectedOptions.find(_ref11 => {
        let {
          label,
          value
        } = _ref11;
        return option.label === label && option.value === value;
      });
    });
    expect(allOptionsWithoutSelected).to.eql(selectableSourceOptions);
  });
});
(0, _cypressCucumberPreprocessor.Then)('all items should be removed from the options list', () => {
  cy.get('{transfer-sourceoptions} {transferoption}').should('not.exist');
});
(0, _cypressCucumberPreprocessor.Then)('all items removed from options list should be visible in the selected list', () => {
  cy.all(() => cy.get('@itemsToBeSelected'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref12 => {
    let [itemsToBeSelected, $selectedOptions] = _ref12;
    const selectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement);
    const allSelected = itemsToBeSelected.every(option => {
      return selectedOptions.find(_ref13 => {
        let {
          label,
          value
        } = _ref13;
        return option.label === label && option.value === value;
      });
    });
    expect(allSelected).to.equal(true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('all items should be removed from the selected list', () => {
  cy.get('{transfer-pickedoptions} {transferoption}').should('not.exist');
});
(0, _cypressCucumberPreprocessor.Then)('all items removed from selected list should be visible in the options list', () => {
  cy.all(() => cy.get('@itemsToBeDeselected'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref14 => {
    let [itemsToBeDeselected, $selectableSourceOptions] = _ref14;
    const selectableSourceOptions = $selectableSourceOptions.toArray().map(_index.extractOptionFromElement);
    const allSelectable = itemsToBeDeselected.every(option => {
      return selectableSourceOptions.find(_ref15 => {
        let {
          label,
          value
        } = _ref15;
        return option.label === label && option.value === value;
      });
    });
    expect(allSelectable).to.equal(true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the transferred items should be appended to the selected list in the order they were displayed in the options list', () => {
  cy.all(() => cy.get('@itemsToBeSelected'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref16 => {
    let [itemsToBeSelected, $selectedOptions] = _ref16;
    const selectedOptions = $selectedOptions.toArray().map(_index.extractOptionFromElement);
    const previouslySelectedSubset = selectedOptions.slice(-1 * itemsToBeSelected.length);
    expect(itemsToBeSelected).to.eql(previouslySelectedSubset);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the options list items should be ordered in the original order', () => {
  cy.all(() => cy.window(), () => cy.get('{transfer-sourceoptions} {transferoption}'), () => cy.get('{transfer-pickedoptions}').then($pickedOptions => {
    return $pickedOptions.find((0, _parseSelectorWithDataTest.parseSelectorWithDataTest)('{transferoption}'));
  })).should(_ref17 => {
    let [win, $selectableSourceOptions, $pickedOptions] = _ref17;
    const pickedPlainOptions = $pickedOptions.toArray().map(_index.extractOptionFromElement);
    const originalOrderWithoutSelected = win.options.filter(originalOption => {
      return !pickedPlainOptions.find(pickedPlainOption => pickedPlainOption.value === originalOption.value && pickedPlainOption.label === originalOption.label);
    });
    const selectableSourceOptions = $selectableSourceOptions.toArray().map(_index.extractOptionFromElement);
    expect(originalOrderWithoutSelected).to.eql(selectableSourceOptions);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the item should be removed from its options list', () => {
  cy.all(() => cy.get('@doubleClickedPlainOption'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref18 => {
    let [doubleClickedPlainOption, $sourceOptions] = _ref18;
    const sourcePlainOptions = $sourceOptions.toArray().map(_index.extractOptionFromElement);
    const found = sourcePlainOptions.find(sourcePlainOption => sourcePlainOption.value === doubleClickedPlainOption.value && sourcePlainOption.label === doubleClickedPlainOption.label);
    expect(found).to.not.equal(true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the item should be visible at the bottom of the selected list', () => {
  cy.all(() => cy.get('@doubleClickedPlainOption'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref19 => {
    let [doubleClickedPlainOption, $pickedOptions] = _ref19;
    const lastSourcePlainOption = $pickedOptions.last().toArray().map(_index.extractOptionFromElement).pop();
    const doubleClickedOptionIsLast = lastSourcePlainOption.value === doubleClickedPlainOption.value && lastSourcePlainOption.label === doubleClickedPlainOption.label;
    expect(doubleClickedOptionIsLast).to.equal(true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the item should be removed from the selected list', () => {
  cy.all(() => cy.get('@doubleClickedPlainOption'), () => cy.get('{transfer-pickedoptions} {transferoption}')).should(_ref20 => {
    let [doubleClickedPlainOption, $pickedOptions] = _ref20;
    const pickedPlainOptions = $pickedOptions.toArray().map(_index.extractOptionFromElement);
    const found = pickedPlainOptions.find(sourcePlainOption => sourcePlainOption.value === doubleClickedPlainOption.value && sourcePlainOption.label === doubleClickedPlainOption.label);
    expect(found).to.not.equal(true);
  });
});