"use strict";

var _appRuntime = require("@dhis2/app-runtime");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
var _react2 = _interopRequireWildcard(require("react"));
var _sharingAutocomplete = require("./sharing-autocomplete.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
jest.mock('../helpers/index.js', () => ({
  debounce: fn => fn
}));
const Wrapper = () => {
  const [selected, setSelected] = (0, _react2.useState)();
  return /*#__PURE__*/_react2.default.createElement(_sharingAutocomplete.SharingAutocomplete, {
    selected: selected,
    onSelection: user => setSelected(user === null || user === void 0 ? void 0 : user.displayName)
  });
};
describe('SharingAutocomplete', () => {
  it('hides autocompletion results after selection', async () => {
    const userDisplayName = 'Some User';
    const dataProviderData = {
      'sharing/search': jest.fn(() => ({
        users: [{
          id: 'user-1',
          displayName: userDisplayName
        }]
      }))
    };
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_appRuntime.CustomDataProvider, {
      data: dataProviderData
    }, /*#__PURE__*/_react2.default.createElement(Wrapper, null)));
    const searchString = userDisplayName.slice(0, 3);
    _userEvent.default.type(_react.screen.getByRole('textbox'), searchString);
    expect(_react.screen.getByRole('textbox')).toHaveValue(searchString);
    await (0, _react.waitForElementToBeRemoved)(() => _react.screen.getByRole('progressbar'));
    _userEvent.default.click(_react.screen.getByRole('menuitem'));
    expect(_react.screen.getByRole('textbox')).toHaveValue(userDisplayName);
    try {
      await (0, _react.waitFor)(() => _react.screen.getByRole('menuitem'), {
        timeout: 1
      });
    } catch (error) {
      if (!error.message.startsWith('Unable to find role="menuitem"')) {
        throw error;
      }
    }
    expect(_react.screen.queryByRole('menuitem')).not.toBeInTheDocument();
  });
});