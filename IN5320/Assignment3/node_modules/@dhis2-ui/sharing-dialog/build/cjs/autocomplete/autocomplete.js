"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Autocomplete = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _input = require("@dhis2-ui/input");
var _menu = require("@dhis2-ui/menu");
var _size = _interopRequireDefault(require("@react-hook/size"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _index = _interopRequireDefault(require("../locales/index.js"));
var _menuPopup = require("./menu-popup.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const Autocomplete = _ref => {
  let {
    dataTest = 'dhis2-sharingdialog-autocomplete',
    inputWidth,
    label,
    loading,
    onClose,
    onSearch,
    onSelect,
    placeholder,
    search,
    searchResults
  } = _ref;
  const wrapper = (0, _react.useRef)(null);
  const [menuWidth] = (0, _size.default)(wrapper);
  const {
    isDisconnected: offline
  } = (0, _appRuntime.useDhis2ConnectionStatus)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    ref: wrapper
  }, /*#__PURE__*/_react.default.createElement(_input.InputField, {
    label: label,
    loading: loading,
    placeholder: placeholder,
    onChange: _ref2 => {
      let {
        value
      } = _ref2;
      return onSearch(value);
    },
    value: search,
    inputWidth: inputWidth,
    disabled: offline,
    helpText: offline ? _index.default.t('Not available offline') : ''
  })), searchResults.length > 0 && /*#__PURE__*/_react.default.createElement(_menuPopup.MenuPopup, {
    onClick: onClose,
    menuWidth: `${menuWidth}px`,
    menuRef: wrapper,
    dataTest: `${dataTest}-menu`
  }, /*#__PURE__*/_react.default.createElement(_menu.Menu, null, searchResults.map(result => /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    key: result.id,
    label: result.displayName,
    value: result.id,
    onClick: _ref3 => {
      let {
        value
      } = _ref3;
      return onSelect(value);
    }
  })))));
};
exports.Autocomplete = Autocomplete;
Autocomplete.propTypes = {
  searchResults: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayName: _propTypes.default.string,
    id: _propTypes.default.string
  })).isRequired,
  dataTest: _propTypes.default.string,
  inputWidth: _propTypes.default.string,
  label: _propTypes.default.string,
  loading: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  search: _propTypes.default.string,
  onClose: _propTypes.default.func,
  onSearch: _propTypes.default.func,
  onSelect: _propTypes.default.func
};