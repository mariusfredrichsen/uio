import _JSXStyle from "styled-jsx/style";
import { useDataQuery, useConfig } from '@dhis2/app-runtime';
import { colors } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React, { useMemo } from 'react';
import Apps from './apps.js';
import { HeaderBarContextProvider } from './header-bar-context.js';
import { joinPath } from './join-path.js';
import i18n from './locales/index.js';
import { Logo } from './logo.js';
import { Notifications } from './notifications.js';
import { OnlineStatus } from './online-status.js';
import Profile from './profile.js';
import { Title } from './title.js';
const query = {
  title: {
    resource: 'systemSettings/applicationTitle'
  },
  help: {
    resource: 'systemSettings/helpPageLink'
  },
  user: {
    resource: 'me',
    params: {
      fields: ['authorities', 'avatar', 'email', 'name', 'settings']
    }
  },
  apps: {
    resource: 'action::menu/getModules'
  },
  notifications: {
    resource: 'me/dashboard'
  }
};
export const HeaderBar = _ref => {
  var _data$user$avatar;
  let {
    appName,
    className,
    updateAvailable,
    onApplyAvailableUpdate
  } = _ref;
  const {
    appName: configAppName,
    baseUrl,
    pwaEnabled
  } = useConfig();
  const {
    loading,
    error,
    data
  } = useDataQuery(query);
  const apps = useMemo(() => {
    const getPath = path => path.startsWith('http:') || path.startsWith('https:') ? path : joinPath(baseUrl, 'api', path);
    return data === null || data === void 0 ? void 0 : data.apps.modules.map(app => ({
      ...app,
      icon: getPath(app.icon),
      defaultAction: getPath(app.defaultAction)
    }));
  }, [data, baseUrl]);

  // See https://jira.dhis2.org/browse/LIBS-180
  if (!loading && !error) {
    // TODO: This will run every render which is probably wrong!
    // Also, setting the global locale shouldn't be done in the headerbar
    const locale = data.user.settings.keyUiLocale || 'en';
    i18n.setDefaultNamespace('default');
    i18n.changeLanguage(locale);
  }
  return /*#__PURE__*/React.createElement(HeaderBarContextProvider, {
    updateAvailable: updateAvailable,
    onApplyAvailableUpdate: onApplyAvailableUpdate
  }, /*#__PURE__*/React.createElement("header", {
    className: _JSXStyle.dynamic([["4230161118", [colors.white]]]) + " " + (className || "")
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["4230161118", [colors.white]]]) + " " + "main"
  }, !loading && !error && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Logo, null), /*#__PURE__*/React.createElement(Title, {
    app: appName || configAppName,
    instance: data.title.applicationTitle
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["4230161118", [colors.white]]]) + " " + "right-control-spacer"
  }), pwaEnabled && /*#__PURE__*/React.createElement(OnlineStatus, null), /*#__PURE__*/React.createElement(Notifications, {
    interpretations: data.notifications.unreadInterpretations,
    messages: data.notifications.unreadMessageConversations,
    userAuthorities: data.user.authorities
  }), /*#__PURE__*/React.createElement(Apps, {
    apps: apps
  }), /*#__PURE__*/React.createElement(Profile, {
    name: data.user.name,
    email: data.user.email,
    avatarId: (_data$user$avatar = data.user.avatar) === null || _data$user$avatar === void 0 ? void 0 : _data$user$avatar.id,
    helpUrl: data.help.helpPageLink
  }))), pwaEnabled && !loading && !error && /*#__PURE__*/React.createElement(OnlineStatus, {
    dense: true
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "4230161118",
    dynamic: [colors.white]
  }, [`.main.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;background-color:#2c6693;color:${colors.white};height:48px;}`, ".right-control-spacer.__jsx-style-dynamic-selector{margin-inline-start:auto;}"])));
};
HeaderBar.propTypes = {
  appName: PropTypes.string,
  className: PropTypes.string,
  updateAvailable: PropTypes.bool,
  onApplyAvailableUpdate: PropTypes.func
};