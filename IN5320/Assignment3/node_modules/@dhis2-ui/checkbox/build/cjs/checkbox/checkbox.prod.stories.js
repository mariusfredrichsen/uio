"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WarningDense = exports.Warning = exports.ValidDense = exports.Valid = exports.RTL = exports.IndeterminateDense = exports.Indeterminate = exports.ImageLabelDense = exports.ImageLabel = exports.FocusedUncheckedDense = exports.FocusedUnchecked = exports.FocusedCheckedDense = exports.FocusedChecked = exports.ErrorDense = exports.Error = exports.DisabledDense = exports.Disabled = exports.DefaultDense = exports.Default = exports.CheckedDense = exports.Checked = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _index = require("./index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const subtitle = 'A checkbox is a control that allows a user to toggle an option.';
const description = `
Checkboxes are used when an option can be toggled on or off. Toggling a checkbox on (true) is always considered a positive action and should reflect a positive/true/on state. Multiple checkboxes can be used in a list where a user can toggle multiple elements.

Do not use checkboxes in a list of several options where only a single option can be toggled, use [radio buttons](../?path=/docs/forms-radio-radio--default) here instead.

If there are many options that need to select from, consider using a [select](../?path=/docs/forms-single-select-single-select--with-options) instead.

\`\`\`js
import { Checkbox } from '@dhis2/ui'
\`\`\`
`;
window.onChange = (payload, event) => {
  console.log('onClick payload', payload);
  console.log('onClick event', event);
};
window.onFocus = (payload, event) => {
  console.log('onFocus payload', payload);
  console.log('onFocus event', event);
};
window.onBlur = (payload, event) => {
  console.log('onBlur payload', payload);
  console.log('onBlur event', event);
};
const onChange = function () {
  return window.onChange(...arguments);
};
const onFocus = function () {
  return window.onFocus(...arguments);
};
const onBlur = function () {
  return window.onBlur(...arguments);
};
const defaultArgs = {
  name: 'Ex',
  label: 'Checkbox',
  onChange,
  onFocus,
  onBlur
};
const uniqueOnStateArgType = {
  table: {
    type: {
      summary: 'bool',
      detail: "'checked' and 'indeterminate' are mutually exclusive props"
    }
  },
  control: {
    type: 'boolean'
  }
};
var _default = exports.default = {
  title: 'Checkbox',
  component: _index.Checkbox,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  },
  // Sets default args on all stories unless overridden
  args: {
    ...defaultArgs
  },
  argTypes: {
    checked: {
      ...uniqueOnStateArgType
    },
    indeterminate: {
      ...uniqueOnStateArgType
    },
    valid: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: {
      ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_index.Checkbox, args);
const CheckedUncheckedTemplate = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.Checkbox, args), /*#__PURE__*/_react.default.createElement(_index.Checkbox, _extends({
  checked: true
}, args)));
const Default = exports.Default = Template.bind({});
Default.args = {
  value: 'default'
};
const FocusedUnchecked = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.Checkbox, _extends({
  initialFocus: true,
  value: "default",
  className: "initially-focused"
}, args)), /*#__PURE__*/_react.default.createElement(_index.Checkbox, _extends({
  value: "default2",
  className: "initially-unfocused"
}, args)));
exports.FocusedUnchecked = FocusedUnchecked;
FocusedUnchecked.storyName = 'Focused unchecked';
/**
 * 'initialFocus' causes docs page to scroll away every time a control is
 * changed, so it's disabled
 */
FocusedUnchecked.parameters = {
  docs: {
    disable: true
  }
};
const FocusedChecked = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.Checkbox, _extends({
  initialFocus: true,
  checked: true,
  value: "default"
}, args)), /*#__PURE__*/_react.default.createElement(_index.Checkbox, _extends({
  checked: true,
  value: "default2"
}, args)));
exports.FocusedChecked = FocusedChecked;
FocusedChecked.storyName = 'Focused checked';
FocusedChecked.parameters = {
  docs: {
    disable: true
  }
};
const Checked = exports.Checked = Template.bind({});
Checked.args = {
  checked: true,
  value: 'checked'
};
const Indeterminate = exports.Indeterminate = Template.bind({});
Indeterminate.args = {
  indeterminate: true,
  value: 'checked'
};
const Disabled = exports.Disabled = CheckedUncheckedTemplate.bind({});
Disabled.args = {
  disabled: true,
  value: 'disabled'
};
const Valid = exports.Valid = CheckedUncheckedTemplate.bind({});
Valid.args = {
  valid: true,
  value: 'valid'
};
const Warning = exports.Warning = CheckedUncheckedTemplate.bind({});
Warning.args = {
  warning: true,
  value: 'warning'
};
const Error = exports.Error = CheckedUncheckedTemplate.bind({});
Error.args = {
  error: true,
  value: 'error'
};
const ImageLabel = exports.ImageLabel = Template.bind({});
ImageLabel.args = {
  label: /*#__PURE__*/_react.default.createElement("img", {
    src: "https://picsum.photos/id/82/200/100"
  }),
  value: 'with-help'
};
const DefaultDense = exports.DefaultDense = Template.bind({});
DefaultDense.args = {
  dense: true,
  value: 'default'
};
DefaultDense.storyName = 'Default - Dense';
const FocusedUncheckedDense = exports.FocusedUncheckedDense = Template.bind({});
FocusedUncheckedDense.args = {
  dense: true,
  initialFocus: true,
  value: 'default'
};
FocusedUncheckedDense.storyName = 'Focused unchecked - Dense';
FocusedUncheckedDense.parameters = {
  docs: {
    disable: true
  }
};
const FocusedCheckedDense = exports.FocusedCheckedDense = Template.bind({});
FocusedCheckedDense.args = {
  ...FocusedUncheckedDense.args,
  checked: true
};
FocusedCheckedDense.storyName = 'Focused checked - Dense';
FocusedCheckedDense.parameters = {
  docs: {
    disable: true
  }
};
const CheckedDense = exports.CheckedDense = Template.bind({});
CheckedDense.args = {
  dense: true,
  checked: true,
  value: 'checked'
};
CheckedDense.storyName = 'Checked - Dense';
const IndeterminateDense = exports.IndeterminateDense = Template.bind({});
IndeterminateDense.args = {
  dense: true,
  indeterminate: true,
  value: 'checked'
};
IndeterminateDense.storyName = 'Indeterminate - Dense';
const DisabledDense = exports.DisabledDense = CheckedUncheckedTemplate.bind({});
DisabledDense.args = {
  ...Disabled.args,
  dense: true
};
DisabledDense.storyName = 'Disabled - Dense';
const ValidDense = exports.ValidDense = CheckedUncheckedTemplate.bind({});
ValidDense.args = {
  ...Valid.args,
  dense: true
};
ValidDense.storyName = 'Valid - Dense';
const WarningDense = exports.WarningDense = CheckedUncheckedTemplate.bind({});
WarningDense.args = {
  ...Warning.args,
  dense: true
};
WarningDense.storyName = 'Warning - Dense';
const ErrorDense = exports.ErrorDense = CheckedUncheckedTemplate.bind({});
ErrorDense.args = {
  ...Error.args,
  dense: true
};
ErrorDense.storyName = 'Error - Dense';
const ImageLabelDense = exports.ImageLabelDense = Template.bind({});
ImageLabelDense.args = {
  ...ImageLabel.args,
  dense: true
};
ImageLabelDense.storyName = 'Image label - Dense';
const RTL = args => /*#__PURE__*/_react.default.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/_react.default.createElement(_index.Checkbox, args));
exports.RTL = RTL;