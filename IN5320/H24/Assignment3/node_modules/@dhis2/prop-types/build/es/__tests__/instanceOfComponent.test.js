import propTypes from 'prop-types'; // eslint-disable-next-line no-unused-vars

import React from 'react';
import { instanceOfComponent } from '../instanceOfComponent.js';

const toWarning = message => `Warning: Failed prop type: ${message}`;

const Foo = () => /*#__PURE__*/React.createElement("span", null);

const Bar = () => /*#__PURE__*/React.createElement("span", null);

Bar.displayName = 'Bar';
describe('instanceOfComponent', () => {
  jest.spyOn(console, 'error').mockImplementation(() => null);
  afterEach(() => console.error.mockClear());
  const validator = instanceOfComponent(Foo);
  describe('Not inside arrayOf - Valid', () => {
    it('does not return an error with valid props when exactly max length', () => {
      const props = {
        foo: /*#__PURE__*/React.createElement(Foo, null)
      };
      propTypes.checkPropTypes({
        foo: validator
      }, props, 'prop', 'TestComponent');
      expect(console.error).toBeCalledTimes(0);
    });
  });
  describe('Not inside arrayOf - Invalid', () => {
    it('does not return an error with valid props when exactly max length', () => {
      const props = {
        foo: /*#__PURE__*/React.createElement(Bar, null)
      };
      const errorMessage = toWarning('Invalid prop `foo` supplied to `TestComponent`, expected an instance of `Foo` but found an instance of `Bar`.');
      propTypes.checkPropTypes({
        foo: validator
      }, props, 'prop', 'TestComponent');
      expect(console.error).toBeCalledTimes(1);
      expect(console.error).toBeCalledWith(errorMessage);
    });
  });
  describe('Inside arrayOf - Valid', () => {
    it('does not return an error with valid props when exactly max length', () => {
      const props = {
        foo: [/*#__PURE__*/React.createElement(Foo, null), /*#__PURE__*/React.createElement(Foo, null), /*#__PURE__*/React.createElement(Foo, null)]
      };
      propTypes.checkPropTypes({
        foo: propTypes.arrayOf(validator)
      }, props, 'prop', 'TestComponent');
      expect(console.error).toBeCalledTimes(0);
    });
  });
  describe('Inside arrayOf - Invalid', () => {
    it('does not return an error with valid props when exactly max length', () => {
      const props = {
        foo: [/*#__PURE__*/React.createElement(Foo, null), /*#__PURE__*/React.createElement(Bar, null), /*#__PURE__*/React.createElement(Foo, null)]
      };
      const errorMessage = toWarning('Invalid prop `foo[1]` supplied to `TestComponent`, expected an instance of `Foo` but found an instance of `Bar`.');
      propTypes.checkPropTypes({
        foo: propTypes.arrayOf(validator)
      }, props, 'prop', 'TestComponent');
      expect(console.error).toBeCalledTimes(1);
      expect(console.error).toBeCalledWith(errorMessage);
    });
  });
});