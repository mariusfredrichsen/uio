"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dhis2CalendarsMap = require("../../constants/dhis2CalendarsMap");
var _index = require("../../utils/index");
var _periodTypeGroups = require("../period-type-groups");
var _getDailyFixedPeriodByDate = _interopRequireDefault(require("./get-daily-fixed-period-by-date"));
var _getMonthlyFixedPeriodByDate = _interopRequireDefault(require("./get-monthly-fixed-period-by-date"));
var _getWeeklyFixedPeriodByDate = _interopRequireDefault(require("./get-weekly-fixed-period-by-date"));
var _getYearlyFixedPeriodByDate = _interopRequireDefault(require("./get-yearly-fixed-period-by-date"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getFixedPeriodByDate = _ref => {
  var _dhis2CalendarsMap$re;
  let {
    periodType,
    date,
    calendar: requestedCalendar,
    locale = 'en'
  } = _ref;
  const calendar = (0, _index.getCustomCalendarIfExists)((_dhis2CalendarsMap$re = _dhis2CalendarsMap.dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);

  // const date = fromAnyDate({ date: dateInput, calendar })
  const payload = {
    periodType,
    date,
    calendar,
    locale
  };
  if (periodType === 'DAILY') {
    return (0, _getDailyFixedPeriodByDate.default)(payload);
  }
  if (_periodTypeGroups.monthlyFixedPeriodTypes.includes(periodType)) {
    return (0, _getMonthlyFixedPeriodByDate.default)(payload);
  }
  if (_periodTypeGroups.weeklyFixedPeriodTypes.includes(periodType)) {
    return (0, _getWeeklyFixedPeriodByDate.default)(payload);
  }
  if (_periodTypeGroups.yearlyFixedPeriodTypes.includes(periodType)) {
    return (0, _getYearlyFixedPeriodByDate.default)(payload);
  }
  throw new Error(`can not generate period for unrecognised period type "${periodType}"`);
};
var _default = getFixedPeriodByDate;
exports.default = _default;