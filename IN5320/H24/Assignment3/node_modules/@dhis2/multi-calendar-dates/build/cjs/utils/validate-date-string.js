"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateDateString = validateDateString;
var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));
var _polyfill = require("@js-temporal/polyfill");
var _dhis2CalendarsMap = require("../constants/dhis2CalendarsMap");
var _nepaliCalendarData = require("../custom-calendars/nepaliCalendarData");
var _extractDatePartsFromDateString = require("./extract-date-parts-from-date-string");
var _helpers = require("./helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function validateNepaliDate(year, month, day) {
  const nepaliYearData = _nepaliCalendarData.NEPALI_CALENDAR_DATA[year];
  if (!nepaliYearData) {
    return {
      isValid: false,
      errorMessage: _d2I18n.default.t(`Year {{year}} is out of range.`, {
        year
      })
    };
  }
  if (month < 1 || month > 12) {
    return {
      isValid: false,
      errorMessage: _d2I18n.default.t(`Month {{month}} is out of range | 1 <= {{month}} <= 12.`, {
        month
      })
    };
  }
  const daysInMonth = nepaliYearData[month];
  if (day < 1 || day > daysInMonth) {
    return {
      isValid: false,
      errorMessage: _d2I18n.default.t(`Day {{day}} is out of range | 1 <= {{day}} <= {{daysInMonth}}.`, {
        day,
        daysInMonth
      })
    };
  }
  return {
    isValid: true,
    errorMessage: ''
  };
}
function validateDateString(dateString) {
  var _dhis2CalendarsMap$ca;
  let {
    calendar = 'gregory',
    minDateString,
    maxDateString,
    strictValidation = true,
    format
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const resolvedCalendar = (0, _helpers.getCustomCalendarIfExists)((_dhis2CalendarsMap$ca = _dhis2CalendarsMap.dhis2CalendarsMap[calendar]) !== null && _dhis2CalendarsMap$ca !== void 0 ? _dhis2CalendarsMap$ca : calendar);
  try {
    // Will throw if the format of the date is incorrect
    if (!dateString) {
      throw new Error(_d2I18n.default.t(`Date is not given`));
    }
    const dateParts = (0, _extractDatePartsFromDateString.extractDatePartsFromDateString)(dateString, format);
    if (resolvedCalendar.toString() === 'nepali') {
      const {
        isValid,
        errorMessage
      } = validateNepaliDate(dateParts.year, dateParts.month, dateParts.day);
      if (!isValid) {
        throw new Error(errorMessage);
      }
    }

    // Will throw if the year, month or day is out of range
    const date = _polyfill.Temporal.PlainDate.from({
      ...dateParts,
      calendar: resolvedCalendar
    }, {
      overflow: 'reject'
    });
    let warningMessage = '';
    if (minDateString) {
      const minDateParts = (0, _extractDatePartsFromDateString.extractDatePartsFromDateString)(minDateString);
      const minDate = _polyfill.Temporal.PlainDate.from({
        ...minDateParts,
        calendar: resolvedCalendar
      });
      if (_polyfill.Temporal.PlainDate.compare(date, minDate) < 0) {
        if (strictValidation) {
          throw new Error(_d2I18n.default.t(`Date {{dateString}} is less than the minimum allowed date {{minDateString}}.`, {
            dateString,
            minDateString
          }));
        } else {
          warningMessage = _d2I18n.default.t(`Date {{dateString}} is less than the minimum allowed date {{minDateString}}.`, {
            dateString,
            minDateString
          });
        }
      }
    }
    if (maxDateString) {
      const maxDateParts = (0, _extractDatePartsFromDateString.extractDatePartsFromDateString)(maxDateString);
      const maxDate = _polyfill.Temporal.PlainDate.from({
        ...maxDateParts,
        calendar: resolvedCalendar
      });
      if (_polyfill.Temporal.PlainDate.compare(date, maxDate) > 0) {
        if (strictValidation) {
          throw new Error(_d2I18n.default.t(`Date {{dateString}} is greater than the maximum allowed date {{maxDateString}}.`, {
            dateString,
            maxDateString
          }));
        } else {
          warningMessage = _d2I18n.default.t(`Date {{dateString}} is greater than the maximum allowed date {{maxDateString}}.`, {
            dateString,
            maxDateString
          });
        }
      }
    }
    return {
      isValid: true,
      errorMessage: '',
      warningMessage
    };
  } catch (e) {
    return {
      isValid: false,
      errorMessage: e.message,
      warningMessage: ''
    };
  }
}