"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _polyfill = require("@js-temporal/polyfill");
var _index = require("../../utils/index");
var _localisationHelpers = _interopRequireDefault(require("../../utils/localisationHelpers"));
var _periodTypeGroups = require("../period-type-groups");
var _getYearlyStartMonthByPeriodType = _interopRequireDefault(require("./get-yearly-start-month-by-period-type"));
var _yearlyMonthValueKeys = _interopRequireDefault(require("./yearly-month-value-keys"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const buildYearlyFixedPeriod = _ref => {
  let {
    periodType,
    year,
    locale,
    calendar
  } = _ref;
  const month = (0, _getYearlyStartMonthByPeriodType.default)(periodType);
  const value = buildId({
    periodType,
    year,
    month
  });
  const monthDateNumber = month.toString().padStart(2, '0');
  const startDate = (0, _index.fromAnyDate)({
    date: `${year}-${monthDateNumber}-01`,
    calendar
  });

  // @TODO: startDate.add({ years: 1 }).subtract({ days: 1 }) produces
  // wrong values when using nepali calendar
  const endDate = (0, _index.fromAnyDate)({
    date: `${year + 1}-${monthDateNumber}-01`,
    calendar
  }).subtract({
    days: 1
  });
  const name = buildLabel(periodType, startDate, {
    locale,
    calendar
  });
  return {
    periodType,
    id: value,
    iso: value,
    name,
    displayName: name,
    startDate: (0, _index.formatDate)(startDate, 'startOfMonth'),
    endDate: (0, _index.formatDate)(endDate, 'endOfMonth')
  };
};
var _default = buildYearlyFixedPeriod;
exports.default = _default;
const buildId = _ref2 => {
  let {
    periodType,
    year,
    month
  } = _ref2;
  if (periodType === 'YEARLY') {
    return year.toString();
  }
  // financial year
  if (isFinancialYear(periodType)) {
    const yearType = _yearlyMonthValueKeys.default[month];
    return `${year}${yearType}`;
  }
  throw new Error(`can not build value for unrecognised yearly type "${periodType}"`);
};
const isFinancialYear = periodType => {
  return _periodTypeGroups.financialYearFixedPeriodTypes.includes(periodType);
};
const buildLabel = (periodType, currentYearDate, options) => {
  if (periodType === 'YEARLY') {
    return currentYearDate.year.toString();
  }
  if ((0, _index.isCustomCalendar)(options.calendar)) {
    return buildLabelForCustomCalendar(currentYearDate, options);
  }
  const format = {
    month: 'long',
    year: 'numeric',
    calendar: options.calendar
  };
  const fromYear = _localisationHelpers.default.localiseMonth(currentYearDate, options, format);
  const toYear = _localisationHelpers.default.localiseMonth(currentYearDate.add({
    months: currentYearDate.monthsInYear - 1
  }), options, format);
  let result = `${fromYear} - ${toYear}`;

  // needed for Ethiopic calendar
  result = result.replace(/ERA\d+\s*/g, '').trim();
  return result;
};
const buildLabelForCustomCalendar = (date, options) => {
  const localiseMonth = dateToDisplay => `${_localisationHelpers.default.localiseMonth(dateToDisplay, options, {})} ${dateToDisplay.year}`;
  const nextYearDate = _polyfill.Temporal.PlainDate.from({
    year: date.year + 1,
    month: date.month - 1,
    day: 1,
    calendar: options.calendar
  });
  const result = `${localiseMonth(date)} - ${localiseMonth(nextYearDate)}`;
  return result;
};