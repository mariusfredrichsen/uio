"use strict";

var _polyfill = require("@js-temporal/polyfill");
var _react = require("@testing-library/react");
var _reactHooks = require("@testing-library/react-hooks");
var _react2 = _interopRequireDefault(require("react"));
var _localisationHelpers = _interopRequireDefault(require("../utils/localisationHelpers"));
var _useDatePicker = require("./useDatePicker");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
beforeEach(() => {
  // 13 October 2021 UTC
  jest.spyOn(Date, 'now').mockReturnValue(1634089600000);
});
afterEach(jest.clearAllMocks);
jest.mock('@js-temporal/polyfill', () => ({
  ...jest.requireActual('@js-temporal/polyfill'),
  Intl: {
    ...jest.requireActual('@js-temporal/polyfill').Intl
  } // this is needed, otherwise jest spying fails with " Cannot assign to read only property 'DateTimeFormat'"
}));

const renderCalendar = function (weekDayFormat, locale) {
  let calendar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'gregory';
  const onDateSelect = jest.fn();
  const date = '2018-01-22';
  const options = {
    locale,
    calendar,
    timeZone: 'Africa/Khartoum',
    weekDayFormat
  };
  const {
    result
  } = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
    onDateSelect,
    date,
    options
  }));
  return result.current;
};
describe('useDatePicker hook', () => {
  describe('calendar info generation', () => {
    it('should render a Gregorian calendar', () => {
      var _renderedHook$result;
      const onDateSelect = jest.fn();
      const date = '2018-01-22';
      const options = {
        locale: 'en-GB',
        timeZone: 'Africa/Khartoum'
        // no calendar should default to iso8601
      };

      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = (_renderedHook$result = renderedHook.result) === null || _renderedHook$result === void 0 ? void 0 : _renderedHook$result.current;
      expect(result.calendarWeekDays.map(week => week.map(d => d.label))).toEqual([['1', '2', '3', '4', '5', '6', '7'], ['8', '9', '10', '11', '12', '13', '14'], ['15', '16', '17', '18', '19', '20', '21'], ['22', '23', '24', '25', '26', '27', '28'], ['29', '30', '31', '1', '2', '3', '4']]);
      expect(result.currMonth.label).toEqual('January');
      expect(result.nextMonth.label).toEqual('February');
      expect(result.prevMonth.label).toEqual('December');
      expect(result.currYear.label).toEqual('2018');
      expect(result.nextYear.label).toEqual('2019');
      expect(result.prevYear.label).toEqual('2017');
      expect(result.weekDayLabels).toEqual(['M', 'T', 'W', 'T', 'F', 'S', 'S']);
    });
    it('should render an Islamic calendar in Arabic', () => {
      var _renderdHook$result;
      const onDateSelect = jest.fn();
      const date = '1439-01-22';
      const options = {
        locale: 'ar-EG',
        calendar: 'islamic-civil',
        timeZone: 'Africa/Khartoum',
        weekDayFormat: 'long'
      };
      const renderdHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = (_renderdHook$result = renderdHook.result) === null || _renderdHook$result === void 0 ? void 0 : _renderdHook$result.current;
      expect(result.currMonth.label).toEqual('محرم');
      expect(result.nextMonth.label).toEqual('صفر');
      expect(result.prevMonth.label).toEqual('ذو الحجة');
      expect(result.currYear.label).toEqual('١٤٣٩ هـ');
      expect(result.nextYear.label).toEqual('١٤٤٠ هـ');
      expect(result.prevYear.label).toEqual('١٤٣٨ هـ');
      expect(result.weekDayLabels).toEqual(['الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت', 'الأحد']);
      expect(result.calendarWeekDays.map(week => week.map(d => d.label))).toEqual([['٢٦', '٢٧', '٢٨', '٢٩', '١', '٢', '٣'], ['٤', '٥', '٦', '٧', '٨', '٩', '١٠'], ['١١', '١٢', '١٣', '١٤', '١٥', '١٦', '١٧'], ['١٨', '١٩', '٢٠', '٢١', '٢٢', '٢٣', '٢٤'], ['٢٥', '٢٦', '٢٧', '٢٨', '٢٩', '٣٠', '١']]);
    });
    it('should render an Ethiopic calendar in Amharic', () => {
      var _renderedHook$result2;
      const onDateSelect = jest.fn();
      const date = '2015-01-22';
      const options = {
        locale: 'am-ET',
        calendar: 'ethiopic',
        timeZone: 'Africa/Khartoum',
        weekDayFormat: 'long'
      };
      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = renderedHook === null || renderedHook === void 0 ? void 0 : (_renderedHook$result2 = renderedHook.result) === null || _renderedHook$result2 === void 0 ? void 0 : _renderedHook$result2.current;
      expect(result.currMonth.label).toEqual('መስከረም');
      expect(result.nextMonth.label).toEqual('ጥቅምት');
      expect(result.prevMonth.label).toEqual('ጳጉሜን');
      expect(result.currYear.label).toEqual('2015');
      expect(result.nextYear.label).toEqual('2016');
      expect(result.prevYear.label).toEqual('2014');
      expect(result.weekDayLabels).toEqual(['ሰኞ', 'ማክሰኞ', 'ረቡዕ', 'ሐሙስ', 'ዓርብ', 'ቅዳሜ', 'እሑድ']);
      expect(result.calendarWeekDays.map(week => week.map(d => d.label))).toEqual([['30', '1', '2', '3', '4', '5', '1'], ['2', '3', '4', '5', '6', '7', '8'], ['9', '10', '11', '12', '13', '14', '15'], ['16', '17', '18', '19', '20', '21', '22'], ['23', '24', '25', '26', '27', '28', '29'], ['30', '1', '2', '3', '4', '5', '6']]);
    });
  });
  describe('week format display', () => {
    describe('rendering Arabic day names', () => {
      it('should render long Arabic names', () => {
        const {
          weekDayLabels
        } = renderCalendar('long', 'ar-EG');
        expect(weekDayLabels).toEqual(['الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت', 'الأحد']);
      });
      it('should render short Arabic names', () => {
        const {
          weekDayLabels
        } = renderCalendar('short', 'ar-EG');
        expect(weekDayLabels).toEqual(['الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت', 'الأحد']);
      });
      it('should render narrow Arabic names', () => {
        const {
          weekDayLabels
        } = renderCalendar('narrow', 'ar-EG');
        expect(weekDayLabels).toEqual(['ن', 'ث', 'ر', 'خ', 'ج', 'س', 'ح']);
      });
    });
    describe('rendering English day names', () => {
      it('should render long English names', () => {
        const {
          weekDayLabels
        } = renderCalendar('long', 'en');
        expect(weekDayLabels).toEqual(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']);
      });
      it('should render short English names', () => {
        const {
          weekDayLabels
        } = renderCalendar('short', 'en');
        expect(weekDayLabels).toEqual(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']);
      });
      it('should render narrow English names', () => {
        const {
          weekDayLabels
        } = renderCalendar('narrow', 'en');
        expect(weekDayLabels).toEqual(['M', 'T', 'W', 'T', 'F', 'S', 'S']);
      });
    });
  });
  describe('overriding numbering system', () => {
    it('should use passed numbering system regardless of locale', () => {
      var _renderedHook$result3;
      const onDateSelect = jest.fn();
      const date = '2018-01-22';
      const options = {
        locale: 'en-GB',
        calendar: 'gregory',
        numberingSystem: 'arab'
      };
      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = renderedHook === null || renderedHook === void 0 ? void 0 : (_renderedHook$result3 = renderedHook.result) === null || _renderedHook$result3 === void 0 ? void 0 : _renderedHook$result3.current;
      expect(result.calendarWeekDays.map(week => week.map(d => d.label)).flat()).toContain('٢٨');
      expect(result.currYear.label).toEqual('٢٠١٨');
      expect(result.nextYear.label).toEqual('٢٠١٩');
      expect(result.prevYear.label).toEqual('٢٠١٧');
    });
  });
  describe('highlighting today', () => {
    const getDayByDate = (calendarWeekDays, dayToFind) => {
      const days = calendarWeekDays.flatMap(week => week);
      return days.filter(day => day.calendarDate === dayToFind);
    };
    it('should highlight today date in a an ethiopic calendar', () => {
      var _matches$;
      const date = `2014-02-03`; // today mock date in ethiopic
      const options = {
        calendar: 'ethiopic'
      };
      const {
        result
      } = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect: jest.fn(),
        date,
        options
      }));
      const matches = getDayByDate(result.current.calendarWeekDays, date);
      expect((_matches$ = matches[0]) === null || _matches$ === void 0 ? void 0 : _matches$.isToday).toEqual(true);
      expect(matches.length).toEqual(1);
    });
    it('should highlight today date in a a nepali calendar', () => {
      var _matches$2;
      const date = `2078-06-27`; // today mock date in nepali
      const options = {
        calendar: 'nepali',
        timeZone: 'UTC'
      };
      const {
        result
      } = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect: jest.fn(),
        date,
        options
      }));
      const matches = getDayByDate(result.current.calendarWeekDays, date);
      expect((_matches$2 = matches[0]) === null || _matches$2 === void 0 ? void 0 : _matches$2.isToday).toEqual(true);
      expect(matches.length).toEqual(1);
    });
  });
});
describe('custom calendars', () => {
  describe('nepali calendar', () => {
    it('should return the Nepali calendar info in nepali', () => {
      var _renderedHook$result4;
      const onDateSelect = jest.fn();
      const date = '2079-01-12';
      const options = {
        locale: 'ne-NP',
        calendar: 'nepali',
        timeZone: 'Africa/Khartoum'
      };
      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = renderedHook === null || renderedHook === void 0 ? void 0 : (_renderedHook$result4 = renderedHook.result) === null || _renderedHook$result4 === void 0 ? void 0 : _renderedHook$result4.current;
      expect(result.calendarWeekDays.map(week => week.map(d => d.label))).toEqual([['२८', '२९', '३०', '१', '२', '३', '४'], ['५', '६', '७', '८', '९', '१०', '११'], ['१२', '१३', '१४', '१५', '१६', '१७', '१८'], ['१९', '२०', '२१', '२२', '२३', '२४', '२५'], ['२६', '२७', '२८', '२९', '३०', '३१', '१']]);
      expect(result.currMonth.label).toEqual('बैशाख');
      expect(result.nextMonth.label).toEqual('जेठ');
      expect(result.prevMonth.label).toEqual('चैत');
      expect(result.currYear.label).toEqual(2079);
      expect(result.nextYear.label).toEqual(2080);
      expect(result.prevYear.label).toEqual(2078);
      expect(result.weekDayLabels).toEqual(['सोम', 'मंगल', 'बुध', 'बिही', 'शुक्र', 'शनि', 'आइत']);
    });
    it('should return the Nepali calendar info in latin letters', () => {
      const onDateSelect = jest.fn();
      const date = '2079-11-23';
      const options = {
        locale: 'en-NP',
        calendar: 'nepali',
        timeZone: 'Africa/Khartoum'
      };
      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = renderedHook === null || renderedHook === void 0 ? void 0 : renderedHook.result.current;
      expect(result.prevMonth.label).toEqual('Mangh');
      expect(result.currMonth.label).toEqual('Falgun');
      expect(result.nextMonth.label).toEqual('Chaitra');
      expect(result.weekDayLabels).toEqual(['Som', 'Mangl', 'Budha', 'Bihi', 'Shukra', 'Shani', 'Aaita']);
      expect(result.calendarWeekDays.map(week => week.map(d => d.label))).toEqual([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 1, 2, 3, 4, 5]]);
      expect(result.currYear.label).toEqual(2079);
      expect(result.nextYear.label).toEqual(2080);
      expect(result.prevYear.label).toEqual(2078);
    });
    it('should allow a non-supported locale and default to english', () => {
      const onDateSelect = jest.fn();
      const date = '2079-03-32';
      const options = {
        locale: 'de-DE',
        // non-supported locale
        calendar: 'nepali',
        timeZone: 'Africa/Khartoum'
      };
      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = renderedHook === null || renderedHook === void 0 ? void 0 : renderedHook.result.current;
      expect(result.currMonth.label).toEqual('Ashadh');
    });
    it('should default to Nepali if NE is passed as it is the case for DHIS2', () => {
      const onDateSelect = jest.fn();
      const date = '2079-03-32';
      const options = {
        locale: 'ne',
        // non-supported locale
        calendar: 'nepali',
        timeZone: 'Africa/Khartoum'
      };
      const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      }));
      const result = renderedHook === null || renderedHook === void 0 ? void 0 : renderedHook.result.current;
      expect(result.weekDayLabels).toEqual(['सोम', 'मंगल', 'बुध', 'बिही', 'शुक्र', 'शनि', 'आइत']);
    });
  });
  describe('rendering Nepali (custom) day names', () => {
    it('should render Nepali with ne-NP passed', () => {
      const {
        weekDayLabels
      } = renderCalendar('long', 'ne-NP', 'nepali');
      expect(weekDayLabels).toEqual(['सोम', 'मंगल', 'बुध', 'बिही', 'शुक्र', 'शनि', 'आइत']);
    });
    it('should render Nepali transliterated in English when en-NP passed', () => {
      const {
        weekDayLabels
      } = renderCalendar('short', 'en-NP', 'nepali');
      expect(weekDayLabels).toEqual(['Som', 'Mangl', 'Budha', 'Bihi', 'Shukra', 'Shani', 'Aaita']);
    });
  });
});
describe('clicking a day', () => {
  const renderForClick = _ref => {
    var _renderedHook$result5;
    let {
      calendar,
      date
    } = _ref;
    const onDateSelect = jest.fn();
    const options = {
      locale: 'en-GB',
      timeZone: 'Africa/Khartoum',
      calendar
      // no calendar means it should default to gregory
    };

    const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
      onDateSelect,
      date,
      options
    }));
    const result = (_renderedHook$result5 = renderedHook.result) === null || _renderedHook$result5 === void 0 ? void 0 : _renderedHook$result5.current;
    const days = result.calendarWeekDays.flat();

    // find and click the day passed to the calendar
    for (let i = 0; i < days.length; i++) {
      if (days[i].calendarDate === date) {
        days[i].onClick();
        break;
      }
    }
    const mockCallArgs = onDateSelect.mock.calls[0][0];
    return mockCallArgs;
  };
  it('should call the callback with correct info for Gregorian calendar', () => {
    const date = '2018-01-22';
    const {
      calendarDate,
      calendarDateString
    } = renderForClick({
      calendar: 'gregory',
      date
    });
    expect(calendarDate.toString()).toEqual('2018-01-22T00:00:00+02:00[Africa/Khartoum][u-ca=gregory]');
    expect(calendarDateString).toEqual('2018-01-22');
  });
  it('should call the callback with correct info for Ethiopic calendar', () => {
    const date = '2015-13-02';
    const {
      calendarDate,
      calendarDateString
    } = renderForClick({
      calendar: 'ethiopic',
      date
    });
    expect(calendarDateString).toEqual('2015-13-02');
    expect(calendarDate.withCalendar('iso8601').toLocaleString('en-GB')).toMatch('07/09/2023');
    expect(calendarDate.toLocaleString('en-GB', {
      month: 'long',
      year: 'numeric',
      day: 'numeric',
      calendar: 'ethiopic'
    })).toEqual('2 Pagumen 2015 ERA1');
  });
  it('should call the callback with correct info for a custom (Nepali) calendar', () => {
    const date = '2077-12-30';
    const {
      calendarDate,
      calendarDateString
    } = renderForClick({
      calendar: 'nepali',
      date
    });
    expect(calendarDateString).toEqual('2077-12-30');
    expect(_localisationHelpers.default.localiseMonth(calendarDate, {
      locale: 'en-NP',
      calendar: 'nepali'
    }, {})).toEqual('Chaitra');
  });
});
describe('changing the calendar on the fly', () => {
  // re-creating bug from storybook when changing a calendar on the fly
  // causes the hook to fail with: cannot format PlainYearMonth with calendar "oldCalendar" in locale with calendar "newCalendar"
  it('should allow changing the calendar on same component', () => {
    const Component = _ref2 => {
      let {
        calendar
      } = _ref2;
      const onDateSelect = jest.fn();
      const date = '2018-01-22';
      const options = {
        locale: 'en-GB',
        calendar
      };
      const result = (0, _useDatePicker.useDatePicker)({
        onDateSelect,
        date,
        options
      });
      return /*#__PURE__*/_react2.default.createElement("div", null, result.currMonth.label);
    };
    const {
      getByText,
      rerender
    } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Component, {
      calendar: "gregory"
    }));
    expect(getByText('January')).toBeDefined();
    rerender( /*#__PURE__*/_react2.default.createElement(Component, {
      calendar: "ethiopic"
    }));
    expect(getByText('Tahsas')).toBeDefined();
    rerender( /*#__PURE__*/_react2.default.createElement(Component, {
      calendar: "nepali"
    }));
    expect(getByText('Paush')).toBeDefined();
  });
});
describe('default options for hook', () => {
  const originalDateTimeFormat = _polyfill.Intl.DateTimeFormat;
  afterEach(() => {
    // eslint-disable-next-line @typescript-eslint/no-extra-semi, @typescript-eslint/no-explicit-any
    ;
    _polyfill.Intl.DateTimeFormat = originalDateTimeFormat;
  });
  it('should infer default options from system if none passed', () => {
    var _renderedHook$result6;
    jest.spyOn(_polyfill.Intl, 'DateTimeFormat').mockReturnValue({
      resolvedOptions: () => {
        return {
          locale: 'ar-SD',
          numberingSystem: 'arab'
        };
      }
    });
    const onDateSelect = jest.fn();
    const date = '2018-01-22';
    const options = {
      calendar: 'gregory',
      weekDayFormat: 'long'
    };
    const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
      onDateSelect,
      date,
      options
    }));
    const result = renderedHook === null || renderedHook === void 0 ? void 0 : (_renderedHook$result6 = renderedHook.result) === null || _renderedHook$result6 === void 0 ? void 0 : _renderedHook$result6.current;
    expect(result.weekDayLabels).toContain('الاثنين');
    expect(result.weekDayLabels).not.toContain('Monday');
    expect(result.calendarWeekDays.flatMap(week => week.map(day => day.label))).toContain('١٥');
  });
  it('should infer from system if part of the options are passed', () => {
    var _renderedHook$result7;
    const onDateSelect = jest.fn();
    const date = '2018-01-22';
    const options = {
      calendar: 'gregory',
      weekDayFormat: 'long',
      locale: 'es-ES'
    };
    const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
      onDateSelect,
      date,
      options
    }));
    const result = renderedHook === null || renderedHook === void 0 ? void 0 : (_renderedHook$result7 = renderedHook.result) === null || _renderedHook$result7 === void 0 ? void 0 : _renderedHook$result7.current;
    expect(result.weekDayLabels).toContain('lunes');
  });
});
it('should generate the correct calendar weeks when passed "Ethiopian" rather than "ethiopic" (bug)', () => {
  var _renderedHook$result8;
  const onDateSelect = jest.fn();
  const date = '2015-06-29';
  const options = {
    calendar: 'ethiopian'
  };
  const renderedHook = (0, _reactHooks.renderHook)(() => (0, _useDatePicker.useDatePicker)({
    onDateSelect,
    date,
    options
  }));
  const result = (_renderedHook$result8 = renderedHook.result) === null || _renderedHook$result8 === void 0 ? void 0 : _renderedHook$result8.current;
  expect(result.calendarWeekDays.map(week => week.map(d => d.label))).toEqual([['29', '30', '1', '2', '3', '4', '5'], ['6', '7', '8', '9', '10', '11', '12'], ['13', '14', '15', '16', '17', '18', '19'], ['20', '21', '22', '23', '24', '25', '26'], ['27', '28', '29', '30', '1', '2', '3']]);
});