"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localiseYear = exports.localiseWeekDayLabel = exports.default = void 0;
var _polyfill = require("@js-temporal/polyfill");
var _constants = require("../constants");
var _customCalendars = require("../custom-calendars");
var _helpers = require("./helpers");
const getPartialLocaleMatch = (availableLocales, locale) => {
  // try to see if there is a language match (even if the region doesn't match)
  const partialLocaleMatch = Object.keys(availableLocales).find(supportedLocale => {
    var _supportedLocale$spli, _supportedLocale$spli2;
    return ((_supportedLocale$spli = supportedLocale.split('-')) === null || _supportedLocale$spli === void 0 ? void 0 : (_supportedLocale$spli2 = _supportedLocale$spli[0]) === null || _supportedLocale$spli2 === void 0 ? void 0 : _supportedLocale$spli2.toLowerCase()) === locale;
  });
  if (partialLocaleMatch) {
    return availableLocales[partialLocaleMatch];
  }
};
const getCustomCalendarLocale = (calendar, locale) => {
  var _ref, _ref2;
  const customCalendar = _customCalendars.customCalendars[calendar];
  if (!customCalendar) {
    return undefined;
  }
  const customLocalisations = customCalendar.locales || {};
  const result = (_ref = (_ref2 = locale && (customLocalisations === null || customLocalisations === void 0 ? void 0 : customLocalisations[locale])) !== null && _ref2 !== void 0 ? _ref2 : getPartialLocaleMatch(customLocalisations, locale)) !== null && _ref !== void 0 ? _ref : customLocalisations === null || customLocalisations === void 0 ? void 0 : customLocalisations[customCalendar.defaultLocale];
  if (!result) {
    throw new Error(`no localisation found for custom calendar ${calendar}. Requested locale: ${locale}, Default locale ${customCalendar.defaultLocale}`);
  }
  return result;
};
const localiseDateLabel = function (selectedDateZdt, localeOptions) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    dateStyle: 'full'
  };
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  if (!selectedDateZdt) {
    throw new Error('a date must be provided to localiseDateLabel');
  }
  const isCustom = (0, _helpers.isCustomCalendar)(localeOptions.calendar);
  const nonCustomDate = selectedDateZdt instanceof _polyfill.Temporal.ZonedDateTime ? selectedDateZdt === null || selectedDateZdt === void 0 ? void 0 : selectedDateZdt.toPlainDate() : selectedDateZdt;
  return isCustom ? (0, _helpers.formatDate)(selectedDateZdt) : nonCustomDate.toLocaleString(localeOptions.locale, {
    calendar: localeOptions.calendar,
    dateStyle: options.dateStyle
  }).toString();
};
const localiseWeekLabel = (zdt, localeOptions) => {
  var _customLocale$numbers;
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = (0, _helpers.isCustomCalendar)(localeOptions.calendar);
  const customLocale = getCustomCalendarLocale(localeOptions.calendar, localeOptions.locale);
  return isCustom ? (customLocale === null || customLocale === void 0 ? void 0 : (_customLocale$numbers = customLocale.numbers) === null || _customLocale$numbers === void 0 ? void 0 : _customLocale$numbers[zdt.day]) || zdt.day : zdt.toPlainDate().toLocaleString(localeOptions.locale, {
    calendar: localeOptions.calendar,
    numberingSystem: _constants.numberingSystems.includes(localeOptions.numberingSystem) ? localeOptions.numberingSystem : undefined,
    day: 'numeric'
  });
};
const localiseMonth = (zdt, localeOptions, format) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = (0, _helpers.isCustomCalendar)(localeOptions.calendar);
  const customLocale = getCustomCalendarLocale(localeOptions.calendar, localeOptions.locale);
  return isCustom ? customLocale === null || customLocale === void 0 ? void 0 : customLocale.monthNames[zdt.month - 1] : zdt.toLocaleString(localeOptions.locale, format);
};
const localiseWeekDayLabel = (zdt, localeOptions) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = (0, _helpers.isCustomCalendar)(localeOptions.calendar);
  const customCalendar = getCustomCalendarLocale(localeOptions.calendar, localeOptions.locale);
  const customDayString = customCalendar === null || customCalendar === void 0 ? void 0 : customCalendar.dayNamesShort[zdt.dayOfWeek - 1]; // dayOfWeek is 1-based

  return isCustom && customDayString ? customDayString : zdt.toPlainDate().toLocaleString(localeOptions.locale, {
    weekday: localeOptions.weekDayFormat,
    calendar: localeOptions.calendar
  });
};
exports.localiseWeekDayLabel = localiseWeekDayLabel;
const localiseYear = (zdt, localeOptions, format) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = (0, _helpers.isCustomCalendar)(localeOptions.calendar);
  return isCustom ? zdt.year : zdt.toPlainYearMonth().toLocaleString(localeOptions.locale, format);
};
exports.localiseYear = localiseYear;
const localisationHelpers = {
  localiseYear,
  localiseDateLabel,
  localiseWeekLabel,
  localiseMonth,
  localiseWeekDayLabel
};
var _default = localisationHelpers;
exports.default = _default;