"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dhis2CalendarsMap = require("../../constants/dhis2CalendarsMap");
var _index = require("../../utils/index");
var _periodTypeGroups = require("../period-type-groups");
var _getAdjacentDailyFixedPeriods = _interopRequireDefault(require("./get-adjacent-daily-fixed-periods"));
var _getAdjacentMonthlyFixedPeriods = _interopRequireDefault(require("./get-adjacent-monthly-fixed-periods"));
var _getAdjacentWeeklyFixedPeriods = _interopRequireDefault(require("./get-adjacent-weekly-fixed-periods"));
var _getAdjacentYearlyFixedPeriods = _interopRequireDefault(require("./get-adjacent-yearly-fixed-periods"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getAdjacentFixedPeriods = _ref => {
  var _dhis2CalendarsMap$re;
  let {
    period,
    calendar: requestedCalendar,
    steps = 1,
    locale = 'en'
  } = _ref;
  const calendar = (0, _index.getCustomCalendarIfExists)((_dhis2CalendarsMap$re = _dhis2CalendarsMap.dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);
  const {
    periodType
  } = period;
  const payload = {
    period,
    calendar,
    steps,
    locale
  };
  if (steps === 0) {
    throw new Error('Can not generate zero fixed periods, please choose either a negative or positive value for "steps"');
  }
  if (periodType === 'DAILY') {
    return (0, _getAdjacentDailyFixedPeriods.default)(payload);
  }
  if (_periodTypeGroups.weeklyFixedPeriodTypes.includes(periodType)) {
    return (0, _getAdjacentWeeklyFixedPeriods.default)(payload);
  }
  if (_periodTypeGroups.monthlyFixedPeriodTypes.includes(periodType)) {
    return (0, _getAdjacentMonthlyFixedPeriods.default)(payload);
  }
  if (_periodTypeGroups.yearlyFixedPeriodTypes.includes(periodType)) {
    return (0, _getAdjacentYearlyFixedPeriods.default)(payload);
  }
  throw new Error(`Can not generate following fixed period for unrecognised period type "${periodType}"`);
};
var _default = getAdjacentFixedPeriods;
exports.default = _default;