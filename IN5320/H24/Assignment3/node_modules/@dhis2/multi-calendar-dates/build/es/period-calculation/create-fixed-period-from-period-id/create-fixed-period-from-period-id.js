import i18n from '@dhis2/d2-i18n';
import { dhis2CalendarsMap } from '../../constants/dhis2CalendarsMap';
import getValidLocale from '../../utils/getValidLocale';
import { fromAnyDate, getCustomCalendarIfExists } from '../../utils/index';
import { buildDailyFixedPeriod } from '../daily-periods/index';
import { generateFixedPeriods } from '../generate-fixed-periods/index';
import { isAnyYearlyPeriodId, isAnyWeeklyPeriodId, isAnyMonthlyPeriodId, isDailyPeriodId } from '../period-id/index';
import { buildYearlyFixedPeriod } from '../yearly-periods/index';
import getMonthlyFixedPeriodTypeForPeriodId from './get-monthly-fixed-period-type-for-period-id';
import getWeeklyFixedPeriodTypeForPeriodId from './get-weekly-fixed-period-type-for-period-id';
import getYearlyFixedPeriodTypeForPeriodId from './get-yearly-fixed-period-type-for-period-id';
const createFixedPeriodFromPeriodId = _ref => {
  var _dhis2CalendarsMap$re, _getValidLocale;
  let {
    periodId,
    calendar: requestedCalendar,
    locale = 'en'
  } = _ref;
  const calendar = getCustomCalendarIfExists((_dhis2CalendarsMap$re = dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);
  const validLocale = (_getValidLocale = getValidLocale(locale)) !== null && _getValidLocale !== void 0 ? _getValidLocale : 'en';
  if (isAnyYearlyPeriodId(periodId)) {
    const year = parseInt(periodId.substring(0, 4), 10);
    const periodType = getYearlyFixedPeriodTypeForPeriodId(periodId);
    return buildYearlyFixedPeriod({
      year,
      periodType,
      calendar,
      locale
    });
  }
  if (isAnyMonthlyPeriodId(periodId)) {
    const periodType = getMonthlyFixedPeriodTypeForPeriodId(periodId);
    const year = parseInt(periodId.substring(0, 4), 10);
    const monthlyPeriodsForYear = generateFixedPeriods({
      periodType,
      year,
      calendar,
      locale: validLocale
    });
    const foundThisYear = monthlyPeriodsForYear.find(_ref2 => {
      let {
        id
      } = _ref2;
      return id === periodId;
    });
    if (foundThisYear) {
      return foundThisYear;
    }

    // If we can't find the period in "this" year, it is in the next year.
    // E.g. 2023NovemberQ4 is actually in 2024
    const monthlyPeriodsForNextYear = generateFixedPeriods({
      year: year + 1,
      periodType,
      calendar,
      locale: validLocale
    }).slice(-1);
    const foundNextYear = monthlyPeriodsForNextYear.find(_ref3 => {
      let {
        id
      } = _ref3;
      return id === periodId;
    });
    if (!foundNextYear) {
      throw new Error(i18n.t(`Couldn't find a monthly period for weekly period id "{{periodId}}"`, {
        periodId
      }));
    }
    return foundNextYear;
  }
  if (isAnyWeeklyPeriodId(periodId)) {
    const year = parseInt(periodId.substring(0, 4), 10);
    const periodType = getWeeklyFixedPeriodTypeForPeriodId(periodId);
    const weeklyPeriodsForYear = generateFixedPeriods({
      year,
      periodType,
      calendar,
      locale
    });
    const foundThisYear = weeklyPeriodsForYear.find(_ref4 => {
      let {
        id
      } = _ref4;
      return id === periodId;
    });
    if (foundThisYear) {
      return foundThisYear;
    }

    // If the period is not in this year, it might have started at the
    // end of last year but is still considered the first week of this
    // year
    const [lastPeriodOfLastYear] = generateFixedPeriods({
      year: year - 1,
      periodType,
      calendar,
      locale
    }).slice(-1);
    if (lastPeriodOfLastYear.id === periodId) {
      return lastPeriodOfLastYear;
    }
    throw new Error(i18n.t(`Couldn't find a weekly period for weekly period id "{{periodId}}"`, {
      periodId
    }));
  }
  if (isDailyPeriodId(periodId)) {
    const year = periodId.substring(0, 4);
    const month = periodId.substring(4, 6);
    const day = periodId.substring(6);
    const date = fromAnyDate({
      date: `${year}-${month}-${day}`,
      calendar
    });
    return buildDailyFixedPeriod({
      date,
      locale,
      calendar
    });
  }
  throw new Error(i18n.t(`Couldn't handle unknown period id "{{periodId}}"`, {
    periodId
  }));
};
export default createFixedPeriodFromPeriodId;