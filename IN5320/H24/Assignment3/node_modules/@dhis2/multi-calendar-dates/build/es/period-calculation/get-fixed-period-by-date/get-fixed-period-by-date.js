import { dhis2CalendarsMap } from '../../constants/dhis2CalendarsMap';
import { getCustomCalendarIfExists } from '../../utils/index';
import { monthlyFixedPeriodTypes, weeklyFixedPeriodTypes, yearlyFixedPeriodTypes } from '../period-type-groups';
import getDailyFixedPeriodByDate from './get-daily-fixed-period-by-date';
import getMonthlyFixedPeriodByDate from './get-monthly-fixed-period-by-date';
import getWeeklyFixedPeriodByDate from './get-weekly-fixed-period-by-date';
import getYearlyFixedPeriodByDate from './get-yearly-fixed-period-by-date';
const getFixedPeriodByDate = _ref => {
  var _dhis2CalendarsMap$re;
  let {
    periodType,
    date,
    calendar: requestedCalendar,
    locale = 'en'
  } = _ref;
  const calendar = getCustomCalendarIfExists((_dhis2CalendarsMap$re = dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);

  // const date = fromAnyDate({ date: dateInput, calendar })
  const payload = {
    periodType,
    date,
    calendar,
    locale
  };
  if (periodType === 'DAILY') {
    return getDailyFixedPeriodByDate(payload);
  }
  if (monthlyFixedPeriodTypes.includes(periodType)) {
    return getMonthlyFixedPeriodByDate(payload);
  }
  if (weeklyFixedPeriodTypes.includes(periodType)) {
    return getWeeklyFixedPeriodByDate(payload);
  }
  if (yearlyFixedPeriodTypes.includes(periodType)) {
    return getYearlyFixedPeriodByDate(payload);
  }
  throw new Error(`can not generate period for unrecognised period type "${periodType}"`);
};
export default getFixedPeriodByDate;