"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputFieldFF = void 0;
var _input = require("@dhis2-ui/input");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _helpers = require("../shared/helpers.js");
var _propTypes2 = require("../shared/propTypes.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const InputFieldFF = _ref => {
  let {
    input,
    meta,
    error,
    showValidStatus,
    valid,
    validationText,
    onBlur,
    onFocus,
    loading,
    showLoadingStatus,
    ...rest
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_input.InputField, _extends({}, rest, {
    name: input.name,
    type: input.type,
    error: (0, _helpers.hasError)(meta, error),
    valid: (0, _helpers.isValid)(meta, valid, showValidStatus),
    loading: (0, _helpers.isLoading)(meta, loading, showLoadingStatus),
    validationText: (0, _helpers.getValidationText)(meta, validationText, error),
    onFocus: (0, _helpers.createFocusHandler)(input, onFocus),
    onChange: (0, _helpers.createChangeHandler)(input),
    onBlur: (0, _helpers.createBlurHandler)(input, onBlur),
    value: input.value
  }));
};
exports.InputFieldFF = InputFieldFF;
InputFieldFF.propTypes = {
  /** `input` props received from Final Form `Field` */
  input: _propTypes2.inputPropType.isRequired,
  /** `meta` props received from Final Form `Field` */
  meta: _propTypes2.metaPropType.isRequired,
  error: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  showLoadingStatus: _propTypes.default.bool,
  showValidStatus: _propTypes.default.bool,
  valid: _propTypes.default.bool,
  validationText: _propTypes.default.string,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func
};