"use strict";

var _dhis2Password = require("../dhis2Password.js");
var _index = require("../test-helpers/index.js");
describe('validator: dhis2Password', () => {
  (0, _index.allowsEmptyValues)(_dhis2Password.dhis2Password);
  it('should return undefined for a valid password', () => {
    expect((0, _dhis2Password.dhis2Password)('Testing123!')).toEqual(undefined);
  });
  describe('rejects value types other than string', () => {
    (0, _index.testValidatorValues)(_dhis2Password.dhis2Password, _dhis2Password.errorMessages.notString, [true, 3, {}, [], () => {}]);
  });
  it('should return the "password too short" message if password is less than 8 characters', () => {
    expect((0, _dhis2Password.dhis2Password)('123')).toEqual(_dhis2Password.errorMessages.tooShort);
  });
  it('should return the "password too long" message if password is more than 34 characters', () => {
    expect((0, _dhis2Password.dhis2Password)('abcdefghijklmnopqrstuvwxyz12345678910111213')).toEqual(_dhis2Password.errorMessages.tooLong);
  });
  it('should return the "no lowercase" message if password does not contain lower case characters', () => {
    expect((0, _dhis2Password.dhis2Password)('TESTING123!')).toEqual(_dhis2Password.errorMessages.noLowerCase);
  });
  it('should return the "no uppercase" message if password has no uppercase characters', () => {
    expect((0, _dhis2Password.dhis2Password)('testing123!')).toEqual(_dhis2Password.errorMessages.noUpperCase);
  });
  it('should return the "no number" message if password has no digits', () => {
    expect((0, _dhis2Password.dhis2Password)('Testing!')).toEqual(_dhis2Password.errorMessages.noNumber);
  });
  it('should return the "no special character" message if password has no special characters', () => {
    expect((0, _dhis2Password.dhis2Password)('Testing123')).toEqual(_dhis2Password.errorMessages.noSpecialCharacter);
  });
});