"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Statuses = exports.Default = void 0;
var _field = require("@dhis2-ui/field");
var _react = _interopRequireDefault(require("react"));
var _reactFinalForm = require("react-final-form");
var _formDecorator = require("../formDecorator.js");
var _propTypes = require("../shared/propTypes.js");
var _RadioFieldFF = require("./RadioFieldFF.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const description = `
The \`RadioFieldFF\` is a wrapper around a \`Radio\` that enables it to work with Final Form, the preferred library for form validation and utilities in DHIS 2 apps.

#### Final Form

See how to use Final Form at [Final Form - Getting Started](https://final-form.org/docs/react-final-form/getting-started).

Inside a Final Form \`<Form>\` component, these 'FF' UI components are intended to be used in the \`component\` prop of the [Final Form \`<Field>\` components](https://final-form.org/docs/react-final-form/api/Field) where they will receive some props from the Field, e.g. \`<Field component={RadioFieldFF} />\`.  See the code samples below for examples.

#### Props

The props shown in the table below are generally provided to the \`RadioFieldFF\` wrapper by the Final Form \`Field\`.

Note that any props beyond the API of the \`Field\` component will be spread to the \`RadioFieldFF\`, which passes any extra props to the underlying \`Radio\` using \`{...rest}\`.

Therefore, to add any props to the \`RadioFieldFF\` or \`Radio\`, add those props to the parent Final Form \`Field\` component.

Also see \`Radio\` for notes about props and implementation.

\`\`\`js
import { RadioFieldFF } from '@dhis2/ui'
\`\`\`

Press **Submit** to see the form values logged to the console.
`;
var _default = exports.default = {
  title: 'Radio Field (Final Form)',
  component: _RadioFieldFF.RadioFieldFF,
  decorators: [_formDecorator.formDecorator],
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    input: {
      ..._propTypes.inputArgType
    },
    meta: {
      ..._propTypes.metaArgType
    }
  }
};
const Default = () => /*#__PURE__*/_react.default.createElement(_field.FieldGroup, null, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  type: "radio",
  component: _RadioFieldFF.RadioFieldFF,
  name: "choice",
  label: "One",
  value: "one"
}), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  type: "radio",
  component: _RadioFieldFF.RadioFieldFF,
  name: "choice",
  label: "Two",
  value: "two"
}), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  type: "radio",
  component: _RadioFieldFF.RadioFieldFF,
  name: "choice",
  label: "Three",
  value: "three"
}));
exports.Default = Default;
const Statuses = () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_field.FieldGroup, {
  label: "Valid"
}, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  type: "radio",
  name: "valid",
  component: _RadioFieldFF.RadioFieldFF,
  label: "Valid",
  value: "valid",
  valid: true
})), /*#__PURE__*/_react.default.createElement(_field.FieldGroup, {
  label: "Warning"
}, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  type: "radio",
  name: "warning",
  component: _RadioFieldFF.RadioFieldFF,
  label: "Warning",
  value: "warning",
  warning: true
})), /*#__PURE__*/_react.default.createElement(_field.FieldGroup, {
  label: "Error"
}, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
  type: "radio",
  name: "error",
  component: _RadioFieldFF.RadioFieldFF,
  label: "Error",
  value: "error",
  error: true
})));
exports.Statuses = Statuses;