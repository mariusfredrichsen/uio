"use strict";

var _dhis2Username = require("../dhis2Username.js");
var _index = require("../test-helpers/index.js");
describe('validator: dhis2Username', () => {
  (0, _index.allowsEmptyValues)(_dhis2Username.dhis2Username);
  describe('constrains length of username to between 4 and 255 characters long', () => {
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, undefined, ['s'.repeat(4), 's'.repeat(255), 'valid_username']);
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, _dhis2Username.invalidUsernameMessage, ['1', 's', 's'.repeat(256)]);
  });
  describe('does not allow usernames to start with _, -, . or @', () => {
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, _dhis2Username.invalidUsernameMessage, ['_xxx', '-xxx', '.xxx', '@xxx']);
  });
  describe('does not allow usernames to end with _, -, . or @', () => {
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, _dhis2Username.invalidUsernameMessage, ['xxx_', 'xxx-', 'xxx.', 'xxx@']);
  });
  describe('does not allow usernames to contain __, --, .. or @@', () => {
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, _dhis2Username.invalidUsernameMessage, ['xx__xx', 'xx--xx', 'xx..xx', 'xx@@xx']);
  });
  describe('constrains characters in usernames to [a-z0-9._@]', () => {
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, undefined, ['v@lid_user.name', 'v@lid-user.name', '123another_v@lid_usern@me', 'UPPER_CASE', 'lower@ca.se']);
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, _dhis2Username.invalidUsernameMessage, ['あいうえお', 'some_username^%&*(']);
  });
  describe('rejects non-string data types', () => {
    (0, _index.testValidatorValues)(_dhis2Username.dhis2Username, _dhis2Username.invalidUsernameMessage, [1, true, {}, [], () => {}]);
  });
});