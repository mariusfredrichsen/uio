"use strict";

var _createNumberRange = require("../createNumberRange.js");
var _index = require("../helpers/index.js");
var _index2 = require("../test-helpers/index.js");
describe('validator: createNumberRange', () => {
  const betweenSixAndTen = (0, _createNumberRange.createNumberRange)(6, 10);
  const errorMessage = 'Number cannot be less than 6 or more than 10';
  it('should throw an error when lower or upper bound are not a number', () => {
    expect(() => {
      (0, _createNumberRange.createNumberRange)(undefined, undefined);
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createNumberRange.createNumberRange)('test', 'test');
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createNumberRange.createNumberRange)(1, undefined);
    }).toThrowError(_index.requiredArgumentErrorMessage);
    expect(() => {
      (0, _createNumberRange.createNumberRange)(undefined, 0);
    }).toThrowError(_index.requiredArgumentErrorMessage);
  });
  it('should create a function', () => {
    expect(typeof betweenSixAndTen).toEqual('function');
  });
  (0, _index2.allowsEmptyValues)(betweenSixAndTen);
  describe('allows floats, integers and string representations of numbers', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTen, undefined, [7, 7.1, 0.71e1, '7', '7.1']);
  });
  describe('allows within-range numbers', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTen, undefined, [6, 8, 10, 9.999999, 6.000001]);
  });
  describe('rejects non-numerical values', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTen, errorMessage, ['test', true, {}, [], () => {}]);
  });
  describe('rejects out-of-range numbers', () => {
    (0, _index2.testValidatorValues)(betweenSixAndTen, errorMessage, [3, 5, 5.999999, 10.000001, 1000000]);
  });
});