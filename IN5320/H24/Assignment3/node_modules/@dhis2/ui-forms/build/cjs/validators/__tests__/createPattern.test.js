"use strict";

var _createPattern = require("../createPattern.js");
var _index = require("../test-helpers/index.js");
describe('validator: createPattern', () => {
  const pattern = /^test$/;
  const equalToTestPattern = (0, _createPattern.createPattern)(pattern);
  it('should throw an error when pattern is not a regex object', () => {
    expect(() => {
      (0, _createPattern.createPattern)(undefined);
    }).toThrowError(_createPattern.invalidPatternMessage);
    expect(() => {
      (0, _createPattern.createPattern)('test');
    }).toThrowError(_createPattern.invalidPatternMessage);
  });
  it('should create a function', () => {
    expect(typeof equalToTestPattern).toEqual('function');
  });
  (0, _index.allowsEmptyValues)(equalToTestPattern);
  it('should return undefined when the input matches the pattern', () => {
    expect(equalToTestPattern('test')).toEqual(undefined);
  });
  it('should return an error string when input does not match the pattern', () => {
    const escapedRegexString = '&#x2F;^test$&#x2F;';
    const invalidMsg = `Please make sure the value of this input matches the pattern ${escapedRegexString}.`;
    expect(equalToTestPattern('bad input')).toEqual(invalidMsg);
  });
  it('should return an custon error string when one was provided and input does not match the pattern', () => {
    const invalidMsg = 'You should not have done this';
    const withCustomMessage = (0, _createPattern.createPattern)(pattern, invalidMsg);
    expect(withCustomMessage('bad input')).toEqual(invalidMsg);
  });
});