"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StandardForm = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactFinalForm = require("react-final-form");
var _CheckboxFieldFF = require("../CheckboxFieldFF/CheckboxFieldFF.js");
var _FieldGroupFF = require("../FieldGroupFF/FieldGroupFF.js");
var _formDecorator = require("../formDecorator.js");
var _InputFieldFF = require("../InputFieldFF/InputFieldFF.js");
var _MultiSelectFieldFF = require("../MultiSelectFieldFF/MultiSelectFieldFF.js");
var _RadioFieldFF = require("../RadioFieldFF/RadioFieldFF.js");
var _SingleSelectFieldFF = require("../SingleSelectFieldFF/SingleSelectFieldFF.js");
var _SwitchFieldFF = require("../SwitchFieldFF/SwitchFieldFF.js");
var _TextAreaFieldFF = require("../TextAreaFieldFF/TextAreaFieldFF.js");
var _index = require("../validators/index.js");
var _FileInputFieldFF = require("./FileInputFieldFF.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const Form = _ref => {
  let {
    values
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      maxWidth: 830
    }
  }, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    name: "gender",
    label: "Gender",
    component: _SingleSelectFieldFF.SingleSelectFieldFF,
    initialValue: "",
    options: [{
      value: '',
      label: 'Please choose'
    }, {
      value: 'mr',
      label: 'Mr.'
    }, {
      value: 'ms',
      label: 'Ms.'
    }, {
      value: 'other',
      label: 'Other'
    }, {
      value: 'unknown',
      label: "I'd rather not say"
    }]
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    required: true,
    label: "First name",
    name: "fname",
    validate: _index.hasValue,
    component: _InputFieldFF.InputFieldFF,
    helpText: "Please enter your first name, excluding middle names"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    required: true,
    label: "Last name",
    name: "lname",
    validate: _index.hasValue,
    component: _InputFieldFF.InputFieldFF,
    helpText: "Please enter your first name, excluding middle names"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    name: "subscribe",
    initialValue: true,
    type: "checkbox",
    label: "I want to receive updated and notifications about the latest changes?",
    component: _SwitchFieldFF.SwitchFieldFF
  }), values.subscribe && /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    required: values.subscribe,
    label: "E-mail address",
    name: "email1",
    validate: (0, _index.composeValidators)(_index.email, value => {
      if (values.subscribe && !value) {
        return 'You need to provide an e-mail address';
      }
    }),
    component: _InputFieldFF.InputFieldFF,
    helpText: "Please enter the e-mail address you want us to send the updates to"
  }), values.subscribe && /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    disabled: !values.subscribe,
    required: values.subscribe,
    label: "E-mail address confirmation",
    name: "email2",
    validate: (0, _index.composeValidators)(_index.email, _index.hasValue),
    component: _InputFieldFF.InputFieldFF,
    helpText: "Please confirm your e-mail address"
  }), /*#__PURE__*/_react.default.createElement(_FieldGroupFF.FieldGroupFF, {
    name: "food",
    label: "Food",
    required: true,
    helpText: "If we ever gather for food, what meal type would you like to eat"
  }, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "radio",
    name: "food",
    required: true,
    component: _RadioFieldFF.RadioFieldFF,
    value: "anything",
    label: "Don't care",
    validate: _index.hasValue
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "radio",
    name: "food",
    component: _RadioFieldFF.RadioFieldFF,
    required: true,
    value: "vegan",
    label: "Vegan",
    validate: _index.hasValue
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "radio",
    name: "food",
    component: _RadioFieldFF.RadioFieldFF,
    required: true,
    value: "vegetarian",
    label: "Vegetarian",
    validate: _index.hasValue
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "radio",
    name: "food",
    component: _RadioFieldFF.RadioFieldFF,
    required: true,
    value: "fish",
    label: "Fish",
    validate: _index.hasValue
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "radio",
    name: "food",
    required: true,
    component: _RadioFieldFF.RadioFieldFF,
    value: "Halal",
    label: "halal",
    validate: _index.hasValue
  })), /*#__PURE__*/_react.default.createElement(_FieldGroupFF.FieldGroupFF, {
    name: "pizzaToppings",
    label: "Pizza toppings",
    helpText: "If we ever order pizza, what ingredients would you like on top"
  }, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "checkbox",
    name: "pizzaToppings",
    component: _CheckboxFieldFF.CheckboxFieldFF,
    label: "Everything",
    value: "everything"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "checkbox",
    name: "pizzaToppings",
    component: _CheckboxFieldFF.CheckboxFieldFF,
    label: "Ham",
    value: "ham"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "checkbox",
    name: "pizzaToppings",
    component: _CheckboxFieldFF.CheckboxFieldFF,
    label: "Salami",
    value: "salami"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "checkbox",
    name: "pizzaToppings",
    component: _CheckboxFieldFF.CheckboxFieldFF,
    label: "Pineapple",
    value: "pineapple"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    type: "checkbox",
    name: "pizzaToppings",
    component: _CheckboxFieldFF.CheckboxFieldFF,
    label: "Bellpepper",
    value: "bellpepper"
  })), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    label: "Sandwich toppings",
    name: "sandwhichToppings",
    component: _MultiSelectFieldFF.MultiSelectFieldFF,
    options: [{
      value: '',
      label: 'All of the options'
    }, {
      value: 'ham',
      label: 'Ham'
    }, {
      value: 'salami',
      label: 'Salami'
    }, {
      value: 'pineapple',
      label: 'Pineapple'
    }, {
      value: 'bellpepper',
      label: 'Bellpepper'
    }],
    helpText: "If we ever order sandwiches, what ingredients would you like on top"
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    name: "message",
    label: "If you want to tell us anything, just add your message here",
    component: _TextAreaFieldFF.TextAreaFieldFF
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    name: "fileTxt",
    accept: ".txt",
    label: "If you want to send us a txt file, please attach it here",
    className: "fileTxt",
    validate: files => {
      if (!files) {
        return undefined;
      }
      const [file] = files;
      if (file.type !== 'text/plain') {
        return `The file you provided is not a txt file, received "${file.type}"`;
      }
    },
    component: _FileInputFieldFF.FileInputFieldFF
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    multiple: true,
    accept: "image/jpg",
    name: "fileJpgs",
    label: "If you want to send us some picture file, please attach it here",
    validate: files => {
      if (!files) {
        return undefined;
      }
      return files.reduce((error, file) => {
        if (error) {
          return error;
        }
        if (file.type !== 'application/jpg') {
          return `One of the files is not a jpg, received "${file.type}"`;
        }
      }, undefined);
    },
    component: _FileInputFieldFF.FileInputFieldFF
  }), /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
    required: true,
    name: "tnc",
    label: "I accept the terms and conditions",
    validate: _index.hasValue,
    component: _CheckboxFieldFF.CheckboxFieldFF,
    type: "checkbox",
    className: "checkbox"
  }));
};
var _default = exports.default = {
  title: 'Testing:FileInput',
  decorators: [_formDecorator.formDecorator],
  parameters: {
    options: {
      showPanel: false
    }
  }
};
const StandardForm = (_, _ref2) => {
  let {
    formRenderProps
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(Form, formRenderProps);
};
exports.StandardForm = StandardForm;