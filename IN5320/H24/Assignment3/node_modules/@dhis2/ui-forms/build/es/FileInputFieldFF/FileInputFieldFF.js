function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { FileListItem, FileInputField } from '@dhis2-ui/file-input';
import PropTypes from 'prop-types';
import React from 'react';
import i18n from '../locales/index.js';
import { hasError, isValid, getValidationText } from '../shared/helpers.js';
import { inputPropType, metaPropType } from '../shared/propTypes.js';
const btnLabel = i18n.t('Upload file');
const btnLabelMulti = i18n.t('Upload files');
const dedupeAndConcat = (currentFiles, newFileList) => {
  return [...currentFiles, ...newFileList].reduceRight((acc, file) => {
    if (!acc.unique.has(file.name)) {
      acc.unique.add(file.name);
      acc.files.unshift(file);
    }
    return acc;
  }, {
    files: [],
    unique: new Set()
  }).files;
};
const createChangeHandler = (input, multifile) => _ref => {
  let {
    files
  } = _ref;
  // A JavaScript FileList instance is read-only, so we cannot add files to it
  // FileList also doesn't have a .map method so by destructuring the FileList
  // instance into an array we can add, remove and map
  const currentFiles = Array.isArray(input.value) ? input.value : [];
  const value = multifile ? dedupeAndConcat(currentFiles, files) : [...files];
  input.onChange(value);
};
const createRemoveHandler = (input, fileToDelete) => () => {
  const files = input.value.filter(file => file !== fileToDelete);
  const value = files.length > 0 ? files : '';
  input.onChange(value);
};
export const FileInputFieldFF = _ref2 => {
  let {
    buttonLabel,
    disabled,
    error,
    input,
    meta,
    multifile,
    showValidStatus,
    valid,
    validationText,
    ...rest
  } = _ref2;
  const files = input.value || [];
  return /*#__PURE__*/React.createElement(FileInputField, _extends({}, rest, {
    onChange: createChangeHandler(input, multifile),
    buttonLabel: buttonLabel || (multifile ? btnLabelMulti : btnLabel),
    disabled: disabled || !multifile && files.length >= 1,
    multiple: multifile,
    name: input.name,
    error: hasError(meta, error),
    valid: isValid(meta, valid, showValidStatus),
    validationText: getValidationText(meta, validationText, error)
  }), files.map(file => /*#__PURE__*/React.createElement(FileListItem, {
    key: file.name,
    label: file.name,
    onRemove: createRemoveHandler(input, file),
    removeText: i18n.t('Remove')
  })));
};
FileInputFieldFF.propTypes = {
  /** `input` props provided by Final Form `Field` */
  input: inputPropType.isRequired,
  /** `meta` props provided by Final Form `Field` */
  meta: metaPropType.isRequired,
  buttonLabel: PropTypes.string,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  multifile: PropTypes.bool,
  showValidStatus: PropTypes.bool,
  valid: PropTypes.bool,
  validationText: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.instanceOf(File)), PropTypes.oneOf([''])])
};