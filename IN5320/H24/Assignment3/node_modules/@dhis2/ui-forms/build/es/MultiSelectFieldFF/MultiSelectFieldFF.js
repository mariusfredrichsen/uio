function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { MultiSelectOption, MultiSelectField } from '@dhis2-ui/select';
import PropTypes from 'prop-types';
import React from 'react';
import { createSelectChangeHandler, createFocusHandler, createBlurHandler, hasError, isLoading, isValid, getValidationText } from '../shared/helpers.js';
import { inputPropType, metaPropType } from '../shared/propTypes.js';
export const MultiSelectFieldFF = _ref => {
  let {
    error,
    input,
    loading,
    meta,
    onBlur,
    onFocus,
    options = [],
    showLoadingStatus,
    showValidStatus,
    valid,
    validationText,
    ...rest
  } = _ref;
  return /*#__PURE__*/React.createElement(MultiSelectField, _extends({}, rest, {
    name: input.name,
    error: hasError(meta, error),
    valid: isValid(meta, valid, showValidStatus),
    loading: isLoading(meta, loading, showLoadingStatus),
    validationText: getValidationText(meta, validationText, error),
    onFocus: createFocusHandler(input, onFocus),
    onChange: createSelectChangeHandler(input),
    onBlur: createBlurHandler(input, onBlur),
    selected: input.value || [] /* input.value is an empty string initially, so we're providing an empty array if falsey */
  }), options.map(option => /*#__PURE__*/React.createElement(MultiSelectOption, _extends({
    key: option.value
  }, option))));
};
MultiSelectFieldFF.propTypes = {
  /** `input` props provided by Final Form `Field` */
  input: inputPropType.isRequired,
  /** `meta` props provided by Final Form `Field` */
  meta: metaPropType.isRequired,
  error: PropTypes.bool,
  loading: PropTypes.bool,
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    value: PropTypes.string
  })),
  showLoadingStatus: PropTypes.bool,
  showValidStatus: PropTypes.bool,
  valid: PropTypes.bool,
  validationText: PropTypes.string,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func
};