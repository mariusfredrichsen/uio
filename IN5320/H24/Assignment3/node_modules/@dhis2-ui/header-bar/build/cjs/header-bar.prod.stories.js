"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithUpdateNotification = exports.WithOnlineStatusMessage = exports.WithOnlineStatus = exports.RTLHeader = exports.NonEnglishUserLocale = exports.NoAuthorityForInterpretationsApp = exports.Loading = exports.Error = exports.Default = exports.CustomLogoWideDimension = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _react = _interopRequireDefault(require("react"));
var _common = require("./__e2e__/stories/common.js");
var _onlineStatusMessage = require("./__e2e__/stories/online-status-message.js");
var _headerBar = require("./header-bar.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const subtitle = 'The common navigation bar used in all DHIS2 apps';
const description = `
The header bar is mandatory for all apps. This creates a stable, understandable point of reference for the user across all kinds of different apps. It must always be displayed fixed to the top of the screen. Do not interfere or obstruct interaction with the header bar.

The header bar is included automatically with the App Shell and should not need any configuration.

#### Theme

The header bar can be themeed to suit the brand/color of your DHIS2 instance. The color of the text/icons will be automatically adjusted based on the selected color.

\`\`\`js
import { HeaderBar } from '@dhis2/ui'
\`\`\`
`;
const customData = {
  'systemSettings/applicationTitle': {
    applicationTitle: 'Foobar'
  },
  'systemSettings/helpPageLink': {
    helpPageLink: '//custom-help-page-link'
  },
  me: {
    name: 'John Doe',
    email: 'john_doe@dhis2.org',
    settings: {
      keyUiLocale: 'en'
    },
    authorities: ['ALL']
  },
  'action::menu/getModules': {
    modules: [{
      name: 'dhis-web-dashboard',
      namespace: '/dhis-web-dashboard',
      defaultAction: '../dhis-web-dashboard/index.action',
      displayName: 'Dashboard',
      icon: '../icons/dhis-web-dashboard.png',
      description: ''
    }, {
      name: 'dhis-web-data-visualizer',
      namespace: '/dhis-web-data-visualizer',
      defaultAction: '../dhis-web-data-visualizer/index.action',
      displayName: 'Data Visualizer',
      icon: '../icons/dhis-web-data-visualizer.png',
      description: ''
    }, {
      name: 'dhis-web-capture',
      namespace: '/dhis-web-capture',
      defaultAction: '../dhis-web-capture/index.action',
      displayName: 'Capture',
      icon: '../icons/dhis-web-capture.png',
      description: ''
    }, {
      name: 'dhis-web-maintenance',
      namespace: '/dhis-web-maintenance',
      defaultAction: '../dhis-web-maintenance/index.action',
      displayName: 'Maintenance',
      icon: '../icons/dhis-web-maintenance.png',
      description: ''
    }, {
      name: 'dhis-web-maps',
      namespace: '/dhis-web-maps',
      defaultAction: '../dhis-web-maps/index.action',
      displayName: 'Maps',
      icon: '../icons/dhis-web-maps.png',
      description: ''
    }, {
      name: 'dhis-web-event-reports',
      namespace: '/dhis-web-event-reports',
      defaultAction: '../dhis-web-event-reports/index.action',
      displayName: 'Event Reports',
      icon: '../icons/dhis-web-event-reports.png',
      description: ''
    }, {
      name: 'dhis-web-interpretation',
      namespace: '/dhis-web-interpretation',
      defaultAction: '../dhis-web-interpretation/index.action',
      displayName: 'Interpretations',
      icon: '../icons/dhis-web-interpretation.png',
      description: ''
    }, {
      name: 'dhis-web-import-export',
      namespace: '/dhis-web-import-export',
      defaultAction: '../dhis-web-import-export/index.action',
      displayName: 'Import/Export',
      icon: '../icons/dhis-web-import-export.png',
      description: ''
    }, {
      name: 'WHO Metadata browser',
      namespace: 'WHO Metadata browser',
      defaultAction: 'https://debug.dhis2.org/dev/api/apps/WHO-Metadata-browser/index.html',
      displayName: '',
      icon: 'https://debug.dhis2.org/dev/api/apps/WHO-Metadata-browser/icons/medicine-48.png',
      description: ''
    }, {
      name: 'Dashboard Classic',
      namespace: 'Dashboard Classic',
      defaultAction: 'https://debug.dhis2.org/dev/api/apps/Dashboard-Classic/index.html',
      displayName: 'Dashboard Classic',
      icon: 'https://debug.dhis2.org/dev/api/apps/Dashboard-Classic/icon.png',
      description: 'DHIS2 Legacy Dashboard App'
    }]
  },
  'me/dashboard': {
    unreadInterpretations: 10,
    unreadMessageConversations: 5
  }
};
const customLogoData = {
  ...customData,
  'staticContent/logo_banner': {
    images: {
      png: 'https://via.placeholder.com/150x50'
    }
  }
};
const customLocaleData = {
  ...customData,
  'systemSettings/applicationTitle': {
    applicationTitle: 'Le Gros Foobar'
  },
  me: {
    ...customData.me,
    settings: {
      keyUiLocale: 'fr'
    }
  },
  'action::menu/getModules': {
    modules: customData['action::menu/getModules'].modules.map(mod => ({
      ...mod,
      displayName: `Le ${mod.displayName}`
    }))
  }
};
const customAuthoritiesData = {
  ...customData,
  me: {
    ...customData.me,
    authorities: ['M_dhis-web-messaging']
  }
};
var _default = exports.default = {
  title: 'Header Bar',
  component: _headerBar.HeaderBar,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  },
  decorators: [(0, _common.createDecoratorProvider)()]
};
const Default = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Example!"
}));
exports.Default = Default;
const CustomLogoWideDimension = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customLogoData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Example!"
}));
exports.CustomLogoWideDimension = CustomLogoWideDimension;
CustomLogoWideDimension.storyName = 'Custom Logo (wide dimension)';
const NonEnglishUserLocale = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customLocaleData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Exemple!"
}));
exports.NonEnglishUserLocale = NonEnglishUserLocale;
NonEnglishUserLocale.storyName = 'Non-english user locale';
const NoAuthorityForInterpretationsApp = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customAuthoritiesData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Example!"
}));
exports.NoAuthorityForInterpretationsApp = NoAuthorityForInterpretationsApp;
NoAuthorityForInterpretationsApp.storyName = 'No authority for interpretations app';
const Loading = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  options: {
    loadForever: true
  }
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Example!"
}));
exports.Loading = Loading;
Loading.storyName = 'Loading...';
const Error = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: {}
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Exemple!"
}));
exports.Error = Error;
Error.storyName = 'Error!';
const WithOnlineStatus = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Exemple!"
}));
exports.WithOnlineStatus = WithOnlineStatus;
WithOnlineStatus.decorators = [(0, _common.createDecoratorProvider)({
  ..._common.providerConfig,
  pwaEnabled: true
})];
WithOnlineStatus.parameters = {
  docs: {
    description: {
      story: 'An online status badge will be shown in apps that set \
                `pwa: { enabled: true }` in `d2.config.js`. The status \
                indicator uses a different layout on viewports smaller \
                than 480px.'
    }
  }
};
const WithUpdateNotification = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Data Visualizer",
  updateAvailable: true
}));
exports.WithUpdateNotification = WithUpdateNotification;
const WithOnlineStatusMessage = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customData
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Exemple!"
}), /*#__PURE__*/_react.default.createElement(_onlineStatusMessage.OnlineStatusMessageUpdate, null));
exports.WithOnlineStatusMessage = WithOnlineStatusMessage;
const RTLHeader = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customData
}, /*#__PURE__*/_react.default.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/_react.default.createElement(_headerBar.HeaderBar, {
  appName: "Example!"
})));
exports.RTLHeader = RTLHeader;
WithOnlineStatusMessage.decorators = [(0, _common.createDecoratorProvider)({
  ..._common.providerConfig,
  pwaEnabled: true
}, {
  ..._common.mockOfflineInterface,
  latestIsConnected: false
})];
WithOnlineStatusMessage.parameters = {
  docs: {
    description: {
      story: 'When online status is updated, the status indicator will show react node sent as the message'
    }
  }
};