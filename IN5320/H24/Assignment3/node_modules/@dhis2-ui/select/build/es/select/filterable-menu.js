function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { FilterInput } from './filter-input.js';
import { NoMatch } from './no-match.js';
import { filterIgnored, checkIfValidOption } from './option-helpers.js';
export class FilterableMenu extends Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      filter: ''
    });
    _defineProperty(this, "onFilterChange", _ref => {
      let {
        value
      } = _ref;
      this.setState({
        filter: value
      });
    });
  }
  render() {
    const {
      dataTest,
      options,
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      placeholder,
      noMatchText,
      Menu
    } = this.props;
    const {
      filter
    } = this.state;
    const menuProps = {
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      dataTest
    };
    const renderedOptions = filterIgnored(options);

    // If there are no options or there's no filter, just pass everything through
    if (React.Children.count(renderedOptions) === 0 || !filter) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FilterInput, {
        dataTest: `${dataTest}-filterinput`,
        placeholder: placeholder,
        value: filter,
        onChange: this.onFilterChange
      }), /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {
        options: options
      })));
    }
    const filtered = React.Children.map(options, child => {
      const isValidOption = checkIfValidOption(child);

      // Filter it out if it's an invalid option
      if (!isValidOption) {
        return null;
      }
      const {
        label
      } = child.props;

      // Filter by label, because that's the part of an option that's displayed to the user
      const match = label.toLowerCase().includes(filter.toLowerCase());
      return match ? child : null;
    });
    const hasMatch = React.Children.count(filtered) > 0;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FilterInput, {
      dataTest: `${dataTest}-filterinput`,
      placeholder: placeholder,
      value: filter,
      onChange: this.onFilterChange
    }), hasMatch ? /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {
      options: filtered
    })) : /*#__PURE__*/React.createElement(NoMatch, {
      message: noMatchText
    }));
  }
}
FilterableMenu.propTypes = {
  Menu: PropTypes.elementType.isRequired,
  dataTest: PropTypes.string.isRequired,
  noMatchText: PropTypes.string.isRequired,
  selected: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,
  empty: PropTypes.node,
  handleClose: PropTypes.func,
  handleFocusInput: PropTypes.func,
  options: PropTypes.node,
  placeholder: PropTypes.string,
  onChange: PropTypes.func
};