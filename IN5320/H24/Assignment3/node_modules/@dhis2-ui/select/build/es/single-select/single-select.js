import _JSXStyle from "styled-jsx/style";
import { requiredIf } from '@dhis2/prop-types';
import { spacers, sharedPropTypes } from '@dhis2/ui-constants';
import { StatusIcon } from '@dhis2-ui/status-icon';
import PropTypes from 'prop-types';
import React from 'react';
import { Loading as CommonLoading, Select } from '../select/index.js';
import { FilterableMenu } from './filterable-menu.js';
import { Input } from './input.js';
import { Menu } from './menu.js';
const SingleSelect = _ref => {
  let {
    className,
    selected = '',
    tabIndex,
    maxHeight,
    inputMaxHeight,
    onChange,
    onFocus,
    onKeyDown,
    onBlur,
    loading,
    error,
    warning,
    valid,
    disabled,
    children,
    clearable,
    clearText,
    filterable,
    filterPlaceholder,
    placeholder,
    prefix,
    empty,
    loadingText,
    noMatchText,
    initialFocus,
    dense,
    dataTest = 'dhis2-uicore-singleselect'
  } = _ref;
  // If the select is filterable, use a filterable menu
  const menu = filterable ? /*#__PURE__*/React.createElement(FilterableMenu, {
    dataTest: dataTest,
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : /*#__PURE__*/React.createElement(Menu, {
    empty: empty,
    dataTest: dataTest
  });
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2180377457", [spacers.dp8]]]) + " " + "root"
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2180377457", [spacers.dp8]]]) + " " + "root-input"
  }, /*#__PURE__*/React.createElement(Select, {
    className: className,
    selected: selected,
    input: /*#__PURE__*/React.createElement(Input, {
      clearable: clearable,
      clearText: clearText,
      dataTest: dataTest,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && /*#__PURE__*/React.createElement(CommonLoading, {
    message: loadingText,
    dataTest: `${dataTest}-loading`
  }))), /*#__PURE__*/React.createElement(StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2180377457",
    dynamic: [spacers.dp8]
  }, [`.root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:${spacers.dp8};}`, ".root-input.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;}"]));
};
SingleSelect.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  /** Text on button that clears selection. Required if `clearable` prop is true */
  clearText: requiredIf(props => props.clearable, PropTypes.string),
  /** Adds a button to clear selection */
  clearable: PropTypes.bool,
  dataTest: PropTypes.string,
  dense: PropTypes.bool,
  disabled: PropTypes.bool,
  /** Text or component to display when there are no options */
  empty: PropTypes.node,
  /** Applies 'error' appearance for validation feedback. Mutually exclusive with `warning` and `valid` props */
  error: sharedPropTypes.statusPropType,
  filterPlaceholder: PropTypes.string,
  /** Adds a filter field to add text to filter options */
  filterable: PropTypes.bool,
  initialFocus: PropTypes.bool,
  inputMaxHeight: PropTypes.string,
  loading: PropTypes.bool,
  loadingText: PropTypes.string,
  maxHeight: PropTypes.string,
  /** Text to show when filter returns no results. Required if `filterable` prop is true */
  noMatchText: requiredIf(props => props.filterable, PropTypes.string),
  placeholder: PropTypes.string,
  prefix: PropTypes.string,
  selected: PropTypes.string,
  tabIndex: PropTypes.string,
  /** Applies 'valid' appearance for validation feedback. Mutually exclusive with `warning` and `error` props */
  valid: sharedPropTypes.statusPropType,
  /** Applies 'warning' appearance for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: sharedPropTypes.statusPropType,
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  onKeyDown: PropTypes.func
};
export { SingleSelect };