"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
(0, _cypressCucumberPreprocessor.Given)('a MultiSelect with hidden sibling elements', () => {
  cy.visitStory('MultiSelect', 'Menu width changing');
  cy.get('[data-test="dhis2-uicore-multiselect"]').then($el => {
    cy.wrap($el.outerWidth()).as('originalWidth');
  });
});
(0, _cypressCucumberPreprocessor.When)('the button is clicked', () => {
  cy.get('[data-test="dhis2-uicore-button"]').click();
});
(0, _cypressCucumberPreprocessor.Then)('the siblings are displayed', () => {
  cy.get('.toggler').should('exist').and('have.length', 2);
});
(0, _cypressCucumberPreprocessor.Then)('the menu width has decreased', () => {
  cy.get('[data-test="dhis2-uicore-multiselect"]').then($el => {
    const newWidth = $el.outerWidth();
    cy.get('@originalWidth').should('be.greaterThan', newWidth);
  });
});
(0, _cypressCucumberPreprocessor.When)('the MultiSelect menu is open', () => {
  cy.get('[data-test="dhis2-uicore-select-menu-menuwrapper"]').should('be.visible');
});
(0, _cypressCucumberPreprocessor.Then)('the MultiSelect input is left aligned with the menu', () => {
  const selectDataTest = '[data-test="dhis2-uicore-multiselect"]';
  const menuDataTest = '[data-test="dhis2-uicore-select-menu-menuwrapper"]';
  cy.getAll(selectDataTest, menuDataTest).should(_ref => {
    let [inputs, menus] = _ref;
    expect(inputs.length).to.equal(1);
    expect(menus.length).to.equal(1);
    const $input = inputs[0];
    const $menu = menus[0];
    const inputRect = $input.getBoundingClientRect();
    const menuRect = $menu.getBoundingClientRect();
    expect(Math.round(inputRect.left)).to.equal(Math.round(menuRect.left));
  });
});
(0, _cypressCucumberPreprocessor.When)('the MultiSelect input and menu have the same width', () => {
  const inputSelector = '[data-test="dhis2-uicore-select"]';
  const menuSelector = '[data-test="dhis2-uicore-select-menu-menuwrapper"]';
  cy.getAll(inputSelector, menuSelector).should(_ref2 => {
    let [$input, $menu] = _ref2;
    const inputWidth = Math.round($input.outerWidth());
    const menuWidth = Math.round($menu.outerWidth());
    expect(inputWidth).to.equal(menuWidth);
  });
});