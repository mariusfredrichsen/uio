"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterableMenu = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _filterInput = require("./filter-input.js");
var _noMatch = require("./no-match.js");
var _optionHelpers = require("./option-helpers.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class FilterableMenu extends _react.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      filter: ''
    });
    _defineProperty(this, "onFilterChange", _ref => {
      let {
        value
      } = _ref;
      this.setState({
        filter: value
      });
    });
  }
  render() {
    const {
      dataTest,
      options,
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      placeholder,
      noMatchText,
      Menu
    } = this.props;
    const {
      filter
    } = this.state;
    const menuProps = {
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      dataTest
    };
    const renderedOptions = (0, _optionHelpers.filterIgnored)(options);

    // If there are no options or there's no filter, just pass everything through
    if (_react.default.Children.count(renderedOptions) === 0 || !filter) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_filterInput.FilterInput, {
        dataTest: `${dataTest}-filterinput`,
        placeholder: placeholder,
        value: filter,
        onChange: this.onFilterChange
      }), /*#__PURE__*/_react.default.createElement(Menu, _extends({}, menuProps, {
        options: options
      })));
    }
    const filtered = _react.default.Children.map(options, child => {
      const isValidOption = (0, _optionHelpers.checkIfValidOption)(child);

      // Filter it out if it's an invalid option
      if (!isValidOption) {
        return null;
      }
      const {
        label
      } = child.props;

      // Filter by label, because that's the part of an option that's displayed to the user
      const match = label.toLowerCase().includes(filter.toLowerCase());
      return match ? child : null;
    });
    const hasMatch = _react.default.Children.count(filtered) > 0;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_filterInput.FilterInput, {
      dataTest: `${dataTest}-filterinput`,
      placeholder: placeholder,
      value: filter,
      onChange: this.onFilterChange
    }), hasMatch ? /*#__PURE__*/_react.default.createElement(Menu, _extends({}, menuProps, {
      options: filtered
    })) : /*#__PURE__*/_react.default.createElement(_noMatch.NoMatch, {
      message: noMatchText
    }));
  }
}
exports.FilterableMenu = FilterableMenu;
FilterableMenu.propTypes = {
  Menu: _propTypes.default.elementType.isRequired,
  dataTest: _propTypes.default.string.isRequired,
  noMatchText: _propTypes.default.string.isRequired,
  selected: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]).isRequired,
  empty: _propTypes.default.node,
  handleClose: _propTypes.default.func,
  handleFocusInput: _propTypes.default.func,
  options: _propTypes.default.node,
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func
};