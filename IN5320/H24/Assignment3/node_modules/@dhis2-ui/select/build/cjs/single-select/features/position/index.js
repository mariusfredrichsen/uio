"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
(0, _cypressCucumberPreprocessor.Given)('there is enough space below the anchor to fit the SingleSelect menu', () => {
  cy.visitStory('SingleSelect', 'Default position');
});
(0, _cypressCucumberPreprocessor.Given)('there is not enough space below the anchor to fit the SingleSelect menu', () => {
  cy.visitStory('SingleSelect', 'Flipped position');
});
(0, _cypressCucumberPreprocessor.Given)('there is not enough space above or below the anchor to fit the SingleSelect menu', () => {
  cy.visitStory('SingleSelect', 'Shifted into view');
});
(0, _cypressCucumberPreprocessor.When)('the SingleSelect is clicked', () => {
  cy.get('[data-test="dhis2-uicore-singleselect"]').click();
});
(0, _cypressCucumberPreprocessor.When)('the window is scrolled down', () => {
  // Ensure the body can scroll first
  cy.get('body').then($body => {
    $body.height('5000px');
  });
  cy.scrollTo(0, 800);
});
(0, _cypressCucumberPreprocessor.Then)('the top of the menu is aligned with the bottom of the input', () => {
  const selectDataTest = '[data-test="dhis2-uicore-singleselect"]';
  const menuDataTest = '[data-test="dhis2-uicore-select-menu-menuwrapper"]';
  cy.getAll(selectDataTest, menuDataTest).should(_ref => {
    let [selects, menus] = _ref;
    expect(selects.length).to.equal(1);
    expect(menus.length).to.equal(1);
    const $select = selects[0];
    const $menu = menus[0];
    const selectRect = $select.getBoundingClientRect();
    const menuRect = $menu.getBoundingClientRect();
    expect(menuRect.top).to.be.closeTo(selectRect.bottom, 1);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the bottom of the menu is aligned with the top of the input', () => {
  const selectDataTest = '[data-test="dhis2-uicore-singleselect"]';
  const menuDataTest = '[data-test="dhis2-uicore-select-menu-menuwrapper"]';
  cy.getAll(selectDataTest, menuDataTest).should(_ref2 => {
    let [selects, menus] = _ref2;
    expect(selects.length).to.equal(1);
    expect(menus.length).to.equal(1);
    const $select = selects[0];
    const $menu = menus[0];
    const selectRect = $select.getBoundingClientRect();
    const menuRect = $menu.getBoundingClientRect();
    expect(selectRect.top).to.be.closeTo(menuRect.bottom, 1);
  });
});
(0, _cypressCucumberPreprocessor.Then)('it is rendered on top of the SingleSelect', () => {
  const selectDataTest = '[data-test="dhis2-uicore-singleselect"]';
  const menuDataTest = '[data-test="dhis2-uicore-select-menu-menuwrapper"]';
  cy.getAll(selectDataTest, menuDataTest).should(_ref3 => {
    let [selects, menus] = _ref3;
    expect(selects.length).to.equal(1);
    expect(menus.length).to.equal(1);
    const $select = selects[0];
    const $menu = menus[0];
    const selectRect = $select.getBoundingClientRect();
    const menuRect = $menu.getBoundingClientRect();
    expect(selectRect.top).to.be.greaterThan(menuRect.top);
    expect(menuRect.bottom).to.be.greaterThan(selectRect.bottom);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the left of the SingleSelect is aligned with the left of the anchor', () => {
  const selectDataTest = '[data-test="dhis2-uicore-singleselect"]';
  const menuDataTest = '[data-test="dhis2-uicore-select-menu-menuwrapper"]';
  cy.getAll(selectDataTest, menuDataTest).should(_ref4 => {
    let [selects, menus] = _ref4;
    expect(selects.length).to.equal(1);
    expect(menus.length).to.equal(1);
    const $select = selects[0];
    const $menu = menus[0];
    const selectRect = $select.getBoundingClientRect();
    const menuRect = $menu.getBoundingClientRect();
    expect(selectRect.left).to.be.closeTo(menuRect.left, 1);
  });
});