"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SingleSelect = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _propTypes = require("@dhis2/prop-types");
var _uiConstants = require("@dhis2/ui-constants");
var _statusIcon = require("@dhis2-ui/status-icon");
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = require("../select/index.js");
var _filterableMenu = require("./filterable-menu.js");
var _input = require("./input.js");
var _menu = require("./menu.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const SingleSelect = _ref => {
  let {
    className,
    selected = '',
    tabIndex,
    maxHeight,
    inputMaxHeight,
    onChange,
    onFocus,
    onKeyDown,
    onBlur,
    loading,
    error,
    warning,
    valid,
    disabled,
    children,
    clearable,
    clearText,
    filterable,
    filterPlaceholder,
    placeholder,
    prefix,
    empty,
    loadingText,
    noMatchText,
    initialFocus,
    dense,
    dataTest = 'dhis2-uicore-singleselect'
  } = _ref;
  // If the select is filterable, use a filterable menu
  const menu = filterable ? /*#__PURE__*/_react.default.createElement(_filterableMenu.FilterableMenu, {
    dataTest: dataTest,
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    empty: empty,
    dataTest: dataTest
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-test": dataTest,
    className: _style.default.dynamic([["2180377457", [_uiConstants.spacers.dp8]]]) + " " + "root"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["2180377457", [_uiConstants.spacers.dp8]]]) + " " + "root-input"
  }, /*#__PURE__*/_react.default.createElement(_index.Select, {
    className: className,
    selected: selected,
    input: /*#__PURE__*/_react.default.createElement(_input.Input, {
      clearable: clearable,
      clearText: clearText,
      dataTest: dataTest,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && /*#__PURE__*/_react.default.createElement(_index.Loading, {
    message: loadingText,
    dataTest: `${dataTest}-loading`
  }))), /*#__PURE__*/_react.default.createElement(_statusIcon.StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2180377457",
    dynamic: [_uiConstants.spacers.dp8]
  }, [`.root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:${_uiConstants.spacers.dp8};}`, ".root-input.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;}"]));
};
exports.SingleSelect = SingleSelect;
SingleSelect.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  /** Text on button that clears selection. Required if `clearable` prop is true */
  clearText: (0, _propTypes.requiredIf)(props => props.clearable, _propTypes2.default.string),
  /** Adds a button to clear selection */
  clearable: _propTypes2.default.bool,
  dataTest: _propTypes2.default.string,
  dense: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  /** Text or component to display when there are no options */
  empty: _propTypes2.default.node,
  /** Applies 'error' appearance for validation feedback. Mutually exclusive with `warning` and `valid` props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  filterPlaceholder: _propTypes2.default.string,
  /** Adds a filter field to add text to filter options */
  filterable: _propTypes2.default.bool,
  initialFocus: _propTypes2.default.bool,
  inputMaxHeight: _propTypes2.default.string,
  loading: _propTypes2.default.bool,
  loadingText: _propTypes2.default.string,
  maxHeight: _propTypes2.default.string,
  /** Text to show when filter returns no results. Required if `filterable` prop is true */
  noMatchText: (0, _propTypes.requiredIf)(props => props.filterable, _propTypes2.default.string),
  placeholder: _propTypes2.default.string,
  prefix: _propTypes2.default.string,
  selected: _propTypes2.default.string,
  tabIndex: _propTypes2.default.string,
  /** Applies 'valid' appearance for validation feedback. Mutually exclusive with `warning` and `error` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,
  /** Applies 'warning' appearance for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  onBlur: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onKeyDown: _propTypes2.default.func
};