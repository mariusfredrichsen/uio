"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SingleSelectField = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _box = require("@dhis2-ui/box");
var _field = require("@dhis2-ui/field");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = _interopRequireDefault(require("../locales/index.js"));
var _index2 = require("../single-select/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// TODO: translate
const translate = (prop, interpolationObject) => {
  if (typeof prop === 'function') {
    return prop(interpolationObject);
  }
  return prop;
};
class SingleSelectField extends _react.default.Component {
  render() {
    const {
      className,
      onChange,
      onFocus,
      onKeyDown,
      onBlur,
      required,
      label,
      valid,
      error,
      warning,
      disabled,
      loading,
      selected = SingleSelectField.defaultProps.selected,
      tabIndex,
      helpText,
      validationText,
      maxHeight,
      inputMaxHeight,
      inputWidth,
      children,
      clearable,
      clearText = SingleSelectField.defaultProps.clearText,
      filterable,
      filterPlaceholder = SingleSelectField.defaultProps.filterPlaceholder,
      placeholder,
      prefix,
      empty = SingleSelectField.defaultProps.empty,
      loadingText = SingleSelectField.defaultProps.loadingText,
      noMatchText = SingleSelectField.defaultProps.noMatchText,
      initialFocus,
      dense,
      dataTest = SingleSelectField.defaultProps.dataTest
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_field.Field, {
      className: className,
      dataTest: dataTest,
      disabled: disabled,
      required: required,
      label: label,
      helpText: helpText,
      validationText: validationText,
      error: error,
      warning: warning,
      valid: valid
    }, /*#__PURE__*/_react.default.createElement(_box.Box, {
      width: inputWidth,
      minWidth: "100px"
    }, /*#__PURE__*/_react.default.createElement(_index2.SingleSelect, {
      selected: selected,
      tabIndex: tabIndex,
      maxHeight: maxHeight,
      inputMaxHeight: inputMaxHeight,
      onChange: onChange,
      onFocus: onFocus,
      onKeyDown: onKeyDown,
      onBlur: onBlur,
      loading: loading,
      error: error,
      warning: warning,
      valid: valid,
      disabled: disabled,
      clearable: clearable,
      clearText: translate(clearText),
      filterable: filterable,
      filterPlaceholder: translate(filterPlaceholder),
      placeholder: placeholder,
      prefix: prefix,
      empty: translate(empty),
      loadingText: translate(loadingText),
      noMatchText: translate(noMatchText),
      initialFocus: initialFocus,
      dense: dense
    }, children)));
  }
}
exports.SingleSelectField = SingleSelectField;
_defineProperty(SingleSelectField, "defaultProps", {
  dataTest: 'dhis2-uiwidgets-singleselectfield',
  selected: '',
  clearText: () => _index.default.t('Clear'),
  empty: () => _index.default.t('No data found'),
  filterPlaceholder: () => _index.default.t('Type to filter options'),
  loadingText: () => _index.default.t('Loading options'),
  noMatchText: () => _index.default.t('No options found')
});
SingleSelectField.propTypes = {
  /** Should be `SingleSelectOption` components */
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  /** Label for the button that clears selections */
  clearText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  /** Adds a button to the SingleSelect that clears selections when pressed */
  clearable: _propTypes.default.bool,
  dataTest: _propTypes.default.string,
  /** Makes the SingleSelect smaller */
  dense: _propTypes.default.bool,
  /** Disables the SingleSelect */
  disabled: _propTypes.default.bool,
  /** Text to display when there are no options */
  empty: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  /** Adds 'error' appearance for validation feedback. Mutually exclusive with 'valid' and 'warning' props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  /** Placeholder text to show in the filter field when it is empty */
  filterPlaceholder: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  /** Adds a field to filter options */
  filterable: _propTypes.default.bool,
  /** Useful guiding text to display below the SingleSelect */
  helpText: _propTypes.default.string,
  /** Grabs initial focus on the page */
  initialFocus: _propTypes.default.bool,
  /** Constrains the height of the input */
  inputMaxHeight: _propTypes.default.string,
  /** Sets the width of the input. Can be any valid CSS measurement */
  inputWidth: _propTypes.default.string,
  /** Text for the label above the SingleSelect */
  label: _propTypes.default.string,
  /** Applies a loading appearance to the dropdown options */
  loading: _propTypes.default.bool,
  /** Text to display when `loading` is true */
  loadingText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  /** Constrains height of the SingleSelect */
  maxHeight: _propTypes.default.string,
  /** Text to display when there are no filter results */
  noMatchText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  /** Placeholder text when the SingleSelect is empty */
  placeholder: _propTypes.default.string,
  /** Leading text to prefix selections */
  prefix: _propTypes.default.string,
  /** Indicates that a selection is required */
  required: _propTypes.default.bool,
  /** Selected item in the SingleSelect (the string should refer to the item's `value` attribute) */
  selected: _propTypes.default.string,
  tabIndex: _propTypes.default.string,
  /** Adds 'valid' appearance for validation feedback. Mutually exclusive with 'error' and 'warning' props */
  valid: _uiConstants.sharedPropTypes.statusPropType,
  /** Text to provide form validation feedback. Receives styles according to validation status */
  validationText: _propTypes.default.string,
  /** Adds 'warning' appearance for validation feedback. Mutually exclusive with 'valid' and 'error' props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  /** Called with signature `({ selected: string }, event)` */
  onBlur: _propTypes.default.func,
  /** Called with signature `({ selected: string }, event)` */
  onChange: _propTypes.default.func,
  /** Called with signature `({ selected: string }, event)` */
  onFocus: _propTypes.default.func,
  /** Called with signature `({ selected: string }, event)` */
  onKeyDown: _propTypes.default.func
};