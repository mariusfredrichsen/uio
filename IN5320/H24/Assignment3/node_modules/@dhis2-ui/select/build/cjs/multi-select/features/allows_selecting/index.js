"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
(0, _cypressCucumberPreprocessor.Given)('a MultiSelect with a disabled option and onChange handler is rendered', () => {
  cy.visitStory('MultiSelect', 'With disabled option and on change');
});
(0, _cypressCucumberPreprocessor.Given)('a MultiSelect with custom options and onChange handler is rendered', () => {
  cy.visitStory('MultiSelect', 'With custom options and on change');
});
(0, _cypressCucumberPreprocessor.When)('an option is clicked', () => {
  cy.contains('option one').click();
});
(0, _cypressCucumberPreprocessor.When)('the selected option is clicked', () => {
  cy.get('[data-test="dhis2-uicore-multiselectoption"]:contains("option one")').click();
});
(0, _cypressCucumberPreprocessor.When)('another option is clicked', () => {
  cy.contains('option two').click();
});
(0, _cypressCucumberPreprocessor.When)("the chip's X is clicked", () => {
  cy.get('[data-test="dhis2-uicore-chip-remove"]').click();
});
(0, _cypressCucumberPreprocessor.When)('the disabled option is clicked', () => {
  cy.contains('disabled option').click();
});
(0, _cypressCucumberPreprocessor.When)('the selected option is clicked again', () => {
  cy.get('[data-test="dhis2-uicore-multiselectoption"]:contains("option one")').click();
});
(0, _cypressCucumberPreprocessor.Then)('the clicked option is selected', () => {
  cy.window().should(win => {
    expect(win.onChange).to.be.calledOnce;
    expect(win.onChange).to.be.calledWith({
      selected: ['1']
    });
  });
});
(0, _cypressCucumberPreprocessor.Then)('the clicked option is selected as well', () => {
  cy.window().should(win => {
    expect(win.onChange).to.be.calledOnce;
    expect(win.onChange).to.be.calledWith({
      selected: ['1', '2']
    });
  });
});
(0, _cypressCucumberPreprocessor.Then)('the selected option is deselected', () => {
  cy.window().should(win => {
    expect(win.onChange).to.be.calledOnce;
    expect(win.onChange).to.be.calledWith({
      selected: []
    });
  });
});
(0, _cypressCucumberPreprocessor.Then)('the onchange handler is not called', () => {
  cy.window().should(win => {
    expect(win.onChange).to.not.be.called;
  });
});
(0, _cypressCucumberPreprocessor.Then)('the previously selected option is deselected', () => {
  cy.window().should(win => {
    expect(win.onChange).to.be.calledTwice;
    expect(win.onChange).to.be.calledWith({
      selected: []
    });
  });
});