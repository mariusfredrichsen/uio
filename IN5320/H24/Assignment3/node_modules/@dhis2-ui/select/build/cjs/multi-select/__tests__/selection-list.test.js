"use strict";

var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
var _index = require("../../multi-select-option/index.js");
var _selectionList = require("../selection-list.js");
require("@testing-library/jest-dom");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('<SelectionList />', () => {
  const env = process.env;
  beforeEach(() => {
    // Ensure process.env is also reset for cached modules
    jest.resetModules();
    process.env = {
      ...env
    };

    // Allow spying on console.error and silence rendering errors
    jest.spyOn(console, 'error').mockImplementation(() => {});
  });
  afterEach(() => {
    // Restore process.env to original state
    process.env = env;

    // Restore all mocks back to original values
    jest.restoreAllMocks();
  });
  describe('production', () => {
    it('should not throw an error for a selection that is not in the options', () => {
      process.env.NODE_ENV = 'production';
      const options = /*#__PURE__*/_react2.default.createElement(_index.MultiSelectOption, {
        key: "1",
        label: "one",
        value: "1"
      });
      const selected = ['value'];
      expect(() => {
        (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_selectionList.SelectionList, {
          selected: selected,
          options: options,
          disabled: false,
          onChange: () => {}
        }));
      }).not.toThrow();
    });
    it('should show the selection for a selection that is not in the options', () => {
      process.env.NODE_ENV = 'production';
      const options = /*#__PURE__*/_react2.default.createElement(_index.MultiSelectOption, {
        key: "1",
        label: "one",
        value: "1"
      });
      const selected = ['value'];
      const {
        getByText
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_selectionList.SelectionList, {
        selected: selected,
        options: options,
        disabled: false,
        onChange: () => {}
      }));
      expect(getByText(selected)).toBeInTheDocument();
    });
    it('log an error for a selection that is not in the options', () => {
      process.env.NODE_ENV = 'production';
      const options = /*#__PURE__*/_react2.default.createElement(_index.MultiSelectOption, {
        key: "1",
        label: "one",
        value: "1"
      });
      const selected = ['value'];
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_selectionList.SelectionList, {
        selected: selected,
        options: options,
        disabled: false,
        onChange: () => {}
      }));
      expect(console.error).toHaveBeenCalledWith('There is no option with the value: "value". Make sure that all the values passed to the selected prop match the value of an existing option.');
    });
  });
  describe('not production', () => {
    it('should throw an error for a selection that is not in the options', () => {
      process.env.NODE_ENV = 'development';
      const options = /*#__PURE__*/_react2.default.createElement(_index.MultiSelectOption, {
        key: "1",
        label: "one",
        value: "1"
      });
      const selected = ['value'];
      expect(() => {
        (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_selectionList.SelectionList, {
          selected: selected,
          options: options,
          disabled: false,
          onChange: () => {}
        }));
      }).toThrow('There is no option with the value: "value". Make sure that all the values passed to the selected prop match the value of an existing option.');
    });
  });
});