"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Node = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _leaves = require("./leaves.js");
var _spacer = require("./spacer.js");
var _toggle = require("./toggle.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const Node = _ref => {
  let {
    open,
    className,
    component: label,
    children,
    icon,
    onOpen,
    onClose,
    dataTest = 'dhis2-uicore-node'
  } = _ref;
  const hasLeaves = !!_react.default.Children.toArray(children).filter(i => i).length;
  const showArrow = !icon && hasLeaves;
  const showSpacer = !icon && !hasLeaves;
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-test": dataTest,
    className: "jsx-1433072554" + " " + ((0, _classnames.default)('node', className) || "")
  }, icon && /*#__PURE__*/_react.default.createElement("div", {
    "data-test": `${dataTest}-icon`,
    className: "jsx-1433072554"
  }, icon), showArrow && /*#__PURE__*/_react.default.createElement(_toggle.Toggle, {
    open: open,
    onOpen: onOpen,
    onClose: onClose,
    dataTest: `${dataTest}-toggle`
  }), showSpacer && /*#__PURE__*/_react.default.createElement(_spacer.Spacer, null), /*#__PURE__*/_react.default.createElement("div", {
    "data-test": `${dataTest}-content`,
    className: "jsx-1433072554"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "data-test": `${dataTest}-label`,
    className: "jsx-1433072554"
  }, label), /*#__PURE__*/_react.default.createElement(_leaves.Leaves, {
    open: open,
    dataTest: `${dataTest}-leaves`
  }, children)), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "1433072554"
  }, [".node.jsx-1433072554{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}"]));
};
exports.Node = Node;
Node.propTypes = {
  /** Content below this level of the hierarchy; children are revealed when this leaf is 'open' */
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  /** Content/label for this leaf, for example a checkbox */
  component: _propTypes.default.element,
  dataTest: _propTypes.default.string,
  /** A custom icon to use instead of a toggle arrow */
  icon: _propTypes.default.node,
  open: _propTypes.default.bool,
  onClose: _propTypes.default.func,
  onOpen: _propTypes.default.func
};