import React from 'react';
import { Transfer } from '../transfer.js';
import { options } from './common/options.js';
import { statefulDecorator } from './common/stateful-decorator.js';
export default {
  title: 'Transfer filtering',
  decorators: [statefulDecorator()]
};
export const EmptyResult = (_, _ref) => {
  let {
    selected,
    onChange
  } = _ref;
  return /*#__PURE__*/React.createElement(Transfer, {
    filterable: true,
    initialSearchTerm: "Foobarbaz",
    selected: selected,
    onChange: onChange,
    sourceEmptyPlaceholder: /*#__PURE__*/React.createElement("span", {
      "data-test": "no-results"
    }, "No results"),
    options: options
  });
};
export const SomeResults = (_, _ref2) => {
  let {
    selected,
    onChange
  } = _ref2;
  return /*#__PURE__*/React.createElement(Transfer, {
    selected: selected,
    filterable: true,
    initialSearchTerm: "ANC",
    onChange: onChange,
    options: options
  });
};
export const UppercaseSearch = (_, _ref3) => {
  let {
    selected,
    onChange
  } = _ref3;
  return /*#__PURE__*/React.createElement(Transfer, {
    selected: selected,
    filterable: true,
    initialSearchTerm: "ANC",
    onChange: onChange,
    options: options
  });
};
export const LowercaseSearch = (_, _ref4) => {
  let {
    selected,
    onChange
  } = _ref4;
  return /*#__PURE__*/React.createElement(Transfer, {
    filterable: true,
    initialSearchTerm: "anc",
    selected: selected,
    onChange: onChange,
    options: options
  });
};
export const AncCustomFilter = (_, _ref5) => {
  let {
    selected,
    onChange
  } = _ref5;
  return /*#__PURE__*/React.createElement(Transfer, {
    filterable: true,
    selected: selected,
    onChange: onChange,
    filterCallback: (options, filter) => options.filter(_ref6 => {
      let {
        label
      } = _ref6;
      return label.match(`(^| )ANC .*${filter}`);
    }),
    options: options
  });
};
window.customFilterCallback = (options, filter) => {
  return options.filter(_ref7 => {
    let {
      label
    } = _ref7;
    return label.indexOf(filter) !== -1;
  });
};
window.Cypress && window.Cypress.cy.spy(window, 'customFilterCallback');
export const ControlledFilter = (_, _ref8) => {
  let {
    filter,
    onChange,
    onFilterChange,
    selected
  } = _ref8;
  return /*#__PURE__*/React.createElement(Transfer, {
    selected: selected,
    onChange: onChange,
    filterable: true,
    filterCallback: window.customFilterCallback,
    searchTerm: filter,
    onFilterChange: onFilterChange,
    options: options
  });
};
ControlledFilter.story = {
  decorators: [statefulDecorator()]
};