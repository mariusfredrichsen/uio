function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { SingleSelectField, SingleSelectOption } from '@dhis2-ui/select';
import { Tab, TabBar } from '@dhis2-ui/tab';
import PropTypes from 'prop-types';
import React, { useEffect, useState } from 'react';
import { TransferOption } from './transfer-option.js';
import { Transfer } from './transfer.js';
const subtitle = 'Allows users to select options from a list';
const description = `
#### Usage

Use a transfer component wherever a user needs to make a complex selection. Simple selections can be achieved with checkboxes, radio buttons or a select.

There are use-cases that are particularly suitable for a transfer component:

- when a user needs to select some options from several different groups at the same time
- if the selection needs to have a defined order
- when the user will be interacting with and editing the selection often
- if a user needs to easily compare non-selected and selected options
- if a user is making selections as part of a complex flow, especially where there are many options to choose from

#### Terminology

This component has to differentiate between different types of options,
here's an explanation of their meaning:

- source options: These are options listed on the left and are available for selection
- picked options: These options have been selected by the user and are on the right side
- highlighted option: These are visually highlighted options than can be on either side and are ready for transferral with the action buttons to the other side
- filtered options: These are the displayed source options filtered by a search term or a custom search algorithm. The api surface uses "selected" for "picked" to be consistent with the rest of the library

#### More details

See more about the options available for Transfers at [Design System: Transfer](https://github.com/dhis2/design-system/blob/master/organisms/transfer.md#transfer).

\`\`\`js
import { Transfer, TransferOption } from '@dhis2/ui'
\`\`\`
`;
const options = [{
  label: 'ANC 1st visit',
  value: 'anc_1st_visit'
}, {
  label: 'ANC 2nd visit',
  value: 'anc_2nd_visit'
}, {
  label: 'ANC 3rd visit',
  value: 'anc_3rd_visit'
}, {
  label: 'ANC 4th or more visits',
  value: 'anc_4th_or_more_visits'
}, {
  label: 'ARI treated with antibiotics (pneumonia) follow-up',
  value: 'ari_treated_with_antibiotics_(pneumonia)_follow-up'
}, {
  label: 'ARI treated with antibiotics (pneumonia) new',
  value: 'ari_treated_with_antibiotics_(pneumonia)_new'
}, {
  label: 'ARI treated with antibiotics (pneumonia) referrals',
  value: 'ari_treated_with_antibiotics_(pneumonia)_referrals'
}, {
  label: 'ARI treated without antibiotics (cough) follow-up',
  value: 'ari_treated_without_antibiotics_(cough)_follow-up'
}, {
  label: 'ARI treated without antibiotics (cough) new',
  value: 'ari_treated_without_antibiotics_(cough)_new'
}, {
  label: 'ARI treated without antibiotics (cough) referrals',
  value: 'ari_treated_without_antibiotics_(cough)_referrals'
}, {
  label: 'ART No clients who stopped TRT due to TRT failure',
  value: 'art_no_clients_who_stopped_trt_due_to_trt_failure'
}, {
  label: 'ART No clients who stopped TRT due to adverse clinical status/event',
  value: 'art_no_clients_who_stopped_trt_due_to_adverse_clinical_status/event'
}, {
  label: 'ART No clients with change of regimen due to drug toxicity',
  value: 'art_no_clients_with_change_of_regimen_due_to_drug_toxicity'
}, {
  label: 'ART No clients with new adverse drug reaction',
  value: 'art_no_clients_with_new_adverse_drug_reaction'
}, {
  label: 'ART No started Opportunist Infection prophylaxis',
  value: 'art_no_started_opportunist_infection_prophylaxis'
}, {
  label: 'ART clients with new adverse clinical event',
  value: 'art_clients_with_new_adverse_clinical_event'
}, {
  label: 'ART defaulters',
  value: 'art_defaulters'
}, {
  label: 'ART enrollment stage 1',
  value: 'art_enrollment_stage_1'
}, {
  label: 'ART enrollment stage 2',
  value: 'art_enrollment_stage_2'
}, {
  label: 'ART enrollment stage 3',
  value: 'art_enrollment_stage_3'
}, {
  label: 'ART enrollment stage 4',
  value: 'art_enrollment_stage_4'
}, {
  label: 'ART entry point: No PMTCT',
  value: 'art_entry_point:_no_pmtct'
}];

/**
 * Default args are needed because storybook currently struggles with
 * functions as default props: they are sent to the component as strings when
 * `{...args}` is spread into the component in the Template, which causes an
 * error that looks like 'renderOption is not a function'
 *
 * https://github.com/storybookjs/storybook/issues/12455#issuecomment-702763930
 */
export default {
  title: 'Transfer',
  component: Transfer,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      },
      source: {
        type: 'code'
      }
    }
  },
  // Default args:
  args: {
    dataTest: 'dhis2-uicore-transfer',
    height: '240px',
    initialSearchTerm: '',
    initialSearchTermPicked: '',
    maxSelections: Infinity,
    optionsWidth: '320px',
    selected: [],
    selectedWidth: '320px',
    options: options
  }
};
const StatefulTemplate = _ref => {
  let {
    initiallySelected = [],
    ...args
  } = _ref;
  const [selected, setSelected] = useState(initiallySelected);
  const onChange = payload => setSelected(payload.selected);
  return /*#__PURE__*/React.createElement(Transfer, _extends({}, args, {
    selected: selected,
    onChange: onChange
  }));
};
StatefulTemplate.propTypes = {
  initiallySelected: PropTypes.array
};
export const SingleSelection = StatefulTemplate.bind({});
SingleSelection.args = {
  maxSelections: 1
};
export const Multiple = StatefulTemplate.bind({});
Multiple.args = {
  options: options.slice(0, 3)
};
export const Header = StatefulTemplate.bind({});
Header.args = {
  leftHeader: /*#__PURE__*/React.createElement("h3", null, "Header on the left side"),
  rightHeader: /*#__PURE__*/React.createElement("h4", null, "Header on the right side")
};
export const OptionsFooter = StatefulTemplate.bind({});
OptionsFooter.args = {
  leftFooter: /*#__PURE__*/React.createElement("a", {
    href: "#",
    style: {
      color: 'grey',
      padding: '8px 0',
      display: 'block'
    }
  }, "Reload list")
};
export const Filtered = StatefulTemplate.bind({});
Filtered.args = {
  filterable: true,
  initialSearchTerm: 'ANC'
};
export const FilteredPicked = StatefulTemplate.bind({});
FilteredPicked.args = {
  filterablePicked: true,
  initialSearchTermPicked: 'ANC',
  initiallySelected: options.map(_ref2 => {
    let {
      value
    } = _ref2;
    return value;
  })
};
export const FilteredPlaceholder = StatefulTemplate.bind({});
FilteredPlaceholder.args = {
  filterable: true,
  filterLabel: 'Filter with placeholder',
  filterPlaceholder: 'Search'
};
const renderOption = _ref3 => {
  let {
    label,
    value,
    onClick,
    highlighted,
    selected
  } = _ref3;
  return /*#__PURE__*/React.createElement("p", {
    onClick: event => onClick({
      label,
      value
    }, event),
    style: {
      background: highlighted ? 'green' : 'blue',
      color: selected ? 'orange' : 'white'
    }
  }, "Custom: ", label, " (label), ", value, " (value)");
};
const RenderOptionCode = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("strong", null, "Custom option code:"), /*#__PURE__*/React.createElement("code", null, /*#__PURE__*/React.createElement("pre", null, `const renderOption = ({ label, value, onClick, highlighted, selected }) => (
                <p
                    onClick={event => onClick({ label, value }, event)}
                    style={{
                        background: highlighted ? 'green' : 'blue',
                        color: selected ? 'orange' : 'white',
                    }}
                >
                    Custom: {label} (label), {value} (value)
                </p>
            )`)));
const StatefulTemplateCustomRenderOption = _ref4 => {
  let {
    initiallySelected = [],
    ...args
  } = _ref4;
  const [selected, setSelected] = useState(initiallySelected);
  const onChange = payload => setSelected(payload.selected);
  return /*#__PURE__*/React.createElement(Transfer, _extends({}, args, {
    selected: selected,
    onChange: onChange
  }));
};
StatefulTemplateCustomRenderOption.propTypes = {
  initiallySelected: PropTypes.array
};
export const CustomListOptions = args => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderOptionCode, null), /*#__PURE__*/React.createElement(StatefulTemplateCustomRenderOption, args));
CustomListOptions.args = {
  renderOption,
  options: options.slice(0, 2),
  initiallySelected: options.slice(0, 2).map(_ref5 => {
    let {
      value
    } = _ref5;
    return value;
  })
};
export const IndividualCustomOption = StatefulTemplateCustomRenderOption.bind({});
IndividualCustomOption.args = {
  addAllText: 'Add all',
  addIndividualText: 'Add individual',
  removeAllText: 'Remove all',
  removeIndividualText: 'Remove individual',
  renderOption: option => {
    if (option.value === options[0].value) {
      return renderOption(option);
    }
    return /*#__PURE__*/React.createElement(TransferOption, option);
  }
};
export const CustomButtonText = StatefulTemplate.bind({});
CustomButtonText.args = {
  addAllText: 'Add all',
  addIndividualText: 'Add individual',
  removeAllText: 'Remove all',
  removeIndividualText: 'Remove individual'
};
export const SourceEmptyPlaceholder = StatefulTemplate.bind({});
SourceEmptyPlaceholder.args = {
  sourceEmptyPlaceholder: /*#__PURE__*/React.createElement("p", {
    style: {
      textAlign: 'center'
    }
  }, "No options found.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
    href: "#",
    style: {
      color: 'grey'
    }
  }, "Add option")),
  options: []
};
export const PickedEmptyComponent = StatefulTemplate.bind({});
PickedEmptyComponent.args = {
  selectedEmptyComponent: /*#__PURE__*/React.createElement("p", {
    style: {
      textAlign: 'center'
    }
  }, "You have not selected anything yet", /*#__PURE__*/React.createElement("br", null))
};
export const Reordering = StatefulTemplate.bind({});
Reordering.args = {
  enableOrderChange: true,
  options: options.slice(0, 4),
  initiallySelected: options.slice(0, 4).map(_ref6 => {
    let {
      value
    } = _ref6;
    return value;
  })
};
export const IncreasedOptionsHeight = StatefulTemplate.bind({});
IncreasedOptionsHeight.args = {
  maxSelections: Infinity,
  filterable: true,
  height: '400px'
};
export const DifferentWidths = StatefulTemplate.bind({});
DifferentWidths.args = {
  optionsWidth: '500px',
  selectedWidth: '240px'
};
const createCustomFilteringInHeader = hideFilterInput => {
  const relativePeriods = options.slice(0, 10).map((option, index) => ({
    ...option,
    relativePeriod: true,
    year: index < 5 ? '2020' : '2019'
  }));
  const fixedPeriods = options.slice(10, 20).map((option, index) => ({
    ...option,
    relativePeriod: false,
    year: index < 5 ? '2020' : '2019'
  }));
  const allOptions = [...relativePeriods, ...fixedPeriods];
  const Header = _ref7 => {
    let {
      onClick,
      relativePeriod,
      selectedYear,
      onSelectedYearChange
    } = _ref7;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TabBar, null, /*#__PURE__*/React.createElement(Tab, {
      selected: relativePeriod,
      onClick: () => onClick({
        relativePeriod: true
      })
    }, "Relative periods"), /*#__PURE__*/React.createElement(Tab, {
      selected: !relativePeriod,
      onClick: () => onClick({
        relativePeriod: false
      })
    }, "Fixed periods")), /*#__PURE__*/React.createElement("p", {
      style: {
        margin: 0,
        height: 10
      }
    }), /*#__PURE__*/React.createElement(SingleSelectField, {
      label: "Year",
      selected: selectedYear,
      onChange: onSelectedYearChange
    }, /*#__PURE__*/React.createElement(SingleSelectOption, {
      value: "2020",
      label: "2020"
    }), /*#__PURE__*/React.createElement(SingleSelectOption, {
      value: "2019",
      label: "2019"
    })));
  };
  /* eslint-enable react/prop-types */

  const CustomTransfer = props => {
    const [filter, setFilter] = useState('');
    const [relativePeriod, setRelativePeriod] = useState(true);
    const [year, setYear] = useState('2020');
    const filterCallback = (options, filter) => {
      const optionsWithYear = options.filter(option => option.year === year);
      const optionsWithPeriod = optionsWithYear.filter(option => option.relativePeriod === relativePeriod);
      if (filter === '') {
        return optionsWithPeriod;
      }
      return optionsWithPeriod.filter(_ref8 => {
        let {
          label
        } = _ref8;
        return label.indexOf(filter) !== -1;
      });
    };
    const header = /*#__PURE__*/React.createElement(Header, {
      relativePeriod: relativePeriod,
      selectedYear: year,
      onSelectedYearChange: _ref9 => {
        let {
          selected
        } = _ref9;
        return setYear(selected);
      },
      onClick: _ref10 => {
        let {
          relativePeriod: newRelativePeriod
        } = _ref10;
        return setRelativePeriod(newRelativePeriod);
      }
    });
    return /*#__PURE__*/React.createElement(Transfer, _extends({}, props, {
      options: allOptions,
      filterable: true,
      hideFilterInput: hideFilterInput,
      searchTerm: filter,
      filterCallback: filterCallback,
      leftHeader: header,
      rightHeader: /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("b", null, "Selected Periods")),
      onFilterChange: _ref11 => {
        let {
          value
        } = _ref11;
        return setFilter(value);
      },
      height: "400px",
      filterLabel: "Filter options",
      filterPlaceholder: "Search"
    }));
  };
  return _ref12 => {
    let {
      initiallySelected,
      ...args
    } = _ref12;
    const [selected, setSelected] = useState(initiallySelected);
    const onChange = payload => setSelected(payload.selected);
    return /*#__PURE__*/React.createElement(CustomTransfer, _extends({}, args, {
      selected: selected,
      onChange: onChange
    }));
  };
};
export const CustomFilteringWithFilterInput = createCustomFilteringInHeader(false);
export const CustomFilteringWithoutFilterInput = createCustomFilteringInHeader(true);
const optionsPool = options;
const pageSize = 5;

/*
 * The page size is: 5
 * To keep the code as small as possible, handling selecting items is not
   included
 */
export const InfiniteLoading = args => {
  useEffect(() => {
    console.clear();
  }, []);

  // state for whether the next page's options are being loaded
  const [loading, setLoading] = useState(false);
  // captures the current page
  const [page, setPage] = useState(0);
  // all options (incl. available AND selected options)
  const [options, setOptions] = useState([]);
  // selected options
  const [selected] = useState(
  // second page is already selected
  optionsPool.slice(pageSize, pageSize * 2).map(_ref13 => {
    let {
      value
    } = _ref13;
    return value;
  }));
  const onEndReached = () => {
    // do nothing when loading already
    if (loading) {
      return;
    }
    setPage(page + 1);
  };

  // fake fetch request
  const fetchOptions = nextPage => new Promise(resolve => setTimeout(() => {
    const nextOptions = optionsPool.slice(options.length, nextPage * pageSize);
    resolve(nextOptions);
  }, 2000));
  const loadNextOptions = async () => {
    setLoading(true);
    const nextOptions = await fetchOptions(page);
    setOptions([...options, ...nextOptions]);
    setLoading(false);
    const allAlreadySelected = nextOptions.length !== 0 && nextOptions.every(nextOption => {
      const {
        value
      } = nextOption;
      return selected.includes(value);
    });
    if (allAlreadySelected) {
      onEndReached();
    }
  };
  useEffect(() => {
    // prevent initial call
    if (page > 0) {
      loadNextOptions();
    }
  }, [page]);
  return /*#__PURE__*/React.createElement(Transfer, _extends({}, args, {
    loading: loading,
    options: options,
    selected: selected,
    onChange: () => null /* noop */,
    onEndReached: onEndReached
  }));
};
export const LoadingSource = StatefulTemplate.bind({});
LoadingSource.args = {
  loading: true,
  options: options.slice(0, 3)
};
export const LoadingPicked = StatefulTemplate.bind({});
LoadingPicked.args = {
  loadingPicked: true,
  options: options.slice(0, 3),
  initiallySelected: options.slice(0, 2).map(_ref14 => {
    let {
      value
    } = _ref14;
    return value;
  })
};
export const RTL = args => /*#__PURE__*/React.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/React.createElement(Multiple, args));
RTL.args = {
  options: options.slice(0, 3),
  enableOrderChange: true
};