import _JSXStyle from "styled-jsx/style";
import { spacers } from '@dhis2/ui-constants';
import { CircularLoader } from '@dhis2-ui/loader';
import PropTypes from 'prop-types';
import React, { Fragment, useRef } from 'react';
import { EndIntersectionDetector } from './end-intersection-detector.js';
import { useResizeCounter } from './use-resize-counter.js';
export const OptionsContainer = _ref => {
  let {
    dataTest,
    emptyComponent,
    onEndReached,
    getOptionClickHandlers,
    highlightedOptions,
    loading,
    renderOption,
    options,
    selected = false,
    selectionHandler,
    toggleHighlightedOption
  } = _ref;
  const optionsRef = useRef(null);
  const wrapperRef = useRef(null);
  const resizeCounter = useResizeCounter(wrapperRef.current);
  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3254058061", [spacers.dp4]]]) + " " + "optionsContainer"
  }, loading && /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3254058061", [spacers.dp4]]]) + " " + "loading"
  }, /*#__PURE__*/React.createElement(CircularLoader, null)), /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    ref: optionsRef,
    className: _JSXStyle.dynamic([["3254058061", [spacers.dp4]]]) + " " + "container"
  }, /*#__PURE__*/React.createElement("div", {
    ref: wrapperRef,
    className: _JSXStyle.dynamic([["3254058061", [spacers.dp4]]]) + " " + "content-container"
  }, !options.length && emptyComponent, options.map(option => {
    const highlighted = !!highlightedOptions.find(highlightedSourceOption => highlightedSourceOption === option.value);
    return /*#__PURE__*/React.createElement(Fragment, {
      key: option.value
    }, renderOption({
      ...option,
      ...getOptionClickHandlers(option, selectionHandler, toggleHighlightedOption),
      highlighted,
      selected
    }));
  }), onEndReached && /*#__PURE__*/React.createElement(EndIntersectionDetector, {
    dataTest: `${dataTest}-endintersectiondetector`,
    key: `key-${resizeCounter}`,
    rootRef: optionsRef,
    onEndReached: onEndReached
  }))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3254058061",
    dynamic: [spacers.dp4]
  }, [`.optionsContainer.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;padding:${spacers.dp4} 0;position:relative;overflow:hidden;}`, ".container.__jsx-style-dynamic-selector{overflow-y:auto;height:100%;}", ".loading.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;width:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;z-index:2;top:0;inset-inline-start:0;}", ".content-container.__jsx-style-dynamic-selector{z-index:1;position:relative;}", ".loading.__jsx-style-dynamic-selector+.container.__jsx-style-dynamic-selector .content-container.__jsx-style-dynamic-selector{-webkit-filter:blur(2px);filter:blur(2px);}"]));
};
OptionsContainer.propTypes = {
  dataTest: PropTypes.string.isRequired,
  getOptionClickHandlers: PropTypes.func.isRequired,
  emptyComponent: PropTypes.node,
  highlightedOptions: PropTypes.arrayOf(PropTypes.string),
  loading: PropTypes.bool,
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired
  })),
  renderOption: PropTypes.func,
  selected: PropTypes.bool,
  selectionHandler: PropTypes.func,
  toggleHighlightedOption: PropTypes.func,
  onEndReached: PropTypes.func
};