"use strict";

var _index = require("../../../common/index.js");
var _createToggleHighlightedOption = require("../../../transfer/use-highlighted-options/create-toggle-highlighted-option.js");
var _toggleAdd = require("../../../transfer/use-highlighted-options/toggle-add.js");
var _toggleRange = require("../../../transfer/use-highlighted-options/toggle-range.js");
var _toggleReplace = require("../../../transfer/use-highlighted-options/toggle-replace.js");
jest.mock('../../../transfer/use-highlighted-options/toggle-add.js', () => ({
  toggleAdd: jest.fn()
}));
jest.mock('../../../transfer/use-highlighted-options/toggle-range.js', () => ({
  toggleRange: jest.fn()
}));
jest.mock('../../../transfer/use-highlighted-options/toggle-replace.js', () => ({
  toggleReplace: jest.fn()
}));
describe('Transfer- useHighlightedOptions - createToggleHighlightedOption', () => {
  let toggleHighlightedOption;
  const disabled = false;
  const lastClicked = null;
  const setLastClicked = jest.fn();
  const highlightedOptions = [];
  const maxSelections = Infinity;
  const setHighlightedOptions = jest.fn();
  const options = [];
  const option = {
    value: 'foo',
    label: 'Foo'
  };
  const createToggleHighlightedOptionDefaultPayload = {
    options,
    disabled,
    highlightedOptions,
    lastClicked,
    maxSelections,
    setHighlightedOptions,
    setLastClicked
  };
  beforeEach(() => {
    toggleHighlightedOption = (0, _createToggleHighlightedOption.createToggleHighlightedOption)(createToggleHighlightedOptionDefaultPayload);
  });
  afterEach(() => {
    setLastClicked.mockClear();
    _toggleAdd.toggleAdd.mockClear();
    _toggleRange.toggleRange.mockClear();
    _toggleReplace.toggleReplace.mockClear();
  });
  it('should set the lastClicked to the clicked option when mode is ADD_MODE', () => {
    toggleHighlightedOption({
      option,
      mode: _index.ADD_MODE
    });
    expect(setLastClicked).toHaveBeenCalledWith(option.value);
  });
  it('should set the lastClicked to the clicked option when mode is REPLACE_MODE', () => {
    toggleHighlightedOption({
      option,
      mode: _index.REPLACE_MODE
    });
    expect(setLastClicked).toHaveBeenCalledWith(option.value);
  });
  it('should not overwrite the lastClicked to the clicked option when mode is RANGE_MODE', () => {
    toggleHighlightedOption({
      option,
      mode: _index.RANGE_MODE
    });
    expect(setLastClicked).toHaveBeenCalledTimes(0);
  });
  it('should use the toggleAdd function when mode is ADD_MODE', () => {
    toggleHighlightedOption({
      option,
      mode: _index.ADD_MODE
    });
    expect(_toggleAdd.toggleAdd).toHaveBeenCalledTimes(1);
    expect(_toggleRange.toggleRange).toHaveBeenCalledTimes(0);
    expect(_toggleReplace.toggleReplace).toHaveBeenCalledTimes(0);
  });
  it('should use the toggleRange function when mode is RANGE_MODE', () => {
    toggleHighlightedOption({
      option,
      mode: _index.RANGE_MODE
    });
    expect(_toggleRange.toggleRange).toHaveBeenCalledTimes(1);
    expect(_toggleAdd.toggleAdd).toHaveBeenCalledTimes(0);
    expect(_toggleReplace.toggleReplace).toHaveBeenCalledTimes(0);
  });
  it('should use the toggleReplace function when mode is REPLACE_MODE', () => {
    toggleHighlightedOption({
      option,
      mode: _index.REPLACE_MODE
    });
    expect(_toggleReplace.toggleReplace).toHaveBeenCalledTimes(1);
    expect(_toggleAdd.toggleAdd).toHaveBeenCalledTimes(0);
    expect(_toggleRange.toggleRange).toHaveBeenCalledTimes(0);
  });
  it('should do nothing when disabled is true', () => {
    toggleHighlightedOption = (0, _createToggleHighlightedOption.createToggleHighlightedOption)({
      ...createToggleHighlightedOptionDefaultPayload,
      disabled: true
    });
    toggleHighlightedOption({
      option,
      mode: _index.ADD_MODE
    });
    toggleHighlightedOption({
      option,
      mode: _index.RANGE_MODE
    });
    toggleHighlightedOption({
      option,
      mode: _index.REPLACE_MODE
    });
    expect(_toggleReplace.toggleReplace).toHaveBeenCalledTimes(0);
    expect(_toggleAdd.toggleAdd).toHaveBeenCalledTimes(0);
    expect(_toggleRange.toggleRange).toHaveBeenCalledTimes(0);
    expect(setLastClicked).toHaveBeenCalledTimes(0);
  });
});