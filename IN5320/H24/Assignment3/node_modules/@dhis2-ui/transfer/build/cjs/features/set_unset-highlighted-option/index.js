"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
var _index = require("../common/index.js");
(0, _cypressCucumberPreprocessor.Given)('the option list has one or more items', () => {
  cy.visitStory('Transfer set & unset higlighted options', 'Has Options');
  cy.get('{transfer-sourceoptions}').as('list');
});
(0, _cypressCucumberPreprocessor.Given)('the selected list has one or more items', () => {
  cy.visitStory('Transfer set & unset higlighted options', 'Has Selected');
  cy.get('{transfer-pickedoptions}').as('list');
});
(0, _cypressCucumberPreprocessor.Given)('no item is highlighted', () => {
  cy.get('@list').find('.highlighted').should('not.exist');
});
(0, _cypressCucumberPreprocessor.Given)('one item is highlighted', () => {
  cy.get('@list').find('{transferoption}').first().as('initiallyHighlighted').click().should('have.class', 'highlighted');
});
(0, _cypressCucumberPreprocessor.Given)('the highlighted item is not visible due to a set filter', () => {
  // store hidden option because dom reference will be lost
  cy.get('@initiallyHighlighted').then($initiallyHighlighted => (0, _index.extractOptionFromElement)($initiallyHighlighted)).as('hiddenHighlighted');
  cy.get('{transfer-filter} input').type('No result search term');
  cy.get('{transfer-sourceoptions} {transferoption}').should('not.exist');
});
(0, _cypressCucumberPreprocessor.When)('the user clicks an item in the list that is not highlighted', () => {
  cy.get('@list').find('{transferoption}').first().invoke('next').as('nextHighlighted').click();
});
(0, _cypressCucumberPreprocessor.When)('the user clicks an item in the list that is highlighted', () => {
  cy.get('@initiallyHighlighted').wait(500).click();
});
(0, _cypressCucumberPreprocessor.When)('the user selects the visible, highlighted options', () => {
  cy.get('{transfer-actions-addindividual}').click();
});
(0, _cypressCucumberPreprocessor.When)('the users changes the filter to include the hidden option', () => {
  cy.get('{transfer-filter} input').clear();
});
(0, _cypressCucumberPreprocessor.Then)('the clicked item should be highlighted', () => {
  cy.get('@nextHighlighted').should('have.class', 'highlighted');
});
(0, _cypressCucumberPreprocessor.Then)('the previously highlighted item should no longer be highlighted', () => {
  cy.get('@initiallyHighlighted').should('have.not.class', 'highlighted');
});
(0, _cypressCucumberPreprocessor.Then)('the option is visible', () => {
  cy.all(() => cy.get('@hiddenHighlighted'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref => {
    let [hiddenHighlighted, $options] = _ref;
    const $hiddenHighlighted = $options.filter((index, optionEl) => {
      const option = (0, _index.extractOptionFromElement)(optionEl);
      return option.label === hiddenHighlighted.label && option.value === hiddenHighlighted.value;
    });
    expect($hiddenHighlighted).to.be.visible;
  });
});
(0, _cypressCucumberPreprocessor.Then)('the option is highlighted', () => {
  cy.all(() => cy.get('@hiddenHighlighted'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref2 => {
    let [hiddenHighlighted, $options] = _ref2;
    const $hiddenHighlighted = $options.filter((index, optionEl) => {
      const option = (0, _index.extractOptionFromElement)(optionEl);
      return option.label === hiddenHighlighted.label && option.value === hiddenHighlighted.value;
    });
    expect($hiddenHighlighted).to.have.class('highlighted');
  });
});
(0, _cypressCucumberPreprocessor.Then)('the option is not highlighted', () => {
  cy.all(() => cy.get('@hiddenHighlighted'), () => cy.get('{transfer-sourceoptions} {transferoption}')).should(_ref3 => {
    let [hiddenHighlighted, $options] = _ref3;
    const $hiddenHighlighted = $options.filter((index, optionEl) => {
      const option = (0, _index.extractOptionFromElement)(optionEl);
      return option.label === hiddenHighlighted.label && option.value === hiddenHighlighted.value;
    });
    expect($hiddenHighlighted).not.to.have.class('highlighted');
  });
});