"use strict";

var _index = require("../common/index.js");
describe('Transfer - isOption', () => {
  it('should return true when the options are the same', () => {
    const option1 = {
      label: 'foo',
      value: 'bar'
    };
    const option2 = {
      label: 'foo',
      value: 'bar'
    };
    const actual = (0, _index.isOption)(option1, option2);
    const expected = true;
    expect(actual).toBe(expected);
  });
  it('should return false when the labels do not match', () => {
    const option1 = {
      label: 'foo',
      value: 'bar'
    };
    const option2 = {
      label: 'baz',
      value: 'bar'
    };
    const actual = (0, _index.isOption)(option1, option2);
    const expected = false;
    expect(actual).toBe(expected);
  });
  it('should return false when the values do not match', () => {
    const option1 = {
      label: 'foo',
      value: 'bar'
    };
    const option2 = {
      label: 'foo',
      value: 'baz'
    };
    const actual = (0, _index.isOption)(option1, option2);
    const expected = false;
    expect(actual).toBe(expected);
  });
});
describe('Transfer - findOptionIndex', () => {
  it('should return index 1', () => {
    const options = [{
      label: 'foo',
      value: 'bar'
    }, {
      label: 'foo',
      value: 'baz'
    }];
    const option = {
      label: 'foo',
      value: 'baz'
    };
    const actual = (0, _index.findOptionIndex)(options, option);
    const expected = 1;
    expect(actual).toBe(expected);
  });
  it('should return -1 when the option is not included', () => {
    const options = [{
      label: 'foo',
      value: 'bar'
    }, {
      label: 'foo',
      value: 'baz'
    }];
    const option = {
      label: 'baz',
      value: 'baz'
    };
    const actual = (0, _index.findOptionIndex)(options, option);
    const expected = -1;
    expect(actual).toBe(expected);
  });
});
describe('Transfer - toggleValue', () => {
  it('should remove the last value from the array when value inside array', () => {
    const values = ['foo', 'bar', 'baz'];
    const value = 'baz';
    const expected = ['foo', 'bar'];
    const actual = (0, _index.toggleValue)(values, value);
    expect(actual).toEqual(expected);
  });
  it('should remove the first value from the array when value inside array', () => {
    const values = ['foo', 'bar', 'baz'];
    const value = 'foo';
    const expected = ['bar', 'baz'];
    const actual = (0, _index.toggleValue)(values, value);
    expect(actual).toEqual(expected);
  });
  it('should add the value if not inside the array', () => {
    const values = ['foo', 'bar'];
    const value = 'baz';
    const expected = ['foo', 'bar', 'baz'];
    const actual = (0, _index.toggleValue)(values, value);
    expect(actual).toEqual(expected);
  });
});
describe('Transfer - getModeByModifierKey', () => {
  it('should return REPLACE_MODE when more than one key is pressed', () => {
    const expected = _index.REPLACE_MODE;
    const actual = (0, _index.getModeByModifierKey)({
      altKey: true,
      ctrlKey: true
    });
    expect(actual).toBe(expected);
  });
  it('should return ADD_MODE if alt key is pressed', () => {
    const expected = _index.ADD_MODE;
    const actual = (0, _index.getModeByModifierKey)({
      altKey: true
    });
    expect(actual).toBe(expected);
  });
  it('should return ADD_MODE if ctrl key is pressed', () => {
    const expected = _index.ADD_MODE;
    const actual = (0, _index.getModeByModifierKey)({
      ctrlKey: true
    });
    expect(actual).toBe(expected);
  });
  it('should return ADD_MODE if meta key is pressed', () => {
    const expected = _index.ADD_MODE;
    const actual = (0, _index.getModeByModifierKey)({
      metaKey: true
    });
    expect(actual).toBe(expected);
  });
  it('should return RANGE_MODE if shift key is pressed', () => {
    const expected = _index.RANGE_MODE;
    const actual = (0, _index.getModeByModifierKey)({
      shiftKey: true
    });
    expect(actual).toBe(expected);
  });
  it('should return REPLACE_MODE if no key is pressed', () => {
    const expected = _index.REPLACE_MODE;
    const actual = (0, _index.getModeByModifierKey)({});
    expect(actual).toBe(expected);
  });
});