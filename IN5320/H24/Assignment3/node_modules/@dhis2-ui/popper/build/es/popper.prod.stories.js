function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { sharedPropTypes } from '@dhis2/ui-constants';
import React, { useEffect, useRef } from 'react';
import { Popper } from './popper.js';
const description = `
A tool for adding additional information or content outside of the document flow, used for example in the Tooltip or Popover components.

Since it's built using [Popper.js](https://popper.js.org/docs/v2/) and [react-popper](https://popper.js.org/react-popper/), some of that functionality can be accessed through the props of this component, like modifiers.

\`\`\`js
import { Popper } from '@dhis2/ui'
\`\`\`

_**Note**: Some of the stories may not look right on this page. View those examples in the 'Canvas' tab instead._
`;
export default {
  title: 'Popper',
  component: Popper,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    placement: {
      ...sharedPropTypes.popperPlacementArgType
    },
    reference: {
      ...sharedPropTypes.popperReferenceArgType
    }
  }
};
const boxStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  width: 400,
  height: 400,
  backgroundColor: 'aliceblue'
};
const referenceElementStyle = {
  width: 130,
  height: 50,
  backgroundColor: 'cadetblue',
  textAlign: 'center',
  padding: 6
};
const popperStyle = {
  width: 110,
  height: 30,
  backgroundColor: 'lightblue',
  textAlign: 'center',
  padding: 6
};
const Template = args => {
  const ref = useRef(null);
  return /*#__PURE__*/React.createElement("div", {
    className: "box",
    style: boxStyle
  }, /*#__PURE__*/React.createElement("div", {
    className: "reference-element",
    style: referenceElementStyle,
    ref: ref
  }, "Reference Element"), /*#__PURE__*/React.createElement(Popper, _extends({}, args, {
    reference: ref
  }), /*#__PURE__*/React.createElement("div", {
    style: popperStyle
  }, args.placement)));
};
export const Top = Template.bind({});
Top.args = {
  placement: 'top'
};
export const TopStart = Template.bind({});
TopStart.args = {
  placement: 'top-start'
};
export const TopEnd = Template.bind({});
TopEnd.args = {
  placement: 'top-end'
};
export const Bottom = Template.bind({});
Bottom.args = {
  placement: 'bottom'
};
export const BottomStart = Template.bind({});
BottomStart.args = {
  placement: 'bottom-start'
};
export const BottomEnd = Template.bind({});
BottomEnd.args = {
  placement: 'bottom-end'
};
export const Right = Template.bind({});
Right.args = {
  placement: 'right'
};
export const RightStart = Template.bind({});
RightStart.args = {
  placement: 'right-start'
};
export const RightEnd = Template.bind({});
RightEnd.args = {
  placement: 'right-end'
};
export const Left = Template.bind({});
Left.args = {
  placement: 'left'
};
export const LeftStart = Template.bind({});
LeftStart.args = {
  placement: 'left-start'
};
export const LeftEnd = Template.bind({});
LeftEnd.args = {
  placement: 'left-end'
};
export const ElementRef = args => {
  const anchor = document.createElement('div');
  document.body.appendChild(anchor);
  return /*#__PURE__*/React.createElement("div", {
    className: "box",
    style: {
      ...boxStyle,
      marginBottom: '500px'
    }
  }, /*#__PURE__*/React.createElement(Popper, _extends({}, args, {
    reference: anchor
  }), /*#__PURE__*/React.createElement("div", {
    style: popperStyle
  }, args.placement)));
};
ElementRef.args = {
  placement: 'left-end'
};
ElementRef.parameters = {
  docs: {
    source: {
      type: 'code'
    }
  }
};
export const VirtualElementRef = args => {
  const virtualElement = {
    getBoundingClientRect: () => ({
      width: 0,
      height: 0,
      top: 100,
      right: 0,
      bottom: 0,
      left: 200,
      x: 200,
      y: 100
    })
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "box",
    style: {
      ...boxStyle,
      marginBottom: '500px'
    }
  }, /*#__PURE__*/React.createElement(Popper, _extends({}, args, {
    reference: virtualElement
  }), /*#__PURE__*/React.createElement("div", {
    style: popperStyle
  }, args.placement)));
};
VirtualElementRef.args = {
  placement: 'left-end'
};
VirtualElementRef.parameters = {
  docs: {
    source: {
      type: 'code'
    }
  }
};
export const RTL = args => {
  useEffect(() => {
    document.documentElement.setAttribute('dir', 'rtl');
    return () => {
      document.documentElement.setAttribute('dir', 'ltr');
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    dir: "rtl"
  }, /*#__PURE__*/React.createElement("span", null, "If dir=rtl, `left` and `right` placement are reversed"), /*#__PURE__*/React.createElement(Template, _extends({}, args, {
    placement: "left"
  })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Template, _extends({}, args, {
    placement: "right-start"
  })));
};