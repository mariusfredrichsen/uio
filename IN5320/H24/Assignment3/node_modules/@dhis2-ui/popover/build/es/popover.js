import _JSXStyle from "styled-jsx/style";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { colors, elevations, sharedPropTypes } from '@dhis2/ui-constants';
import { Layer } from '@dhis2-ui/layer';
import { getReferenceElement, usePopper } from '@dhis2-ui/popper';
import PropTypes from 'prop-types';
import React, { useState, useMemo } from 'react';
import { Arrow } from './arrow.js';
import { combineModifiers } from './modifiers.js';
const Popover = _ref => {
  let {
    children,
    reference,
    arrow = true,
    className,
    dataTest = 'dhis2-uicore-popover',
    elevation = elevations.e200,
    maxWidth = 360,
    observePopperResize,
    observeReferenceResize,
    placement = 'top',
    onClickOutside
  } = _ref;
  const referenceElement = getReferenceElement(reference);
  const [popperElement, setPopperElement] = useState(null);
  const [arrowElement, setArrowElement] = useState(null);
  const modifiers = useMemo(() => combineModifiers(arrow, arrowElement, {
    observePopperResize,
    observeReferenceResize
  }), [arrow, arrowElement, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = usePopper(referenceElement, popperElement, {
    placement,
    modifiers
  });
  return /*#__PURE__*/React.createElement(Layer, {
    onBackdropClick: onClickOutside
  }, /*#__PURE__*/React.createElement("div", _extends({
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper, {
    className: _JSXStyle.dynamic([["632767479", [maxWidth, elevation, colors.white]]]) + " " + (attributes.popper && attributes.popper.className != null && attributes.popper.className || className || "")
  }), children, arrow && /*#__PURE__*/React.createElement(Arrow, {
    hidden: attributes.arrow && attributes.arrow['data-arrow-hidden'],
    popperPlacement: attributes.popper && attributes.popper['data-popper-placement'],
    ref: setArrowElement,
    styles: styles.arrow
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "632767479",
    dynamic: [maxWidth, elevation, colors.white]
  }, [`div.__jsx-style-dynamic-selector{max-width:${maxWidth}px;box-shadow:${elevation};background-color:${colors.white};border-radius:4px;}`])));
};
Popover.propTypes = {
  children: PropTypes.node.isRequired,
  /** Show or hide the arrow */
  arrow: PropTypes.bool,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  /** Box-shadow to create appearance of elevation.  Use `elevations` constants from the UI library. */
  elevation: PropTypes.string,
  maxWidth: PropTypes.number,
  observePopperResize: PropTypes.bool,
  observeReferenceResize: PropTypes.bool,
  placement: sharedPropTypes.popperPlacementPropType,
  /** A React ref that refers to the element the Popover should position against */
  reference: sharedPropTypes.popperReferencePropType,
  onClickOutside: PropTypes.func
};
export { Popover };