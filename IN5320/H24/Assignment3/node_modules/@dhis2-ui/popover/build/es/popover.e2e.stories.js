function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import PropTypes from 'prop-types';
import React, { Component, createRef } from 'react';
import { Popover } from './popover.js';
const boxStyle = {
  display: 'flex',
  justifyContent: 'center',
  width: 400,
  backgroundColor: 'aliceblue'
};
const referenceElementStyle = {
  width: 100,
  height: 50,
  backgroundColor: 'cadetblue',
  textAlign: 'center',
  padding: 6
};
class PopperInBoxWithCenteredReferenceElement extends Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "ref", /*#__PURE__*/createRef());
  }
  render() {
    const {
      paddingTop = 220,
      popoverHeight = 200,
      popoverWidth = 336,
      ...popoverProps
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      style: {
        ...boxStyle,
        paddingTop,
        height: paddingTop + 100
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: referenceElementStyle,
      ref: this.ref,
      "data-test": "reference-element"
    }, "Reference element"), /*#__PURE__*/React.createElement(Popover, _extends({
      reference: this.ref
    }, popoverProps), /*#__PURE__*/React.createElement("div", {
      "data-test": "popover-content",
      style: {
        width: popoverWidth,
        height: popoverHeight
      }
    }, "I am in a box with width: ", popoverWidth, "px and height:", ' ', popoverHeight, "px")));
  }
}
_defineProperty(PopperInBoxWithCenteredReferenceElement, "defaultProps", {
  paddingTop: 220,
  popoverHeight: 200,
  popoverWidth: 336
});
PopperInBoxWithCenteredReferenceElement.propTypes = {
  paddingTop: PropTypes.number,
  popoverHeight: PropTypes.number,
  popoverWidth: PropTypes.number
};
window.onClickOutside = window.Cypress && window.Cypress.cy.stub();
export default {
  title: 'Popover',
  component: Popover
};
export const Default = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, null);
export const Flipped = () =>
/*#__PURE__*/
// default viewport-height for flipped popover
// viePort height 400px for diplaced with arrow
React.createElement(PopperInBoxWithCenteredReferenceElement, {
  paddingTop: 160
});
export const HiddenArrow = () =>
/*#__PURE__*/
// viewPort height 325px
React.createElement(PopperInBoxWithCenteredReferenceElement, {
  paddingTop: 110
});
export const NoArrow = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  arrow: false
});
export const WithOnClickOutside = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  onClickOutside: window.onClickOutside
});
export const PlacementTop = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 40,
  popoverWidth: 180,
  paddingTop: 50,
  placement: "top"
});
export const PlacementRight = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 60,
  popoverWidth: 130,
  paddingTop: 50,
  placement: "right"
});
export const PlacementBottom = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 40,
  popoverWidth: 180,
  paddingTop: 50,
  placement: "bottom"
});
export const PlacementLeft = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 60,
  popoverWidth: 130,
  paddingTop: 50,
  placement: "left"
});
export const ShiftedArrow = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 160,
  popoverWidth: 130,
  paddingTop: 1,
  placement: "left"
});