import { IconFile16 } from '@dhis2/ui-icons';
import React, { useState } from 'react';
import { AlertBar } from './index.js';
const subtitle = `
A floating alert that informs the user about temporary information
in the context of the current screen.
`;
const description = `
Alert bars notify a user of some information. There are different types of
alert bar for displaying different types of content. Use the alert bar type
that matches your content type and importance. Note that alert bar can be
ignored by the user, so they shouldn't be used for content that needs to
block an app flow, use a modal instead.

Alert bars are always displayed at centered and fixed at the bottom of the
screen. Some types of alert bar dismiss after a set time, others must be
dismissed by the user.

See specification: [Design System](https://github.com/dhis2/design-system/blob/master/molecules/alertbar.md)

\`\`\`js
import { AlertBar } from '@dhis2/ui'
\`\`\`
`;
const Wrapper = fn => /*#__PURE__*/React.createElement("div", {
  style: {
    height: '260px'
  }
}, /*#__PURE__*/React.createElement("div", {
  className: "alert-bars",
  style: {
    width: '100%',
    position: 'fixed',
    bottom: 0,
    left: 0,
    paddingLeft: 16
  }
}, fn()));
const alertTypeArgType = {
  table: {
    type: {
      summary: 'bool',
      detail: "'success', 'warning', and 'critical' are mutually exclusive props"
    },
    defaultValue: {
      summary: false
    }
  },
  control: {
    type: 'boolean'
  }
};
const iconArgType = {
  table: {
    type: {
      summary: 'bool | element'
    }
  }
};
const permanentArgType = {
  table: {
    type: {
      summary: 'bool'
    },
    defaultValue: {
      summary: false
    }
  },
  control: {
    type: 'boolean'
  }
};
const childrenArgType = {
  table: {
    type: {
      summary: 'String to display in the alert bar'
    }
  }
};
const actionsArgType = {
  table: {
    type: {
      summary: '[{ label: string, onClick: func }]'
    }
  }
};
export default {
  title: 'Alert Bar',
  component: AlertBar,
  decorators: [Wrapper],
  args: {
    children: 'I will autohide'
  },
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    actions: {
      ...actionsArgType
    },
    critical: {
      ...alertTypeArgType
    },
    success: {
      ...alertTypeArgType
    },
    warning: {
      ...alertTypeArgType
    },
    permanent: {
      ...permanentArgType
    },
    children: {
      ...childrenArgType
    },
    icon: {
      ...iconArgType
    }
  }
};
export const Default = args => /*#__PURE__*/React.createElement(AlertBar, args);
export const States = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true
}, "Default (info)"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  success: true
}, "Success"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  warning: true
}, "Warning"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  critical: true
}, "Critical"));
export const RTL = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true
}, "Default (info)"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  success: true
}, "Success"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  warning: true
}, "Warning"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  critical: true
}, "Critical")));
export const AutoHiding = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true
}, "Permanent never auto-hides"), /*#__PURE__*/React.createElement(AlertBar, {
  warning: true
}, "Warning never auto-hides"), /*#__PURE__*/React.createElement(AlertBar, {
  critical: true
}, "Critial never auto-hides"), /*#__PURE__*/React.createElement(AlertBar, {
  duration: 2000,
  onHidden: (payload, event) => {
    console.log('onHidden payload', payload);
    console.log('onHidden event', event);
  }
}, "Custom duration, hides after 2s"), /*#__PURE__*/React.createElement(AlertBar, {
  onHidden: (payload, event) => {
    console.log('onHidden payload', payload);
    console.log('onHidden event', event);
  }
}, "Default auto-hides after 8s"));
AutoHiding.storyName = 'Auto hiding';
export const WithActions = () => /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  actions: [{
    label: 'Save',
    onClick: () => {}
  }, {
    label: 'Cancel',
    onClick: () => {}
  }]
}, "With Actions");
WithActions.storyName = 'With actions';
export const WithActionsAndInsufficientSpace = () => /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  actions: [{
    label: 'Long action 1',
    onClick: () => {}
  }, {
    label: 'Long action 2',
    onClick: () => {}
  }]
}, "Some text, a pretty normal amount, that conflicts with pretty long actions");
WithActionsAndInsufficientSpace.storyName = 'With actions and insufficient space';
export const Icons = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true
}, "Default icon"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  icon: false
}, "No icon"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true,
  icon: /*#__PURE__*/React.createElement(IconFile16, null)
}, "Custom icon"));
export const TextOverflow = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true
}, "Short text"), /*#__PURE__*/React.createElement(AlertBar, {
  permanent: true
}, "If the alert bar gets a ver long text, it will grow to a maximum of 600px and the text will overflow across several lines. If there are multiple AlertBars in a stack, they will all grow to the size of the widest sibling."));
TextOverflow.storyName = 'Text overflow';
export const HiddenProp = () => {
  const [hidden, setHidden] = useState(true);
  const toggleVisibility = () => setHidden(prevHidden => !prevHidden);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
    style: {
      display: 'block',
      position: 'fixed',
      bottom: 150,
      left: 10
    },
    onClick: toggleVisibility
  }, hidden ? 'Show' : 'Hide'), /*#__PURE__*/React.createElement(AlertBar, {
    permanent: true,
    hidden: hidden
  }, "Short text"));
};
HiddenProp.storyName = 'Hidden prop';