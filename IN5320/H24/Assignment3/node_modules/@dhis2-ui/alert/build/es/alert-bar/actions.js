import _JSXStyle from "styled-jsx/style";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { arrayWithLength } from '@dhis2/prop-types';
import { spacers } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React from 'react';
import { Action } from './action.js';
const Actions = _ref => {
  let {
    actions,
    hide,
    dataTest
  } = _ref;
  if (!actions) {
    return null;
  }
  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["793807948", [spacers.dp48, spacers.dp12]]])
  }, actions.map(action => /*#__PURE__*/React.createElement(Action, _extends({
    key: action.label
  }, action, {
    hide: hide,
    dataTest: `${dataTest}-action`
  }))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "793807948",
    dynamic: [spacers.dp48, spacers.dp12]
  }, [`div.__jsx-style-dynamic-selector{margin-inline-start:${spacers.dp48};margin-inline-end:-${spacers.dp12};}`]));
};
const actionsPropType = arrayWithLength(0, 2, PropTypes.shape({
  label: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired
}));
Actions.propTypes = {
  dataTest: PropTypes.string.isRequired,
  hide: PropTypes.func.isRequired,
  actions: actionsPropType
};
export { Actions, actionsPropType };