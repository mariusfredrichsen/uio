function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { FileListItem } from '../file-list/index.js';
class FileListItemWithRemove extends Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "handleRemove", event => {
      const {
        onRemove,
        file
      } = this.props;
      onRemove({
        file
      }, event);
    });
  }
  render() {
    const {
      label,
      removeText,
      className
    } = this.props;
    return /*#__PURE__*/React.createElement(FileListItem, {
      label: label,
      removeText: removeText,
      onRemove: this.handleRemove,
      className: className
    });
  }
}
FileListItemWithRemove.propTypes = {
  label: PropTypes.string.isRequired,
  removeText: PropTypes.string.isRequired,
  onRemove: PropTypes.func.isRequired,
  className: PropTypes.string,
  file: PropTypes.instanceOf(File)
};
export { FileListItemWithRemove };