function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { sharedPropTypes } from '@dhis2/ui-constants';
import React from 'react';
import { FileListItem } from '../index.js';
import { FileInputField } from './file-input-field.js';
const description = `
The \`FileInputField\` component wraps the \`FileInput\` component in a \`Field\` wrapper to add labels, help text, and validation text.

\`\`\`js
import { FileInputField, FileListItem } from '@dhis2/ui'
\`\`\`
`;
const onChange = obj => console.log('onChange', obj);
const onRemove = () => console.log('onRemove');
const onCancel = () => console.log('onCancel');
export default {
  title: 'File Input Field',
  component: FileInputField,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  // Default args:
  args: {
    // Handle default values (see comment in Transfer.js)
    accept: '*',
    dataTest: 'dhis2-uiwidgets-fileinputfield',
    placeholder: 'No file uploaded yet',
    onChange: onChange,
    name: 'uploadName',
    label: 'Upload something',
    buttonLabel: 'Upload a file'
  },
  argTypes: {
    small: {
      ...sharedPropTypes.sizeArgType
    },
    large: {
      ...sharedPropTypes.sizeArgType
    },
    valid: {
      ...sharedPropTypes.statusArgType
    },
    warning: {
      ...sharedPropTypes.statusArgType
    },
    error: {
      ...sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/React.createElement(FileInputField, args);
export const Default = Template.bind({});
Default.args = {
  label: null
};
export const WithLabel = Template.bind({});
export const Required = Template.bind({});
Required.args = {
  required: true
};
export const Multiple = Template.bind({});
Multiple.args = {
  multiple: true,
  label: 'Upload multiple things',
  buttonLabel: 'Upload files'
};
export const Disabled = Template.bind({});
Disabled.args = {
  disabled: true
};
export const Sizes = args => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Default size",
  name: "defaultName"
})), /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Small",
  small: true,
  name: "smallName"
})), /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Large",
  large: true,
  name: "largeName"
})));
export const Statuses = args => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Default",
  name: "defaultName"
})), /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Valid",
  name: "validName",
  valid: true
})), /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Warning",
  name: "warningName",
  warning: true
})), /*#__PURE__*/React.createElement(FileInputField, _extends({}, args, {
  buttonLabel: "Error",
  name: "errorName",
  error: true,
  validationText: "Something went wrong"
})));
export const FileList = args => /*#__PURE__*/React.createElement("div", {
  style: {
    width: 250
  }
}, /*#__PURE__*/React.createElement(FileInputField, args, /*#__PURE__*/React.createElement(FileListItem, {
  label: "picture1.jpg",
  onRemove: onRemove,
  onCancel: onCancel,
  cancelText: "Cancel",
  removeText: "Remove"
}), /*#__PURE__*/React.createElement(FileListItem, {
  label: "image_that_is_uploading.jpg",
  onRemove: onRemove,
  onCancel: onCancel,
  cancelText: "Cancel",
  removeText: "Remove",
  loading: true
}), /*#__PURE__*/React.createElement(FileListItem, {
  label: "image_file_name_is_to_long_to_display_on_one_line.jpg",
  onRemove: onRemove,
  onCancel: onCancel,
  cancelText: "Cancel",
  removeText: "Remove"
})), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("p", {
  style: {
    color: 'grey'
  }
}, /*#__PURE__*/React.createElement("em", null, "Bounding box is 250px wide")));
export const PlaceholderText = Template.bind({});
PlaceholderText.args = {
  placeholder: 'No file(s) selected yet'
};
export const HelpText = Template.bind({});
HelpText.args = {
  helpText: 'Please select any file type'
};
export const DesignSystemStackingOrder = args => /*#__PURE__*/React.createElement(FileInputField, args, /*#__PURE__*/React.createElement(FileListItem, {
  label: "TestFile.txt",
  onRemove: onRemove,
  removeText: "remove"
}), /*#__PURE__*/React.createElement(FileListItem, {
  label: "BusyFile.txt",
  onRemove: onRemove,
  onCancel: onCancel,
  cancelText: "cancel",
  removeText: "remove",
  loading: true
}));
DesignSystemStackingOrder.args = {
  error: true,
  validationText: 'Oops!',
  placeholder: 'Select a file',
  helpText: 'Please upload something'
};
export const DesignSystemStackingOrderEmptyFileList = Template.bind({});
DesignSystemStackingOrderEmptyFileList.args = {
  ...DesignSystemStackingOrder.args
};
DesignSystemStackingOrderEmptyFileList.storyName = 'Design system stacking order - empty file list';
export const DefaultButtonLabelAndPlaceholder = Template.bind({});
DefaultButtonLabelAndPlaceholder.args = {
  label: null
};
DefaultButtonLabelAndPlaceholder.storyName = 'Default: buttonLabel and placeholder';