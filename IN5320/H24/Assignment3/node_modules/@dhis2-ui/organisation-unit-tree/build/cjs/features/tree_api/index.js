"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
const expectStubPayloadToEqual = (stub, prop, expected) => {
  const calls = stub.getCalls();
  const {
    args
  } = calls[calls.length - 1];
  const [payload] = args;
  expect(payload[prop]).to.eql(expected);
};
(0, _cypressCucumberPreprocessor.Given)('an OrganisationUnitTree is rendered', () => {
  cy.visitStory('OrganisationUnitTree', 'Events');
  cy.getOrgUnitByLabel('Org Unit 1').shouldBeDoneLoading();
});
(0, _cypressCucumberPreprocessor.Given)('a node has been selected', () => {
  cy.getOrgUnitByLabel('Org Unit 1').toggleOrgUnitNodeSelection(true);
});
(0, _cypressCucumberPreprocessor.Given)('a node with children is rendered', () => {
  cy.visitStory('OrganisationUnitTree', 'Events');
});
(0, _cypressCucumberPreprocessor.Given)('the node has been expanded', () => {
  cy.getOrgUnitByLabel('Org Unit 1').openOrgUnitNode();
});
(0, _cypressCucumberPreprocessor.Given)("the children haven't been loaded yet", () => {
  cy.window().should(win => {
    expect(win.onExpand).not.to.be.called;
  });
});
(0, _cypressCucumberPreprocessor.When)('a node gets selected', () => {
  cy.getOrgUnitByLabel('Org Unit 1').toggleOrgUnitNodeSelection(true);
});
(0, _cypressCucumberPreprocessor.When)('a node gets deselected', () => {
  cy.getOrgUnitByLabel('Org Unit 1').toggleOrgUnitNodeSelection(false);
});
(0, _cypressCucumberPreprocessor.When)('the node is expanded', () => {
  cy.getOrgUnitByLabel('Org Unit 1').openOrgUnitNode();
});
(0, _cypressCucumberPreprocessor.When)('a node is collapsed', () => {
  cy.getOrgUnitByLabel('Org Unit 1').closeOrgUnitNode();
});
(0, _cypressCucumberPreprocessor.When)('the children have been loaded', () => {
  cy.getOrgUnitByLabel('Org Unit 1').toggleOrgUnitNode(true);
});
(0, _cypressCucumberPreprocessor.Then)('the onChange callback gets called', () => {
  cy.window().should(win => {
    expect(win.onChange).to.be.called;
  });
});
(0, _cypressCucumberPreprocessor.Then)('the payload includes the path of the selected node', () => {
  cy.window().should(win => {
    expectStubPayloadToEqual(win.onChange, 'path', '/A0000000000');
  });
});
(0, _cypressCucumberPreprocessor.Then)('the payload includes checked which is set to "true"', () => {
  cy.window().should(win => {
    expectStubPayloadToEqual(win.onChange, 'checked', true);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the payload includes all selected nodes', () => {
  cy.window().should(win => {
    expectStubPayloadToEqual(win.onChange, 'selected', ['/A0000000000']);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the payload includes checked which is set to "false"', () => {
  cy.window().should(win => {
    expectStubPayloadToEqual(win.onChange, 'checked', false);
  });
});
(0, _cypressCucumberPreprocessor.Then)('the onExpand callback gets called', () => {
  cy.window().should(win => {
    expect(win.onExpand).to.be.called;
  });
});
(0, _cypressCucumberPreprocessor.Then)('the payload includes the path of the expanded node', () => {
  cy.window().should(win => {
    expectStubPayloadToEqual(win.onExpand, 'path', '/A0000000000');
  });
});
(0, _cypressCucumberPreprocessor.Then)('the onCollapse callback gets called', () => {
  cy.window().should(win => {
    expect(win.onCollapse).to.be.called;
  });
});
(0, _cypressCucumberPreprocessor.Then)('the payload includes the path of the collapsed node', () => {
  cy.window().should(win => {
    expectStubPayloadToEqual(win.onCollapse, 'path', '/A0000000000');
  });
});
(0, _cypressCucumberPreprocessor.Then)('the onChildrenLoaded callback gets called', () => {
  cy.window().should(win => {
    expect(win.onChildrenLoaded).to.be.called;
  });
});
(0, _cypressCucumberPreprocessor.Then)("the payload contains the loaded children's data", () => {
  cy.window().should(win => {
    const calls = win.onChildrenLoaded.getCalls();
    expect(calls).to.have.length(1);
    const [{
      args
    }] = calls;
    expect(args[0].id).to.equal('A0000000000');
  });
});