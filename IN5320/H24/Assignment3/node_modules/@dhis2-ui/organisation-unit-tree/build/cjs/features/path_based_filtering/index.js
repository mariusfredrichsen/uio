"use strict";

var _cypressCucumberPreprocessor = require("@badeball/cypress-cucumber-preprocessor");
(0, _cypressCucumberPreprocessor.Before)(() => {
  cy.wrap([]).as('displayedUnits');
});
const addDisplayedUnit = id => {
  cy.get('@displayedUnits').then(displayedUnits => {
    cy.wrap([...displayedUnits, id]).as('displayedUnits');
  });
};
(0, _cypressCucumberPreprocessor.Given)('a unfiltered OrganisationUnitTree with a depth of 3 levels is rendered', () => {
  cy.visitStory('OrganisationUnitTree', 'Filtered by 3-level-path');
});
(0, _cypressCucumberPreprocessor.Given)('a filtered OrganisationUnitTree with a depth of 3 levels is rendered', () => {
  cy.visitStory('OrganisationUnitTree', 'Filtered by 3-level-path and 2-level-path');
});

/**
 * left empty intentionally
 * ========================
 * Step is necessary to make the feature file understandable
 * Required states are prepared by the story.
 * There is no way to check if the given is true by checking the dom
 * as this can only be verified by opening the org unit tree,
 * which triggers the recursive loading strategy.
 */
(0, _cypressCucumberPreprocessor.Given)('the second level contains two nodes', () => {});
(0, _cypressCucumberPreprocessor.Given)('all parent levels are open', () => {});
(0, _cypressCucumberPreprocessor.Given)('a filter containing the first child of the first second level is provided', () => {});
(0, _cypressCucumberPreprocessor.Given)('the second level nodes each have a child node', () => {});
(0, _cypressCucumberPreprocessor.Given)('a filter containing the first child of the second level is provided', () => {});
(0, _cypressCucumberPreprocessor.Given)('a filter containing the second child of the first level is provided', () => {});
(0, _cypressCucumberPreprocessor.Then)('the root level is visible', () => {
  cy.getOrgUnitByLabel('Org Unit 1').should('exist');
  addDisplayedUnit('A0000000000');
});
(0, _cypressCucumberPreprocessor.Then)('the first node on the second level is visible', () => {
  cy.getOrgUnitByLabel('Org Unit 2').should('exist');
  addDisplayedUnit('A0000000001');
});
(0, _cypressCucumberPreprocessor.Then)('the first child node of the first node on the second level is visible', () => {
  cy.getOrgUnitByLabel('Org Unit 4').should('exist');
  addDisplayedUnit('A0000000003');
});
(0, _cypressCucumberPreprocessor.Then)('the second node on the first level is visible', () => {
  cy.getOrgUnitByLabel('Org Unit 3').should('exist');
  addDisplayedUnit('A0000000002');
});
(0, _cypressCucumberPreprocessor.Then)('all other nodes are not rendered', () => {
  cy.get('@displayedUnits').then(displayedUnits => {
    cy.window().then(win => {
      const excludedUnitNumbers = win.allUnits.filter(unit => !displayedUnits.includes(unit)).map(id => parseInt(id.replace(/^.*(\d)$/, '$1'), 10) + 1);
      excludedUnitNumbers.forEach(number => {
        const label = `Org Unit ${number}`;
        cy.get(`[data-test="dhis2-uiwidgets-orgunittree-node-label"]:contains("${label}")`).should('not.exist');
      });
    });
  });
});