"use strict";

var _appRuntime = require("@dhis2/app-runtime");
var _enzyme = require("enzyme");
var _react = _interopRequireDefault(require("react"));
var _organisationUnitTree = require("./organisation-unit-tree.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('OrganisationUnitTree', () => {
  const origError = console.error.bind(console);
  const errorMock = jest.fn();
  beforeEach(() => {
    console.error = errorMock;
  });
  afterEach(() => {
    console.error = origError;
    errorMock.mockClear();
  });
  describe('Controlled expanded props', () => {
    describe('Missing props', () => {
      it('should throw a prop-types error when "handleCollapse" is missing', () => {
        (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
          data: {}
        }, /*#__PURE__*/_react.default.createElement(_organisationUnitTree.OrganisationUnitTree, {
          roots: "/A001",
          expanded: [],
          onChange: () => {},
          handleExpand: () => {}
        })));
        expect(errorMock).toHaveBeenCalledTimes(1);
        expect(errorMock.mock.calls[0][0]).toMatch(/^Warning: Failed prop type: Invalid prop `handleCollapse` supplied to `OrganisationUnitTree`/);
      });
      it('should throw a prop-types error when "handleExpand" is missing', () => {
        (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
          data: {}
        }, /*#__PURE__*/_react.default.createElement(_organisationUnitTree.OrganisationUnitTree, {
          roots: "/A001",
          expanded: [],
          onChange: () => {},
          handleCollapse: () => {}
        })));
        expect(errorMock).toHaveBeenCalledTimes(1);
        expect(errorMock.mock.calls[0][0]).toMatch(/^Warning: Failed prop type: Invalid prop `handleExpand` supplied to `OrganisationUnitTree`/);
      });
      it('should throw a prop-types error when "expanded" is missing', () => {
        (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
          data: {}
        }, /*#__PURE__*/_react.default.createElement(_organisationUnitTree.OrganisationUnitTree, {
          roots: "/A001",
          onChange: () => {},
          handleCollapse: () => {},
          handleExpand: () => {}
        })));
        expect(errorMock).toHaveBeenCalledTimes(1);
        expect(errorMock.mock.calls[0][0]).toMatch(/^Warning: Failed prop type: Invalid prop `expanded` supplied to `OrganisationUnitTree`/);
      });
    });
  });
});