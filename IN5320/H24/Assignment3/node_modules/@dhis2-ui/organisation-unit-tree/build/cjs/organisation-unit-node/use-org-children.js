"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOrgChildren = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _react = require("react");
var _index = require("../helpers/index.js");
const ORG_DATA_QUERY = {
  orgUnit: {
    resource: `organisationUnits`,
    id: _ref => {
      let {
        id
      } = _ref;
      return id;
    },
    params: {
      fields: 'children[id,path,displayName]'
    }
  }
};

/**
 * @param {string[]} ids
 * @param {Object} options
 * @param {string} options.displayName
 * @param {boolean} [options.withChildren]
 * @returns {Object}
 */
const useOrgChildren = _ref2 => {
  let {
    node,
    suppressAlphabeticalSorting,
    onComplete
  } = _ref2;
  const onCompleteCalledRef = (0, _react.useRef)(false);
  const {
    called,
    loading,
    error,
    data
  } = (0, _appRuntime.useDataQuery)(ORG_DATA_QUERY, {
    variables: {
      id: node.id
    }
  });
  const orgChildren = (0, _react.useMemo)(() => {
    if (!data) {
      return undefined;
    }

    // undefined or zero
    if (!node.children) {
      return [];
    }
    const {
      orgUnit
    } = data;
    return suppressAlphabeticalSorting ? orgUnit.children : (0, _index.sortNodeChildrenAlphabetically)(orgUnit.children);
  }, [data, suppressAlphabeticalSorting]);
  (0, _react.useEffect)(() => {
    if (onComplete && orgChildren && !onCompleteCalledRef.current) {
      // For backwards compatibility: Pass entire node incl. children
      onComplete({
        ...node,
        children: orgChildren
      });
      onCompleteCalledRef.current = true;
    }
  }, [onComplete, orgChildren, onCompleteCalledRef]);
  return {
    called,
    loading,
    error: error || null,
    data: orgChildren
  };
};
exports.useOrgChildren = useOrgChildren;