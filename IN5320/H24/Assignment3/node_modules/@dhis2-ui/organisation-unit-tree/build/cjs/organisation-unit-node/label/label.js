"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Label = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _propTypes2 = require("../../prop-types.js");
var _disabledSelectionLabel = require("./disabled-selection-label.js");
var _iconizedCheckbox = require("./iconized-checkbox.js");
var _labelContainer = require("./label-container.js");
var _singleSelectionLabel = require("./single-selection-label.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const createNewSelected = _ref => {
  let {
    selected,
    path,
    checked,
    singleSelection
  } = _ref;
  const pathIndex = selected.indexOf(path);
  if (checked && pathIndex !== -1) {
    return selected;
  }
  if (singleSelection && checked) {
    return [path];
  }
  if (checked) {
    return [...selected, path];
  }
  if (pathIndex === -1) {
    return selected;
  }
  if (singleSelection) {
    return [];
  }
  if (selected.indexOf(path) === 0) {
    return selected.slice(1);
  }
  const prevSlice = selected.slice(0, pathIndex);
  const nextSlice = selected.slice(pathIndex + 1);
  return [...prevSlice, ...nextSlice];
};
const Label = _ref2 => {
  let {
    checked,
    children,
    dataTest,
    disableSelection,
    fullPath,
    hasChildren,
    hasSelectedDescendants,
    highlighted,
    loading,
    node,
    onChange,
    onToggleOpen,
    open,
    rootId,
    selected,
    singleSelection
  } = _ref2;
  const onClick = (_ref3, event) => {
    let {
      checked
    } = _ref3;
    const newSelected = createNewSelected({
      path: fullPath,
      selected,
      checked,
      singleSelection,
      rootId
    });

    // @TODO: It'd make more sense to pass the node as an object
    // instead of spread it. But that'd be a breaking change
    const payload = {
      ...node,
      path: fullPath,
      checked,
      selected: newSelected
    };
    onChange(payload, event);
  };
  if (disableSelection) {
    return /*#__PURE__*/_react.default.createElement(_labelContainer.LabelContainer, {
      highlighted: highlighted
    }, /*#__PURE__*/_react.default.createElement(_disabledSelectionLabel.DisabledSelectionLabel, {
      loading: loading,
      onToggleOpen: onToggleOpen
    }, children));
  }
  if (singleSelection) {
    return /*#__PURE__*/_react.default.createElement(_labelContainer.LabelContainer, {
      highlighted: highlighted
    }, /*#__PURE__*/_react.default.createElement(_singleSelectionLabel.SingleSelectionLabel, {
      checked: checked,
      onChange: onClick,
      loading: loading
    }, children));
  }
  return /*#__PURE__*/_react.default.createElement(_labelContainer.LabelContainer, {
    highlighted: highlighted
  }, /*#__PURE__*/_react.default.createElement(_iconizedCheckbox.IconizedCheckbox, {
    dataTest: dataTest,
    checked: checked,
    name: "org-unit",
    value: node.id,
    loading: loading,
    indeterminate: !checked && hasSelectedDescendants,
    onChange: onClick,
    open: open,
    hasChildren: hasChildren
  }, children));
};
exports.Label = Label;
Label.propTypes = {
  // This is `any` so it can be customized by the app
  children: _propTypes.default.any.isRequired,
  dataTest: _propTypes.default.string.isRequired,
  fullPath: _propTypes.default.string.isRequired,
  hasChildren: _propTypes.default.bool.isRequired,
  loading: _propTypes.default.bool.isRequired,
  node: _propTypes.default.shape({
    displayName: _propTypes.default.string.isRequired,
    id: _propTypes.default.string.isRequired,
    children: _propTypes.default.number,
    path: _propTypes.default.string
  }).isRequired,
  open: _propTypes.default.bool.isRequired,
  rootId: _propTypes.default.string.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onToggleOpen: _propTypes.default.func.isRequired,
  checked: _propTypes.default.bool,
  disableSelection: _propTypes.default.bool,
  hasSelectedDescendants: _propTypes.default.bool,
  highlighted: _propTypes.default.bool,
  selected: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  singleSelection: _propTypes.default.bool
};