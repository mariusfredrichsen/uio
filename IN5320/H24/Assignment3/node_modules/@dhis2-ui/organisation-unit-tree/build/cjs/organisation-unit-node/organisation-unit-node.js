"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrganisationUnitNode = void 0;
var _node = require("@dhis2-ui/node");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = require("../helpers/index.js");
var _index2 = _interopRequireDefault(require("../locales/index.js"));
var _propTypes2 = require("../prop-types.js");
var _errorMessage = require("./error-message.js");
var _hasDescendantSelectedPaths = require("./has-descendant-selected-paths.js");
var _index3 = require("./label/index.js");
var _loadingSpinner = require("./loading-spinner.js");
var _organisationUnitNodeChildren = require("./organisation-unit-node-children.js");
var _useOpenState = require("./use-open-state.js");
var _index4 = require("./use-org-data/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const OrganisationUnitNode = _ref => {
  let {
    autoExpandLoadingError,
    dataTest,
    disableSelection,
    displayName,
    expanded,
    highlighted,
    id,
    isUserDataViewFallback,
    path,
    renderNodeLabel,
    rootId,
    selected,
    singleSelection,
    filter,
    suppressAlphabeticalSorting,
    onChange,
    onChildrenLoaded,
    onCollapse,
    onExpand
  } = _ref;
  const orgData = (0, _index4.useOrgData)(id, {
    isUserDataViewFallback,
    displayName
  });
  const strippedPath = (0, _index.leftTrimToRootId)(path, rootId);
  const node = {
    // guarantee that displayName and id are avaiable before data loaded
    displayName,
    id,
    ...(orgData.data || {}),
    // do not override strippedPath with path from loaded data
    path: strippedPath
  };
  const hasChildren = !!node.children && node.children > 0;
  const hasSelectedDescendants = (0, _hasDescendantSelectedPaths.hasDescendantSelectedPaths)(strippedPath, selected, rootId);
  const isHighlighted = highlighted.includes(path);
  const {
    open,
    onToggleOpen
  } = (0, _useOpenState.useOpenState)({
    autoExpandLoadingError,
    errorMessage: orgData.error && orgData.error.toString(),
    path: strippedPath,
    expanded,
    onExpand,
    onCollapse
  });
  const isSelected = !!selected.find(curPath => curPath.match(new RegExp(`${strippedPath}$`)));
  const labelContent = renderNodeLabel({
    disableSelection,
    hasChildren,
    hasSelectedDescendants,
    loading: orgData.loading,
    error: orgData.error,
    selected,
    open,
    path,
    singleSelection,
    node,
    label: displayName,
    checked: isSelected,
    highlighted: isHighlighted
  });
  const label = /*#__PURE__*/_react.default.createElement(_index3.Label, {
    node: node,
    fullPath: path,
    open: open,
    loading: orgData.loading,
    checked: isSelected,
    rootId: rootId,
    onChange: onChange,
    dataTest: `${dataTest}-label`,
    selected: selected,
    hasChildren: hasChildren,
    highlighted: isHighlighted,
    onToggleOpen: onToggleOpen,
    disableSelection: disableSelection,
    singleSelection: singleSelection,
    hasSelectedDescendants: hasSelectedDescendants
  }, labelContent);

  /**
   * No children means no arrow, therefore we have to provide something.
   * While "loading" is true, "hasChildren" is false
   * There are some possible children variants as content of this node:
   *
   * 1. Nothing; There are no children
   * 2. Placeholder: There are children, but the Node is closed (show arrow)
   * 3. Error: There are children and loading information somehow failed
   * 4. Child nodes: There are children and the node is open
   */
  const showPlaceholder = hasChildren && !open && !orgData.error;
  const showChildNodes = hasChildren && open && !orgData.error;
  return /*#__PURE__*/_react.default.createElement(_node.Node, {
    dataTest: `${dataTest}-node`,
    open: open,
    onOpen: onToggleOpen,
    onClose: onToggleOpen,
    component: label,
    icon: orgData.loading && /*#__PURE__*/_react.default.createElement(_loadingSpinner.LoadingSpinner, null)
  }, orgData.error && /*#__PURE__*/_react.default.createElement(_errorMessage.ErrorMessage, {
    dataTest: dataTest
  }, _index2.default.t('Could not load children')), showPlaceholder && /*#__PURE__*/_react.default.createElement("span", {
    "data-test": `${dataTest}-placeholder`
  }), showChildNodes && /*#__PURE__*/_react.default.createElement(_organisationUnitNodeChildren.OrganisationUnitNodeChildren
  // Prevent cirular imports
  , {
    OrganisationUnitNode: OrganisationUnitNode,
    node: node,
    autoExpandLoadingError: autoExpandLoadingError,
    dataTest: dataTest,
    disableSelection: disableSelection,
    expanded: expanded,
    filter: filter,
    highlighted: highlighted,
    isUserDataViewFallback: isUserDataViewFallback,
    onChange: onChange,
    onChildrenLoaded: onChildrenLoaded,
    onCollapse: onCollapse,
    onExpand: onExpand,
    parentPath: path,
    renderNodeLabel: renderNodeLabel,
    rootId: rootId,
    selected: selected,
    singleSelection: singleSelection,
    suppressAlphabeticalSorting: suppressAlphabeticalSorting
  }));
};
exports.OrganisationUnitNode = OrganisationUnitNode;
OrganisationUnitNode.propTypes = {
  dataTest: _propTypes.default.string.isRequired,
  id: _propTypes.default.string.isRequired,
  renderNodeLabel: _propTypes.default.func.isRequired,
  rootId: _propTypes.default.string.isRequired,
  onChange: _propTypes.default.func.isRequired,
  autoExpandLoadingError: _propTypes.default.bool,
  disableSelection: _propTypes.default.bool,
  displayName: _propTypes.default.string,
  expanded: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  filter: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  highlighted: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  isUserDataViewFallback: _propTypes.default.bool,
  path: _propTypes2.orgUnitPathPropType,
  selected: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  singleSelection: _propTypes.default.bool,
  suppressAlphabeticalSorting: _propTypes.default.bool,
  onChildrenLoaded: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  onExpand: _propTypes.default.func
};