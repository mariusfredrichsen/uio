"use strict";

var _react = require("react");
var _useForceReload = require("./use-force-reload.js");
jest.mock('react', () => ({
  useEffect: jest.fn(callback => callback()),
  useState: jest.fn(iV => [iV, () => null])
}));
describe('OrganisationUnitTree - useForceReload', () => {
  afterEach(() => {
    _react.useEffect.mockClear();
  });
  it('should return an reloadIf of 0 when forceReload is false', () => {
    const expected = 0;
    const actual = (0, _useForceReload.useForceReload)(false);
    expect(actual).toBe(expected);
  });
  it('should increase the default reloadId when forceReload is true', () => {
    _react.useState.mockImplementationOnce(initialValue => [initialValue, setReloadId]);
    const setReloadId = jest.fn();
    const expected = 1;
    (0, _useForceReload.useForceReload)(true);
    expect(setReloadId).toHaveBeenCalledWith(expected);
  });
  it('should pass forceReload as only item as the second argument to useEffect', () => {
    const forceReload = true;
    (0, _useForceReload.useForceReload)(forceReload);
    const useEffectDependencies = _react.useEffect.mock.calls[0][1];
    expect(useEffectDependencies).toEqual([forceReload]);
  });
});