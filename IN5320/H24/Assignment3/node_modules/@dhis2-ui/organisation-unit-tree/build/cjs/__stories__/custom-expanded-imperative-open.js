"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomExpandedImperativeOpen = void 0;
var _button = require("@dhis2-ui/button");
var _react = _interopRequireWildcard(require("react"));
var _index = require("../index.js");
var _shared = require("./shared.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const CustomExpandedImperativeOpen = () => {
  const orgUnit2Path = '/A0000000000/A0000000001';
  const initiallyExpanded = (0, _index.getAllExpandedOrgUnitPaths)([]);
  const [expanded, setExpanded] = (0, _react.useState)(initiallyExpanded);
  const handleExpand = _ref => {
    let {
      path
    } = _ref;
    if (!expanded.includes(path)) {
      setExpanded([...expanded, path]);
    }
  };
  const handleCollapse = _ref2 => {
    let {
      path
    } = _ref2;
    const pathIndex = expanded.indexOf(path);
    if (pathIndex !== -1) {
      const updatedExpanded = pathIndex === 0 ? expanded.slice(1) : [...expanded.slice(0, pathIndex), ...expanded.slice(pathIndex + 1)];
      setExpanded(updatedExpanded);
    }
  };
  const imperativeToggle = () => {
    if (!expanded.includes('/A0000000000/A0000000001')) {
      // Make sure that all required sub paths are included as well
      const nextPaths = (0, _index.getAllExpandedOrgUnitPaths)([...expanded, orgUnit2Path]);
      return setExpanded(nextPaths);
    }
    setExpanded(expanded.filter(v => v !== '/A0000000000/A0000000001'));
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
    onChange: _shared.onChange,
    name: "Root org unit",
    roots: ['A0000000000'],
    expanded: expanded,
    handleExpand: handleExpand,
    handleCollapse: handleCollapse
  }), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_button.Button, {
    onClick: imperativeToggle
  }, "Toggle Org Unit 2"));
};

// Do we need this story?
// export const CustomExpandedKeepUserExpanded = () => {
//     /**
//      * @param {string} path
//      * @returns {string[]}
//      */
//     const extractAllPathsFromPath = path => {
//         // remove leading slash and split by path delimiter/slashes
//         const segments = path.replace(/^\//, '').split('/')
//
//         const withSubPaths = segments.map((segment, index) => {
//             // take all segments from 0 to index and join them with the delimiter
//             return `/${segments.slice(0, index + 1).join('/')}`
//         })
//
//         return withSubPaths
//     }
//
//     /**
//      * @param {string[]} initiallyExpanded
//      * @returns {string[]}
//      */
//     const getInitiallyExpandedPaths = paths =>
//         paths.reduce((all, curPath) => {
//             const allPathsInCurPath = extractAllPathsFromPath(curPath)
//             return [...all, ...allPathsInCurPath]
//         }, [])
//
//     const [useOriginal, setUseOriginal] = useState(true)
//     const initiallyExpanded = getInitiallyExpandedPaths(
//         ['/A0000000000/A0000000001']
//     )
//     const alternativeInitiallyExpanded = getInitiallyExpandedPaths(
//         ['/A0000000000']
//     )
//
//     const [expandedConfig, setExpandedConfig] = useState(
//         () => initiallyExpanded.map(path => ({
//             userExpanded: false,
//             path,
//         }))
//     )
//
//     const expanded = useMemo(
//         () => expandedConfig.map(({ path }) => path),
//         [expandedConfig]
//     )
//
//     const switchAutomaticallyExpended = () => {
//         // Necessary due to the nature of the async state setter of the hook
//         const nextUseOriginal = !useOriginal
//         const allUserExpandedPaths = getInitiallyExpandedPaths(
//             expandedConfig
//                 .filter(({ userExpanded }) => userExpanded)
//                 .map(({ path }) => path)
//         )
//
//         const allUserExpanded = allUserExpandedPaths.map(path => ({
//             userExpanded: true,
//             path,
//         }))
//
//         const actualInitiallyExpended = nextUseOriginal ? initiallyExpanded : alternativeInitiallyExpanded
//         const missingInitiallyExpanded = actualInitiallyExpended.filter(path => {
//             return !allUserExpandedPaths.find(curPath => curPath.includes(path))
//         })
//
//         const nextExpandedConfig = [
//             ...allUserExpanded,
//             ...missingInitiallyExpanded.map(path => ({
//                 userExpanded: false,
//                 path,
//             }))
//         ]
//
//         setExpandedConfig(nextExpandedConfig)
//         setUseOriginal(nextUseOriginal)
//     }
//
//     const handleExpand = ({ path }) => {
//         if (!expandedConfig.find(config => config.path === path)) {
//             setExpandedConfig([...expandedConfig, { userExpanded: true, path }])
//         }
//     }
//
//     const handleCollapse = ({ path }) => {
//         const pathIndex = expandedConfig.findIndex(config => config.path === path)
//
//         if (pathIndex !== -1) {
//             const updatedExpandedConfig =
//                 pathIndex === 0
//                     ? expandedConfig.slice(1)
//                     : [
//                           ...expandedConfig.slice(0, pathIndex),
//                           ...expandedConfig.slice(pathIndex + 1),
//                       ]
//
//             setExpandedConfig(updatedExpandedConfig)
//         }
//     }
//
//     return (
//         <>
//             <OrganisationUnitTree
//                 onChange={onChange}
//                 name="Root org unit"
//                 roots={['A0000000000']}
//                 expanded={expanded}
//                 handleExpand={handleExpand}
//                 handleCollapse={handleCollapse}
//             />
//             <br />
//             <Button onClick={switchAutomaticallyExpended}>
//                 Switch automatically expanded
//             </Button>
//         </>
//     )
// }
exports.CustomExpandedImperativeOpen = CustomExpandedImperativeOpen;