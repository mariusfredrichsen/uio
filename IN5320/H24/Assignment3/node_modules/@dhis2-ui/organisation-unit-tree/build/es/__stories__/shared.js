import { CustomDataProvider } from '@dhis2/app-runtime';
import PropTypes from 'prop-types';
import React, { useState } from 'react';
export const log = true;
export const onChange = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return log && console.log('onChange', ...args);
};
export const onExpand = function () {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return log && console.log('onExpand', ...args);
};
export const onCollapse = function () {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }
  return log && console.log('onCollapse', ...args);
};
export const onChildrenLoaded = function () {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }
  return log && console.log('onChildrenLoaded', ...args);
};
const createResponse = _ref => {
  let {
    fields,
    id,
    path,
    displayName,
    children
  } = _ref;
  return {
    ...(fields.includes('id') ? {
      id
    } : {}),
    ...(fields.includes('path') ? {
      path
    } : {}),
    ...(fields.includes('displayName') ? {
      displayName
    } : {}),
    ...(fields.includes('children::size') ? {
      children: children.length
    } : {}),
    ...(fields.includes('children[id,path,displayName]') ? {
      children
    } : {})
  };
};
export const getOrganisationUnitData = (id, _ref2) => {
  let {
    fields
  } = _ref2;
  let data;
  if (id === 'A0000000000') {
    data = createResponse({
      fields,
      id: 'A0000000000',
      path: '/A0000000000',
      displayName: 'Org Unit 1',
      children: [{
        id: 'A0000000001',
        path: '/A0000000000/A0000000001',
        children: [{
          id: 'A0000000003'
        }, {
          id: 'A0000000004'
        }],
        displayName: 'Org Unit 2'
      }, {
        id: 'A0000000002',
        path: '/A0000000000/A0000000002',
        children: [],
        displayName: 'Org Unit 3'
      }, {
        id: 'A0000000006',
        path: '/A0000000000/A0000000006',
        children: [],
        displayName: 'Org Unit 7'
      }]
    });
  }
  if (id === 'A0000000001') {
    data = createResponse({
      fields,
      id: 'A0000000001',
      path: '/A0000000000/A0000000001',
      displayName: 'Org Unit 2',
      children: [{
        id: 'A0000000003',
        path: '/A0000000000/A0000000001/A0000000003',
        children: [],
        displayName: 'Org Unit 4'
      }, {
        id: 'A0000000004',
        path: '/A0000000000/A0000000001/A0000000004',
        children: [],
        displayName: 'Org Unit 5'
      }]
    });
  }
  if (id === 'A0000000002') {
    data = createResponse({
      fields,
      displayName: 'Org Unit 3',
      id: 'A0000000002',
      path: '/A0000000000/A0000000002',
      children: []
    });
  }
  if (id === 'A0000000003') {
    data = createResponse({
      fields,
      displayName: 'Org Unit 4',
      id: 'A0000000003',
      path: '/A0000000000/A0000000001/A0000000003',
      children: [{
        id: 'A0000000007',
        path: '/A0000000000/A0000000001/A0000000003/A0000000007',
        children: [],
        displayName: 'Org Unit 8'
      }]
    });
  }
  if (id === 'A0000000004') {
    data = createResponse({
      fields,
      displayName: 'Org Unit 5',
      id: 'A0000000004',
      path: '/A0000000000/A0000000001/A0000000004',
      children: []
    });
  }
  if (id === 'A0000000006') {
    data = createResponse({
      fields,
      displayName: 'Org Unit 7',
      id: 'A0000000006',
      path: '/A0000000000/A0000000006',
      children: []
    });
  }
  if (id === 'A0000000007') {
    data = createResponse({
      fields,
      displayName: 'Org Unit 8',
      id: 'A0000000007',
      path: '/A0000000000/A0000000001/A0000000003/A0000000007',
      children: []
    });
  }
  return data;
};
export const customData = {
  organisationUnits: (_, _ref3) => {
    let {
      id,
      params = {}
    } = _ref3;
    const data = getOrganisationUnitData(id, params);
    if (!data) {
      return Promise.reject(new Error('404 - Org unit not found'));
    }
    return Promise.resolve(data);
  }
};
export const StatefulMultiSelectionWrapper = _ref4 => {
  let {
    children,
    onSelectionChange = () => null
  } = _ref4;
  const [selected, setSelected] = useState([]);
  return children({
    selected,
    onChange: function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      onChange(...args);
      const [{
        selected: newSelected
      }] = args;
      setSelected(newSelected);
      onSelectionChange(newSelected);
    }
  });
};
StatefulMultiSelectionWrapper.propTypes = {
  children: PropTypes.func.isRequired,
  onSelectionChange: PropTypes.func
};
export const createDecoratorStatefulMultiSelection = args => {
  return Story => /*#__PURE__*/React.createElement(StatefulMultiSelectionWrapper, {
    onSelectionChange: args === null || args === void 0 ? void 0 : args.onSelectionChange
  }, _ref5 => {
    let {
      selected,
      onChange
    } = _ref5;
    return /*#__PURE__*/React.createElement(Story, {
      selected: selected,
      onChange: onChange
    });
  });
};
export const createDecoratorCustomDataProvider = args => {
  const data = (args === null || args === void 0 ? void 0 : args.data) || customData;
  return Story => {
    return /*#__PURE__*/React.createElement(CustomDataProvider, {
      data: data
    }, /*#__PURE__*/React.createElement(Story, null));
  };
};