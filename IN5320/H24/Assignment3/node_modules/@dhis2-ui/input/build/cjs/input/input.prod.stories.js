"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithValue = exports.ValueTextOverflow = exports.StatusWarning = exports.StatusValid = exports.StatusLoading = exports.StatusError = exports.ReadOnly = exports.RTLErrorPlaceholder = exports.PlaceholderNoValue = exports.NumberMaxMinStep = exports.NoPlaceholderNoValue = exports.Focus = exports.Disabled = exports.Dense = exports.Default = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _index = require("./index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const description = `
An input allows a user to enter data, usually text.

Inputs are used wherever a user needs to input standard text information. Inputs are often used as part of forms. An input can also be used to capture information outside of a form, perhaps as a 'Filter' or 'Search' field.

To use a label and validation text, consider the \`InputField\` component.

Read more about Inputs and InputFields at [Design System: Inputs](https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md).

\`\`\`js
import { Input } from '@dhis/ui'
\`\`\`
`;
const inputTypeArgType = {
  table: {
    type: {
      summary: 'string'
    }
  },
  control: {
    type: 'select',
    options: ['text', 'number', 'password', 'email', 'url', 'tel', 'date', 'datetime', 'datetime-local', 'month', 'week', 'time', 'search']
  }
};
const logger = _ref => {
  let {
    name,
    value
  } = _ref;
  return console.log(`Name: ${name}, value: ${value}`);
};
var _default = exports.default = {
  title: 'Input',
  component: _index.Input,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  args: {
    name: 'defaultName',
    onChange: logger
  },
  argTypes: {
    type: {
      ...inputTypeArgType
    },
    valid: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: {
      ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_index.Input, args);
const Default = exports.Default = Template.bind({});
const NoPlaceholderNoValue = exports.NoPlaceholderNoValue = Template.bind({});
NoPlaceholderNoValue.storyName = 'No placeholder, no value';
const PlaceholderNoValue = exports.PlaceholderNoValue = Template.bind({});
PlaceholderNoValue.args = {
  placeholder: 'Hold the place'
};
PlaceholderNoValue.storyName = 'Placeholder, no value';
const WithValue = exports.WithValue = Template.bind({});
WithValue.args = {
  value: 'This is set through the value prop, which means the component is controlled.'
};
const NumberMaxMinStep = exports.NumberMaxMinStep = Template.bind({});
NumberMaxMinStep.args = {
  type: 'number',
  max: '3',
  min: '0',
  step: '0.5'
};
const Focus = exports.Focus = Template.bind({});
Focus.args = {
  initialFocus: true
};
// Disabled initial focus stories on docs page
Focus.parameters = {
  docs: {
    disable: true
  }
};
const StatusValid = exports.StatusValid = Template.bind({});
StatusValid.args = {
  valid: true,
  value: 'This value is valid'
};
StatusValid.storyName = 'Status: Valid';
const StatusWarning = exports.StatusWarning = Template.bind({});
StatusWarning.args = {
  warning: true,
  value: 'This value produces a warning'
};
StatusWarning.storyName = 'Status: Warning';
const StatusError = exports.StatusError = Template.bind({});
StatusError.args = {
  error: true,
  value: 'This value produces an error'
};
StatusError.storyName = 'Status: Error';
const StatusLoading = exports.StatusLoading = Template.bind({});
StatusLoading.args = {
  loading: true,
  value: 'This value produces a loading state'
};
StatusLoading.storyName = 'Status: Loading';
const Disabled = exports.Disabled = Template.bind({});
Disabled.args = {
  disabled: true,
  value: 'This field is disabled'
};
const ReadOnly = exports.ReadOnly = Template.bind({});
ReadOnly.args = {
  readOnly: true,
  value: 'This field is read-only'
};
const Dense = exports.Dense = Template.bind({});
Dense.args = {
  dense: true,
  value: 'This field is dense'
};
const ValueTextOverflow = exports.ValueTextOverflow = Template.bind({});
ValueTextOverflow.args = {
  value: "This value is too long in order to show on a single line of the input field. It should stay on one line, not in an extra line and which wouldn't look like a standard input",
  dense: true,
  warning: true
};
const RTLErrorPlaceholder = args => /*#__PURE__*/_react.default.createElement("div", {
  dir: "rtl"
}, /*#__PURE__*/_react.default.createElement(_index.Input, args));
exports.RTLErrorPlaceholder = RTLErrorPlaceholder;
RTLErrorPlaceholder.args = {
  error: true,
  placeholder: 'RTL placeholder'
};