"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithValue = exports.WithHelpText = exports.ValueTextOverflow = exports.StatusWarning = exports.StatusValid = exports.StatusLoading = exports.StatusError = exports.Required = exports.ReadOnly = exports.PlaceholderNoValue = exports.NoPlaceholderNoValue = exports.LabelTextOverflow = exports.InputWidth = exports.Focus = exports.Disabled = exports.Dense = exports.Default = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _index = require("./index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const subtitle = 'Allows a user to enter data, usually text';
const description = `
Inputs are used wherever a user needs to input standard text information. Inputs are often used as part of forms. An input can also be used to capture information outside of a form, perhaps as a 'Filter' or 'Search' field.

InputField wraps an Input component with a label, help text, validation text, and some other features.

Please see more about options and features of inputs at [Design System: Input Field](https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md#input).

\`\`\`js
import { InputField } from '@dhis2/ui'
\`\`\`
`;
const logger = _ref => {
  let {
    name,
    value
  } = _ref;
  return console.log(`Name: ${name}, value: ${value}`);
};
const inputTypeArgType = {
  table: {
    type: {
      summary: 'string'
    }
  },
  control: {
    type: 'select',
    options: ['text', 'number', 'password', 'email', 'url', 'tel', 'date', 'datetime', 'datetime-local', 'month', 'week', 'time', 'search']
  }
};
var _default = exports.default = {
  title: 'Input Field',
  component: _index.InputField,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  },
  // Default args
  args: {
    label: 'Default label',
    name: 'defaultName',
    onChange: logger
  },
  argTypes: {
    type: {
      ...inputTypeArgType
    },
    valid: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: {
      ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_index.InputField, args);
const Default = exports.Default = Template.bind({});
const NoPlaceholderNoValue = exports.NoPlaceholderNoValue = Template.bind({});
NoPlaceholderNoValue.storyName = 'No placeholder, no value';
const PlaceholderNoValue = exports.PlaceholderNoValue = Template.bind({});
PlaceholderNoValue.args = {
  placeholder: 'Hold the place'
};
PlaceholderNoValue.storyName = 'Placeholder, no value';
const WithHelpText = exports.WithHelpText = Template.bind({});
WithHelpText.args = {
  ...PlaceholderNoValue.args,
  helpText: 'With some helping text to guide the user along'
};
const WithValue = exports.WithValue = Template.bind({});
WithValue.args = {
  value: 'This is set through the value prop, which means the component is controlled.'
};
const Focus = exports.Focus = Template.bind({});
Focus.args = {
  initialFocus: true
};
// Disabled initial focus stories on docs page
Focus.parameters = {
  docs: {
    disable: true
  }
};
const StatusValid = exports.StatusValid = Template.bind({});
StatusValid.args = {
  valid: true,
  value: 'This value is valid'
};
StatusValid.storyName = 'Status: Valid';
const StatusWarning = exports.StatusWarning = Template.bind({});
StatusWarning.args = {
  warning: true,
  value: 'This value produces a warning'
};
StatusWarning.storyName = 'Status: Warning';
const StatusError = exports.StatusError = Template.bind({});
StatusError.args = {
  error: true,
  value: 'This value produces an error',
  helpText: 'This is some help text to advise what this input actually is.',
  validationText: 'This validation text describes the error, if a message is supplied.'
};
StatusError.storyName = 'Status: Error';
const StatusLoading = exports.StatusLoading = Template.bind({});
StatusLoading.args = {
  loading: true,
  value: 'This value produces a loading state'
};
StatusLoading.storyName = 'Status: Loading';
const Disabled = exports.Disabled = Template.bind({});
Disabled.args = {
  disabled: true,
  value: 'This field is disabled'
};
const ReadOnly = exports.ReadOnly = Template.bind({});
ReadOnly.args = {
  readOnly: true,
  value: 'This field is read-only'
};
const Dense = exports.Dense = Template.bind({});
Dense.args = {
  dense: true,
  value: 'This field is dense'
};
const InputWidth = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.InputField, _extends({}, args, {
  name: "input1",
  label: "My inputField has a width of 100px",
  inputWidth: "100px"
})), /*#__PURE__*/_react.default.createElement(_index.InputField, _extends({}, args, {
  name: "input2",
  label: "My inputField has a width of 220px",
  inputWidth: "220px"
})));
exports.InputWidth = InputWidth;
const LabelTextOverflow = exports.LabelTextOverflow = Template.bind({});
LabelTextOverflow.args = {
  dense: true,
  warning: true,
  label: "This label is too long to show on a single line of the input field's label. We just let it flow to the next line so the user can still read it. However, we should always aim to keep it shorter than this!"
};
const ValueTextOverflow = exports.ValueTextOverflow = Template.bind({});
ValueTextOverflow.args = {
  value: "This value is too long in order to show on a single line of the input field. It should stay on one line, not in an extra line and which wouldn't look like a standard input",
  dense: true,
  warning: true
};
const Required = exports.Required = Template.bind({});
Required.args = {
  required: true
};