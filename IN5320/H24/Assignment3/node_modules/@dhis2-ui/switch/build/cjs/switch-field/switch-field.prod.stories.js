"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WarningDense = exports.Warning = exports.ValidDense = exports.Valid = exports.RequiredDense = exports.Required = exports.ImageLabelDense = exports.ImageLabel = exports.HelpText = exports.FocusedUncheckedDense = exports.FocusedUnchecked = exports.FocusedCheckedDense = exports.FocusedChecked = exports.ErrorDense = exports.Error = exports.DisabledDense = exports.Disabled = exports.DefaultDense = exports.Default = exports.CheckedDense = exports.Checked = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _index = require("./index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const description = `
A \`SwitchField\` is a Switch component wrapped with extra form utilities, including the ability to add a label, help text, and validation text.  Validation styles like 'error' apply to all of these subcomponents.

See the basic Switch for usage and design system guidelines.

\`\`\`js
import { SwitchField } from '@dhis2/ui'
\`\`\`
`;
const logger = _ref => {
  let {
    name,
    value,
    checked
  } = _ref;
  return console.log(`name: ${name}, value: ${value}, checked: ${checked}`);
};
var _default = exports.default = {
  title: 'Switch Field',
  component: _index.SwitchField,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  // Default args for stories
  args: {
    name: 'switchName',
    label: 'Switch Field',
    value: 'defaultValue',
    onChange: logger
  },
  argTypes: {
    valid: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: {
      ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: {
      ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_index.SwitchField, args);
const CheckedUncheckedTemplate = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.SwitchField, args), /*#__PURE__*/_react.default.createElement(_index.SwitchField, _extends({}, args, {
  checked: true
})));
const Default = exports.Default = Template.bind({});
const FocusedUnchecked = exports.FocusedUnchecked = Template.bind({});
FocusedUnchecked.args = {
  initialFocus: true
};
// Disable stories on docs page that grab focus
FocusedUnchecked.parameters = {
  docs: {
    disable: true
  }
};
const FocusedChecked = exports.FocusedChecked = Template.bind({});
FocusedChecked.args = {
  ...FocusedUnchecked.args,
  checked: true
};
FocusedChecked.parameters = {
  docs: {
    disable: true
  }
};
const Checked = exports.Checked = Template.bind({});
Checked.args = {
  checked: true,
  value: 'checkedValue'
};
const Required = exports.Required = Template.bind({});
Required.args = {
  required: true
};
const Disabled = exports.Disabled = CheckedUncheckedTemplate.bind({});
Disabled.args = {
  disabled: true
};
const HelpText = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.SwitchField, args), /*#__PURE__*/_react.default.createElement(_index.SwitchField, _extends({}, args, {
  error: true,
  validationText: "Validation text (error state)"
})));
exports.HelpText = HelpText;
HelpText.args = {
  helpText: 'Help text'
};
const Valid = exports.Valid = CheckedUncheckedTemplate.bind({});
Valid.args = {
  valid: true,
  validationText: 'I am validation text',
  value: 'validValue'
};
const Warning = exports.Warning = CheckedUncheckedTemplate.bind({});
Warning.args = {
  warning: true,
  value: 'warningValue',
  validationText: 'I am validation text'
};
const Error = exports.Error = CheckedUncheckedTemplate.bind({});
Error.args = {
  error: true,
  value: 'errorValue',
  validationText: 'I am validation text'
};
const ImageLabel = exports.ImageLabel = Template.bind({});
ImageLabel.args = {
  label: /*#__PURE__*/_react.default.createElement("img", {
    src: "https://picsum.photos/id/82/200/100"
  })
};
const DefaultDense = exports.DefaultDense = Template.bind({});
DefaultDense.storyName = 'Default - Dense';
DefaultDense.args = {
  dense: true
};
const FocusedUncheckedDense = exports.FocusedUncheckedDense = Template.bind({});
FocusedUncheckedDense.args = {
  ...DefaultDense.args,
  ...FocusedUnchecked.args
};
FocusedUncheckedDense.parameters = {
  docs: {
    disable: true
  }
};
FocusedUncheckedDense.storyName = 'Focused unchecked - Dense';
const FocusedCheckedDense = exports.FocusedCheckedDense = Template.bind({});
FocusedCheckedDense.args = {
  ...DefaultDense.args,
  ...FocusedChecked.args
};
FocusedCheckedDense.parameters = {
  docs: {
    disable: true
  }
};
FocusedCheckedDense.storyName = 'Focused checked - Dense';
const CheckedDense = exports.CheckedDense = Template.bind({});
CheckedDense.args = {
  ...DefaultDense.args,
  ...Checked.args
};
CheckedDense.storyName = 'Checked - Dense';
const RequiredDense = exports.RequiredDense = Template.bind({});
RequiredDense.args = {
  ...DefaultDense.args,
  ...Required.args
};
RequiredDense.storyName = 'Required - Dense';
const DisabledDense = exports.DisabledDense = CheckedUncheckedTemplate.bind({});
DisabledDense.args = {
  ...DefaultDense.args,
  ...Disabled.args
};
DisabledDense.storyName = 'Disabled - Dense';
const ValidDense = exports.ValidDense = CheckedUncheckedTemplate.bind({});
ValidDense.args = {
  ...DefaultDense.args,
  ...Valid.args
};
ValidDense.storyName = 'Valid - Dense';
const WarningDense = exports.WarningDense = CheckedUncheckedTemplate.bind({});
WarningDense.args = {
  ...DefaultDense.args,
  ...Warning.args
};
WarningDense.storyName = 'Warning - Dense';
const ErrorDense = exports.ErrorDense = CheckedUncheckedTemplate.bind({});
ErrorDense.args = {
  ...DefaultDense.args,
  ...Error.args
};
ErrorDense.storyName = 'Error - Dense';
const ImageLabelDense = exports.ImageLabelDense = Template.bind({});
ImageLabelDense.args = {
  ...DefaultDense.args,
  ...ImageLabel.args
};
ImageLabelDense.storyName = 'Image label - Dense';