"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithUserAndGroupAccesses = exports.WithName = exports.WithDisabledAccess = exports.Simple = exports.RTL = exports.ForDashboardWithPublicAccess = exports.ForDashboardWithCascadeSharingSuccess = exports.ForDashboardWithCascadeSharingPartialSuccess = exports.ForDashboard = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _react = _interopRequireWildcard(require("react"));
var _sharingDialog = require("./sharing-dialog.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const subtitle = 'The common dialog for managing object sharing in DHIS2 apps';
const description = `
The sharing dialog can be used in different apps that use the standard object API, like visualizations, dashboards...

It allows to view and edit the sharing settings for the given object.

\`\`\`js
import { SharingDialog } from '@dhis2/ui'
\`\`\`
`;
var _default = exports.default = {
  title: 'Sharing Dialog',
  component: _sharingDialog.SharingDialog,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      // Use iframes to contain modals in docs page (otherwise chaos ensues)
      inlineStories: false,
      iframeHeight: '620px',
      /**
       * Due to iframes being very slow, disable stories on the docs page by default and
       * make one representative story as the primary ('Simple')
       */
      disable: true,
      description: {
        component: description
      }
    }
  },
  // Default args for stories
  args: {
    type: 'visualization',
    id: 'sharing-test',
    onClose: Function.prototype
  }
};
const customSearchData = {
  'sharing/search': {
    userGroups: [{
      id: 'wl5cDMuUhmF',
      name: 'Administrators',
      displayName: 'Administrators'
    }, {
      id: 'lFHP5lLkzVr',
      name: 'System administrators',
      displayName: 'System administrators'
    }, {
      id: 'zz6XckBrLlj',
      name: '_DATASET_System administrator (ALL)',
      displayName: '_DATASET_System administrator (ALL)'
    }, {
      id: 'vRoAruMnNpB',
      name: '_PROGRAM_MNCH / PNC (Adult Woman) program',
      displayName: '_PROGRAM_MNCH / PNC (Adult Woman) program'
    }, {
      id: 'pBnkuih0c1K',
      name: '_PROGRAM_System administrator (ALL)',
      displayName: '_PROGRAM_System administrator (ALL)'
    }],
    users: [{
      id: 'xE7jOejl9FI',
      name: 'John Traore',
      displayName: 'John Traore'
    }]
  }
};
const customDefaultData = {
  sharing: {
    meta: {
      allowExternalAccess: true,
      allowPublicAccess: true
    },
    object: {
      id: 'sharing-test',
      name: '',
      displayName: '',
      externalAccess: false,
      publicAccess: '--------',
      userAccesses: [],
      userGroupAccesses: []
    }
  },
  ...customSearchData
};
const customData = {
  ...customDefaultData,
  sharing: {
    ...customDefaultData.sharing,
    object: {
      ...customDefaultData.sharing.object,
      name: 'Sharing test',
      displayName: "Sharing dialog's test"
    }
  }
};
const customDataDisabledAccess = {
  ...customData,
  sharing: {
    ...customData.sharing,
    meta: {
      allowExternalAccess: false,
      allowPublicAccess: false
    }
  }
};
const customDataWithUserGroupAccesses = {
  ...customData,
  sharing: {
    ...customData.sharing,
    object: {
      ...customData.sharing.object,
      userAccesses: [{
        id: 'user-1',
        name: 'Kvist',
        access: 'rw------'
      }],
      userGroupAccesses: [{
        id: 'group-1',
        name: 'Trolls',
        access: 'r-------'
      }]
    }
  }
};
const dashboardData = {
  ...customDataWithUserGroupAccesses,
  dashboards: {
    dashboardItems: [{
      type: 'TEXT'
    }, {
      type: 'VISUALIZATION'
    }, {
      type: 'MAP'
    }, {
      type: 'EVENT_CHART'
    }, {
      type: 'EVENT_REPORT'
    }, {
      type: 'APP'
    }, {
      type: 'MESSAGES'
    }]
  }
};
const dashboardDataWithPublicAccess = {
  ...dashboardData,
  sharing: {
    ...customData.sharing,
    object: {
      ...customData.sharing.object,
      publicAccess: 'r-------'
    }
  }
};
const Simple = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customDefaultData
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
// Have this be the primary story on the docs page
exports.Simple = Simple;
Simple.parameters = {
  docs: {
    disable: false,
    source: {
      type: 'dynamic'
    }
  }
};
const WithName = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customData
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.WithName = WithName;
WithName.storyName = 'With name';
const WithDisabledAccess = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customDataDisabledAccess
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.WithDisabledAccess = WithDisabledAccess;
WithDisabledAccess.storyName = 'With disabled access';
const WithUserAndGroupAccesses = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: customDataWithUserGroupAccesses
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.WithUserAndGroupAccesses = WithUserAndGroupAccesses;
WithUserAndGroupAccesses.storyName = 'With user and group accesses';
const ForDashboard = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: dashboardData
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.ForDashboard = ForDashboard;
ForDashboard.storyName = 'For dashboard';
ForDashboard.args = {
  type: 'dashboard'
};
const ForDashboardWithPublicAccess = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: dashboardDataWithPublicAccess
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.ForDashboardWithPublicAccess = ForDashboardWithPublicAccess;
ForDashboardWithPublicAccess.storyName = 'For dashboard with public access';
ForDashboardWithPublicAccess.args = {
  type: 'dashboard'
};
const cascadingSharingSuccess = {
  'dashboards/cascadeSharing/sharing-test': {
    countUpdatedDashboardItems: 4,
    errorReports: []
  }
};
const ForDashboardWithCascadeSharingSuccess = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: {
    ...dashboardData,
    ...cascadingSharingSuccess
  }
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.ForDashboardWithCascadeSharingSuccess = ForDashboardWithCascadeSharingSuccess;
ForDashboardWithCascadeSharingSuccess.storyName = 'For dashboard with cascading sharing success';
ForDashboardWithCascadeSharingSuccess.args = {
  type: 'dashboard'
};
const cascadingSharingPartialSuccess = {
  'dashboards/cascadeSharing/sharing-test': {
    countUpdatedDashboardItems: 3,
    errorReports: []
  }
};
const ForDashboardWithCascadeSharingPartialSuccess = args => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: {
    ...dashboardData,
    ...cascadingSharingPartialSuccess
  }
}, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args));
exports.ForDashboardWithCascadeSharingPartialSuccess = ForDashboardWithCascadeSharingPartialSuccess;
ForDashboardWithCascadeSharingPartialSuccess.storyName = 'For dashboard with cascading sharing partial success';
ForDashboardWithCascadeSharingPartialSuccess.args = {
  type: 'dashboard'
};
const RTL = args => {
  (0, _react.useEffect)(() => {
    document.body.dir = 'rtl';
    return () => {
      document.body.dir = 'ltr';
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    dir: "rtl"
  }, /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
    data: customDefaultData
  }, /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, args)));
};
exports.RTL = RTL;
RTL.parameters = {
  docs: {
    disable: false,
    source: {
      type: 'dynamic'
    }
  }
};