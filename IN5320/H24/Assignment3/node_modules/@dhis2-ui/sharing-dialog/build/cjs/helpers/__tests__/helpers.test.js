"use strict";

var _constants = require("../../constants.js");
var _helpers = require("../helpers.js");
describe('helpers', () => {
  describe('convertAccessToConstant', () => {
    it('disallows access if the access string is undefined', () => {
      expect((0, _helpers.convertAccessToConstant)()).toEqual(_constants.ACCESS_NONE);
    });
    it('disallows access if the access string is invalid', () => {
      expect((0, _helpers.convertAccessToConstant)('invalid-access-string')).toEqual(_constants.ACCESS_NONE);
    });
    const cases = [['--------', _constants.ACCESS_NONE], ['r-------', _constants.ACCESS_VIEW_ONLY], ['r-r-----', _constants.ACCESS_VIEW_ONLY], ['rw------', _constants.ACCESS_VIEW_AND_EDIT], ['rwrw----', _constants.ACCESS_VIEW_AND_EDIT]];
    it.each(cases)('parses the metadata portion of the access string correctly for %s', (accessString, accessConstant) => {
      expect((0, _helpers.convertAccessToConstant)(accessString)).toEqual(accessConstant);
    });
  });
  describe('convertConstantToAccess', () => {
    it('returns the default access string if the access constant is not recognised', () => {
      const expected = '--------';
      expect((0, _helpers.convertConstantToAccess)('NOT_RECOGNISED')).toEqual(expected);
    });
    const cases = [[_constants.ACCESS_NONE, '--------', false], [_constants.ACCESS_VIEW_ONLY, 'r-------', true], [_constants.ACCESS_VIEW_AND_EDIT, 'rw------', true]];
    it.each(cases)('returns the correct metadata access string for %s', (accessConstant, accessString) => {
      expect((0, _helpers.convertConstantToAccess)(accessConstant)).toEqual(accessString);
    });
    it.each(cases)('returns the correct boolean value for %s', (accessConstant, accessString, accessBoolean) => {
      expect((0, _helpers.convertConstantToAccess)(accessConstant, true)).toEqual(accessBoolean);
    });
  });
  describe('isRemovableTarget', () => {
    it('returns false for targets that should not be removable', () => {
      expect((0, _helpers.isRemovableTarget)(_constants.SHARE_TARGET_EXTERNAL)).toBe(false);
      expect((0, _helpers.isRemovableTarget)(_constants.SHARE_TARGET_PUBLIC)).toBe(false);
    });
    it('returns true for all other targets', () => {
      expect((0, _helpers.isRemovableTarget)('Does not exist')).toBe(true);
    });
  });
});