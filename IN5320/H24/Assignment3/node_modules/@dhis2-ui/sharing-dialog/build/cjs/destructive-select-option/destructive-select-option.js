"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DestructiveSelectOption = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _uiConstants = require("@dhis2/ui-constants");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * This option is not seen as a valid select option by our select component. Which
 * is fine, what that means is that the select won't add a click handler and active
 * prop to it and that's what we want. Normally when invalid options are clicked
 * they won't close the select, but in this case it will remove the select entirely,
 * so that's not a problem either. It is slightly hacky, but should be stable.
 */

const DestructiveSelectOption = _ref => {
  let {
    label,
    onClick
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    onClick: onClick,
    className: _style.default.dynamic([["1009072197", [_uiConstants.colors.red700, _uiConstants.spacers.dp8, _uiConstants.spacers.dp12, _uiConstants.colors.red050]]])
  }, label, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "1009072197",
    dynamic: [_uiConstants.colors.red700, _uiConstants.spacers.dp8, _uiConstants.spacers.dp12, _uiConstants.colors.red050]
  }, [`div.__jsx-style-dynamic-selector{cursor:pointer;font-size:14px;-webkit-text-decoration:none;text-decoration:none;color:${_uiConstants.colors.red700};padding:${_uiConstants.spacers.dp8} ${_uiConstants.spacers.dp12};}`, `div.__jsx-style-dynamic-selector:hover{background-color:${_uiConstants.colors.red050};}`]));
};
exports.DestructiveSelectOption = DestructiveSelectOption;
DestructiveSelectOption.propTypes = {
  label: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func.isRequired
};