"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVisualizationsCount = exports.getResultMessage = exports.getInfoMessage = void 0;
var _index = _interopRequireDefault(require("../locales/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const getVisualizationsCount = dashboardItems => {
  if (dashboardItems.length === 0) {
    return dashboardItems.length;
  }

  // Only these types will be updated
  const keep = ['VISUALIZATION', 'MAP', 'EVENT_CHART', 'EVENT_REPORT'];

  // Filter the dashboardItems by the above types and count them only
  return dashboardItems.filter(item => keep.includes(item.type)).length;
};
exports.getVisualizationsCount = getVisualizationsCount;
const getResultMessage = _ref => {
  let {
    itemsCount,
    visualizationsCount,
    hasErrors,
    updatedItems
  } = _ref;
  if (hasErrors) {
    if (updatedItems === 0) {
      return _index.default.t('No visualizations were updated. Check that you have permission to change sharing for all visualizations.');
    }
    if (updatedItems && itemsCount) {
      return _index.default.t('Not all visualizations could be updated successfully. {{ success }} updated successfully, {{ failed }} failed to update. Check that you have permission to change sharing for all visualizations.', {
        success: updatedItems,
        failed: visualizationsCount - updatedItems
      });
    }
  }
  if (updatedItems === 0) {
    return _index.default.t('No visualizations were updated because sharing settings are already sufficient.');
  }
  if (updatedItems === visualizationsCount) {
    return _index.default.t('Successfully updated sharing for all visualizations.');
  }
  if (updatedItems < visualizationsCount) {
    return _index.default.t('Not all visualization sharing settings needed to be updated. {{ updated }} updated, {{ skipped }} already had sufficient sharing settings.', {
      updated: updatedItems,
      skipped: visualizationsCount - updatedItems
    });
  }
  return '';
};
exports.getResultMessage = getResultMessage;
const getInfoMessage = _ref2 => {
  let {
    entityAmount,
    visualizationsCount
  } = _ref2;
  if (entityAmount === 0) {
    return _index.default.t('There are no users or groups to apply sharing settings for.');
  }
  return _index.default.t('Number of visualizations on this dashboard that will potentially get updated sharing settings: {{ visualizationsCount }}. The number of users or groups that these updated settings will apply to: {{ entityAmount }}.', {
    visualizationsCount,
    entityAmount,
    nsSeparator: '>'
  });
};
exports.getInfoMessage = getInfoMessage;