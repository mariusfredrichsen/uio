"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharingDialog = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _constants = require("./constants.js");
var _index = require("./fetching-context/index.js");
var _index2 = require("./helpers/index.js");
var _index3 = require("./modal/index.js");
var _index4 = require("./tabs/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const query = {
  sharing: {
    resource: 'sharing',
    params: _ref => {
      let {
        type,
        id
      } = _ref;
      return {
        type,
        id
      };
    }
  }
};
const mutation = {
  resource: 'sharing',
  params: _ref2 => {
    let {
      type,
      id
    } = _ref2;
    return {
      type,
      id
    };
  },
  type: 'update',
  data: _ref3 => {
    let {
      data
    } = _ref3;
    return data;
  }
};
const emptyFunction = () => {};
const defaultInitialSharingSettings = {
  name: '',
  allowPublic: true,
  public: _constants.ACCESS_NONE,
  groups: {},
  users: {}
};
const SharingDialog = _ref4 => {
  let {
    id,
    type,
    onClose = emptyFunction,
    onError = emptyFunction,
    onSave = emptyFunction,
    initialSharingSettings = defaultInitialSharingSettings,
    dataTest = 'dhis2-uicore-sharingdialog'
  } = _ref4;
  const {
    show: showError
  } = (0, _appRuntime.useAlert)(error => error, {
    critical: true
  });

  /**
   * Data fetching
   */

  const {
    data,
    refetch,
    loading,
    fetching
  } = (0, _appRuntime.useDataQuery)(query, {
    variables: {
      id,
      type
    },
    onError: error => {
      showError(error);
      onError(error);
    }
  });
  const [mutate, {
    loading: mutating
  }] = (0, _appRuntime.useDataMutation)(mutation, {
    variables: {
      type,
      id
    },
    onError: error => {
      showError(error);
      onError(error);
      refetch();
    },
    onComplete: () => {
      refetch();
      onSave();
    }
  });

  /**
   * Refresh data when type or id props change
   */

  (0, _react.useEffect)(() => {
    refetch({
      type,
      id
    });
  }, [type, id]);

  /**
   * Block interaction during the initial load
   */

  if (loading) {
    const users = Object.keys(initialSharingSettings.users).map(_index2.replaceAccessWithConstant);
    const groups = Object.keys(initialSharingSettings.groups).map(_index2.replaceAccessWithConstant);
    return /*#__PURE__*/_react.default.createElement(_index.FetchingContext.Provider, {
      value: true
    }, /*#__PURE__*/_react.default.createElement(_index3.Modal, {
      onClose: onClose
    }, /*#__PURE__*/_react.default.createElement(_index4.TabbedContent, {
      id: id,
      users: users,
      groups: groups,
      publicAccess: initialSharingSettings.public,
      allowPublicAccess: initialSharingSettings.allowPublic,
      type: type,
      onAdd: () => {},
      onChange: () => {},
      onRemove: () => {}
    })));
  }
  const {
    object,
    meta
  } = data.sharing;
  const publicAccess = (0, _index2.convertAccessToConstant)(object.publicAccess);
  const users = object.userAccesses.map(_index2.replaceAccessWithConstant);
  const groups = object.userGroupAccesses.map(_index2.replaceAccessWithConstant);

  /**
   * Handlers
   */

  const onAdd = _ref5 => {
    let {
      type: newType,
      id: newId,
      access,
      name
    } = _ref5;
    const data = (0, _index2.createOnAddPayload)({
      object,
      type: newType,
      access,
      id: newId,
      name
    });
    mutate({
      data,
      type,
      id
    });
  };
  const onChange = _ref6 => {
    let {
      type: changedType,
      id: changedId,
      access
    } = _ref6;
    const data = (0, _index2.createOnChangePayload)({
      object,
      type: changedType,
      access,
      id: changedId
    });
    mutate({
      data,
      type,
      id
    });
  };
  const onRemove = _ref7 => {
    let {
      type: removedType,
      id: removedId
    } = _ref7;
    const data = (0, _index2.createOnRemovePayload)({
      object,
      type: removedType,
      id: removedId
    });
    mutate({
      data,
      type,
      id
    });
  };
  return /*#__PURE__*/_react.default.createElement(_index.FetchingContext.Provider, {
    value: mutating || fetching
  }, /*#__PURE__*/_react.default.createElement(_index3.Modal, {
    onClose: onClose,
    name: object.displayName || object.name,
    dataTest: dataTest
  }, /*#__PURE__*/_react.default.createElement(_index4.TabbedContent, {
    id: id,
    users: users,
    groups: groups,
    publicAccess: publicAccess,
    allowPublicAccess: meta.allowPublicAccess,
    type: type,
    onAdd: onAdd,
    onChange: onChange,
    onRemove: onRemove
  })));
};
exports.SharingDialog = SharingDialog;
SharingDialog.propTypes = {
  /** The id of the object to share */
  id: _propTypes.default.string.isRequired,
  /** The type of object to share */
  type: _propTypes.default.oneOf(_constants.DIALOG_TYPES_LIST).isRequired,
  dataTest: _propTypes.default.string,
  /** Used to seed the component with data to show whilst loading */
  initialSharingSettings: _propTypes.default.shape({
    allowPublic: _propTypes.default.bool.isRequired,
    groups: _propTypes.default.objectOf(_propTypes.default.shape({
      access: _propTypes.default.string.isRequired,
      id: _propTypes.default.string.isRequired,
      name: _propTypes.default.string.isRequired
    })),
    name: _propTypes.default.string,
    public: _propTypes.default.oneOf([_constants.ACCESS_NONE, _constants.ACCESS_VIEW_ONLY, _constants.ACCESS_VIEW_AND_EDIT]),
    users: _propTypes.default.objectOf(_propTypes.default.shape({
      access: _propTypes.default.string.isRequired,
      id: _propTypes.default.string.isRequired,
      name: _propTypes.default.string.isRequired
    }))
  }),
  onClose: _propTypes.default.func,
  onError: _propTypes.default.func,
  onSave: _propTypes.default.func
};