import _JSXStyle from "styled-jsx/style";
import { useDhis2ConnectionStatus } from '@dhis2/app-runtime';
import { colors, spacers } from '@dhis2/ui-constants';
import { Button } from '@dhis2-ui/button';
import { SingleSelectField, SingleSelectOption } from '@dhis2-ui/select';
import PropTypes from 'prop-types';
import React, { useState, useContext } from 'react';
import { SharingAutocomplete } from '../autocomplete/index.js';
import { ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT } from '../constants.js';
import { FetchingContext } from '../fetching-context/index.js';
import i18n from '../locales/index.js';
import { Title } from '../text/index.js';
export const AccessAdd = _ref => {
  let {
    onAdd
  } = _ref;
  const isFetching = useContext(FetchingContext);
  const [entity, setEntity] = useState(null);
  const [access, setAccess] = useState('');
  const {
    isDisconnected: offline
  } = useDhis2ConnectionStatus();
  const onSubmit = e => {
    e.preventDefault();
    onAdd({
      type: entity.type,
      id: entity.id,
      name: entity.displayName || entity.name,
      access
    });
    setEntity(null);
    setAccess('');
  };
  const accessOptions = [{
    value: ACCESS_VIEW_ONLY,
    label: i18n.t('View only')
  }, {
    value: ACCESS_VIEW_AND_EDIT,
    label: i18n.t('View and edit')
  }];
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, null, i18n.t('Give access to a user or group')), /*#__PURE__*/React.createElement("form", {
    onSubmit: onSubmit,
    className: _JSXStyle.dynamic([["2745695424", [colors.grey100, colors.grey900, spacers.dp8]]])
  }, /*#__PURE__*/React.createElement(SharingAutocomplete, {
    selected: (entity === null || entity === void 0 ? void 0 : entity.displayName) || (entity === null || entity === void 0 ? void 0 : entity.name),
    onSelection: setEntity
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2745695424", [colors.grey100, colors.grey900, spacers.dp8]]]) + " " + "select-wrapper"
  }, /*#__PURE__*/React.createElement(SingleSelectField, {
    label: i18n.t('Access level'),
    placeholder: i18n.t('Select a level'),
    disabled: offline,
    selected: access,
    helpText: offline ? i18n.t('Not available offline') : '',
    onChange: _ref2 => {
      let {
        selected
      } = _ref2;
      return setAccess(selected);
    }
  }, accessOptions.map(_ref3 => {
    let {
      value,
      label
    } = _ref3;
    return /*#__PURE__*/React.createElement(SingleSelectOption, {
      key: value,
      label: label,
      value: value,
      active: value === access
    });
  }))), /*#__PURE__*/React.createElement(Button, {
    type: "submit",
    disabled: offline || isFetching || !entity || !access
  }, i18n.t('Give access'))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2745695424",
    dynamic: [colors.grey100, colors.grey900, spacers.dp8]
  }, [`form.__jsx-style-dynamic-selector{background-color:${colors.grey100};color:${colors.grey900};margin-bottom:21px;padding:8px 12px;border-radius:5px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;gap:${spacers.dp8};}`, ".select-wrapper.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;}"]));
};
AccessAdd.propTypes = {
  onAdd: PropTypes.func.isRequired
};