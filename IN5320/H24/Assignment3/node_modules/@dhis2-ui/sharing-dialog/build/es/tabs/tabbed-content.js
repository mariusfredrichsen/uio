import { TabBar, Tab } from '@dhis2-ui/tab';
import PropTypes from 'prop-types';
import React, { useState } from 'react';
import { AccessAdd } from '../access-add/index.js';
import { AccessList } from '../access-list/index.js';
import { CascadeSharing } from '../cascade-sharing/index.js';
import { ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT, DIALOG_TYPES_LIST, DIALOG_TYPES } from '../constants.js';
import i18n from '../locales/index.js';
export const TabbedContent = _ref => {
  let {
    type,
    users,
    groups,
    publicAccess,
    allowPublicAccess,
    id,
    onAdd,
    onChange,
    onRemove
  } = _ref;
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  if (type === DIALOG_TYPES.DASHBOARD) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TabBar, null, /*#__PURE__*/React.createElement(Tab, {
      onClick: () => setActiveTabIndex(0),
      selected: activeTabIndex === 0
    }, i18n.t('Dashboard sharing')), /*#__PURE__*/React.createElement(Tab, {
      onClick: () => setActiveTabIndex(1),
      selected: activeTabIndex === 1
    }, i18n.t('Apply sharing to dashboard visualizations'))), /*#__PURE__*/React.createElement("div", null, activeTabIndex === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AccessAdd, {
      onAdd: onAdd
    }), /*#__PURE__*/React.createElement(AccessList, {
      users: users,
      groups: groups,
      publicAccess: publicAccess,
      allowPublicAccess: allowPublicAccess,
      onChange: onChange,
      onRemove: onRemove
    })), activeTabIndex === 1 && /*#__PURE__*/React.createElement(CascadeSharing, {
      id: id,
      entityAmount: users.length + groups.length
    })));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AccessAdd, {
    onAdd: onAdd
  }), /*#__PURE__*/React.createElement(AccessList, {
    users: users,
    groups: groups,
    publicAccess: publicAccess,
    allowPublicAccess: allowPublicAccess,
    onChange: onChange,
    onRemove: onRemove
  }));
};
TabbedContent.propTypes = {
  allowPublicAccess: PropTypes.bool.isRequired,
  groups: PropTypes.arrayOf(PropTypes.shape({
    access: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]).isRequired,
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired
  })).isRequired,
  id: PropTypes.string.isRequired,
  publicAccess: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]).isRequired,
  type: PropTypes.oneOf(DIALOG_TYPES_LIST).isRequired,
  users: PropTypes.arrayOf(PropTypes.shape({
    access: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]).isRequired,
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired
  })).isRequired,
  onAdd: PropTypes.func.isRequired,
  onChange: PropTypes.func.isRequired,
  onRemove: PropTypes.func.isRequired
};