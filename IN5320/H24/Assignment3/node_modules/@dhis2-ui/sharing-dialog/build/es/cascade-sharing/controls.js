import { useDataQuery, useDataEngine, useDhis2ConnectionStatus } from '@dhis2/app-runtime';
import { spacers } from '@dhis2/ui-constants';
import { Box } from '@dhis2-ui/box';
import { Button } from '@dhis2-ui/button';
import { NoticeBox } from '@dhis2-ui/notice-box';
import PropTypes from 'prop-types';
import React, { useState, useEffect } from 'react';
import i18n from '../locales/index.js';
import { ResultInfo } from './result-info.js';
import { UpdateInfo } from './update-info.js';
const query = {
  dashboard: {
    resource: 'dashboards',
    id: _ref => {
      let {
        id
      } = _ref;
      return id;
    },
    params: {
      fields: 'dashboardItems[type]'
    }
  }
};
export const Controls = _ref2 => {
  var _mutationResult$error;
  let {
    id,
    entityAmount
  } = _ref2;
  const {
    isDisconnected: offline
  } = useDhis2ConnectionStatus();
  const {
    data,
    refetch
  } = useDataQuery(query, {
    variables: {
      id
    }
  });
  useEffect(() => {
    refetch({
      id
    });
  }, [refetch, id]);

  /**
   * The useDataMutation hook does not allow for a variable id,
   * so we're using the engine directly as a workaround.
   */

  const engine = useDataEngine();
  const [called, setCalled] = useState(false);
  const [mutating, setMutating] = useState(false);
  const [error, setError] = useState(null);
  const [mutationResult, setMutationResult] = useState(null);
  const mutation = {
    resource: `dashboards/cascadeSharing/${id}`,
    type: 'create'
  };
  const mutate = () => {
    setCalled(true);
    setMutating(true);
    setMutationResult(null);
    setError(null);
    engine.mutate(mutation).then(data => {
      setMutationResult(data);
    }).catch(e => {
      setError(e.message || i18n.t('Something went wrong'));
    }).finally(() => {
      setMutating(false);
    });
  };
  const hasErrors = (mutationResult === null || mutationResult === void 0 ? void 0 : (_mutationResult$error = mutationResult.errorReports) === null || _mutationResult$error === void 0 ? void 0 : _mutationResult$error.length) > 0;
  const updatedItems = mutationResult === null || mutationResult === void 0 ? void 0 : mutationResult.countUpdatedDashboardItems;
  return /*#__PURE__*/React.createElement(React.Fragment, null, !called && /*#__PURE__*/React.createElement(UpdateInfo, {
    id: id,
    entityAmount: entityAmount
  }), error && /*#__PURE__*/React.createElement(Box, {
    marginTop: spacers.dp12
  }, /*#__PURE__*/React.createElement(NoticeBox, {
    error: true
  }, error)), data && mutationResult && /*#__PURE__*/React.createElement(Box, {
    marginTop: spacers.dp12
  }, /*#__PURE__*/React.createElement(ResultInfo, {
    hasErrors: hasErrors,
    updatedItems: updatedItems,
    dashboardItems: data.dashboard.dashboardItems,
    itemsCount: data.dashboard.itemsCount
  })), /*#__PURE__*/React.createElement(Box, {
    marginTop: spacers.dp12
  }, /*#__PURE__*/React.createElement(Button, {
    type: "button",
    disabled: offline || mutating || !entityAmount,
    loading: mutating,
    secondary: true,
    onClick: mutate
  }, i18n.t('Apply sharing to dashboard visualizations'))));
};
Controls.propTypes = {
  entityAmount: PropTypes.number.isRequired,
  id: PropTypes.string.isRequired
};