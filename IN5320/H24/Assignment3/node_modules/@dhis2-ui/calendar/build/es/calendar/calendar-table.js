import _JSXStyle from "styled-jsx/style";
import { spacers } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React from 'react';
import { CalendarTableCell } from './calendar-table-cell.js';
import { CalendarTableDaysHeader } from './calendar-table-days-header.js';
export const CalendarTable = _ref => {
  let {
    weekDayLabels,
    calendarWeekDays,
    width,
    cellSize,
    selectedDate
  } = _ref;
  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["452536960", [spacers.dp4, spacers.dp4]]]) + " " + "calendar-table-wrapper"
  }, /*#__PURE__*/React.createElement("table", {
    className: _JSXStyle.dynamic([["452536960", [spacers.dp4, spacers.dp4]]]) + " " + "calendar-table"
  }, /*#__PURE__*/React.createElement(CalendarTableDaysHeader, {
    weekDayLabels: weekDayLabels
  }), /*#__PURE__*/React.createElement("tbody", {
    className: _JSXStyle.dynamic([["452536960", [spacers.dp4, spacers.dp4]]])
  }, calendarWeekDays.map((week, weekIndex) => /*#__PURE__*/React.createElement("tr", {
    key: `week-${weekIndex + 1}`,
    className: _JSXStyle.dynamic([["452536960", [spacers.dp4, spacers.dp4]]])
  }, week.map(day => /*#__PURE__*/React.createElement(CalendarTableCell, {
    selectedDate: selectedDate,
    day: day,
    key: day === null || day === void 0 ? void 0 : day.calendarDate,
    cellSize: cellSize,
    width: width
  })))))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "452536960",
    dynamic: [spacers.dp4, spacers.dp4]
  }, [`.calendar-table.__jsx-style-dynamic-selector{border:none;border-collapse:collapse;width:100%;margin-block:${spacers.dp4};}`, ".calendar-table.__jsx-style-dynamic-selector tr.__jsx-style-dynamic-selector,.calendar-table.__jsx-style-dynamic-selector td.__jsx-style-dynamic-selector{border:none;}", `.calendar-table-wrapper.__jsx-style-dynamic-selector{padding-inline:${spacers.dp4};}`]));
};
CalendarTable.propTypes = {
  calendarWeekDays: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({
    calendarDate: PropTypes.string,
    isInCurrentMonth: PropTypes.bool,
    isSelected: PropTypes.bool,
    isToday: PropTypes.bool,
    label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    zdt: PropTypes.object,
    onClick: PropTypes.func
  }).isRequired).isRequired).isRequired,
  cellSize: PropTypes.string,
  selectedDate: PropTypes.string,
  weekDayLabels: PropTypes.arrayOf(PropTypes.string),
  width: PropTypes.string
};