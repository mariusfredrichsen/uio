import _JSXStyle from "styled-jsx/style";
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
export const CalendarTableCell = _ref => {
  let {
    day,
    cellSize,
    selectedDate
  } = _ref;
  const dayHoverBackgroundColor = colors.grey200;
  const selectedDayBackgroundColor = colors.teal700;
  return /*#__PURE__*/React.createElement("td", {
    "data-test": day === null || day === void 0 ? void 0 : day.calendarDate,
    onClick: day.onClick,
    className: _JSXStyle.dynamic([["2052411850", [cellSize, cellSize, cellSize, cellSize, colors.grey900, dayHoverBackgroundColor, colors.grey300, selectedDayBackgroundColor, colors.teal600, colors.teal200, colors.grey600]]])
  }, /*#__PURE__*/React.createElement("button", {
    name: "day",
    className: _JSXStyle.dynamic([["2052411850", [cellSize, cellSize, cellSize, cellSize, colors.grey900, dayHoverBackgroundColor, colors.grey300, selectedDayBackgroundColor, colors.teal600, colors.teal200, colors.grey600]]]) + " " + (cx('day', {
      isSelected: selectedDate === (day === null || day === void 0 ? void 0 : day.calendarDate),
      isToday: day.isToday,
      otherMonth: !day.isInCurrentMonth
    }) || "")
  }, day.label), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2052411850",
    dynamic: [cellSize, cellSize, cellSize, cellSize, colors.grey900, dayHoverBackgroundColor, colors.grey300, selectedDayBackgroundColor, colors.teal600, colors.teal200, colors.grey600]
  }, [`td.__jsx-style-dynamic-selector{width:${cellSize};height:100%;height:${cellSize};text-align:center;border:2px solid transparent;padding:0;}`, "td.__jsx-style-dynamic-selector span.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;padding:2px 2px;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border:2px solid transparent;min-width:16px;}", `button.__jsx-style-dynamic-selector{border:0;overflow:hidden;width:${cellSize};height:${cellSize};border:2px solid transparent;border-radius:3px;background:none;color:${colors.grey900};}`, `button.__jsx-style-dynamic-selector:hover{background-color:${dayHoverBackgroundColor};-webkit-text-decoration:underline;text-decoration:underline;cursor:pointer;}`, `button.__jsx-style-dynamic-selector:active{background-color:${colors.grey300};}`, `button.isSelected.__jsx-style-dynamic-selector,button.otherMonth.isSelected.__jsx-style-dynamic-selector{background-color:${selectedDayBackgroundColor};color:white;}`, "button.isToday.__jsx-style-dynamic-selector{position:relative;}", `button.isToday.__jsx-style-dynamic-selector::after{content:'';position:absolute;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);height:4px;width:4px;bottom:2px;left:50%;border-radius:100%;background-color:${colors.teal600};}`, `button.isSelected.isToday.__jsx-style-dynamic-selector::after{background-color:${colors.teal200};}`, `button.otherMonth.__jsx-style-dynamic-selector{color:${colors.grey600};}`]));
};
CalendarTableCell.propTypes = {
  cellSize: PropTypes.string,
  day: PropTypes.shape({
    calendarDate: PropTypes.string,
    isInCurrentMonth: PropTypes.bool,
    isSelected: PropTypes.bool,
    isToday: PropTypes.bool,
    label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    onClick: PropTypes.func
  }),
  selectedDate: PropTypes.string
};