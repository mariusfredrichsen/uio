"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldGroup = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _index = require("../field/index.js");
var _index2 = require("../field-set/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const FieldGroup = _ref => {
  let {
    children,
    className,
    disabled,
    helpText,
    validationText,
    label,
    name,
    required,
    dataTest = 'dhis2-uiwidgets-fieldsetfield',
    valid,
    error,
    warning
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_index2.FieldSet, {
    classname: className,
    dataTest: dataTest
  }, /*#__PURE__*/_react.default.createElement(_index.Field, {
    label: label,
    disabled: disabled,
    required: required,
    helpText: helpText,
    validationText: validationText,
    error: error,
    warning: warning,
    valid: valid,
    name: name
  }, children));
};
exports.FieldGroup = FieldGroup;
FieldGroup.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  /** Disables the form controls within */
  disabled: _propTypes.default.bool,
  /** Applies 'error' styling to validation text for feedback. Mutually exclusive with `warning` and `valid` props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  /** Useful instructions for the user */
  helpText: _propTypes.default.string,
  /** Labels the Field Group */
  label: _propTypes.default.string,
  /** Name associate with the Field Group. Passed in object as argument to event handlers */
  name: _propTypes.default.string,
  /** Adds an asterisk to indicate this field is required */
  required: _propTypes.default.bool,
  /** Applies 'valid' styling to validation text for feedback. Mutually exclusive with `warning` and `error` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,
  /** Adds text at the bottom of the field to provide validation feedback. Acquires styles from `valid`, `warning` and `error` statuses */
  validationText: _propTypes.default.string,
  /** Applies 'warning' styling to validation text for feedback. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType
};