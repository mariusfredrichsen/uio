"use strict";

var _layer = require("@dhis2-ui/layer");
var _popper = require("@dhis2-ui/popper");
var _react = require("@testing-library/react");
var _enzyme = require("enzyme");
var _react2 = _interopRequireDefault(require("react"));
var _testUtils = require("react-dom/test-utils");
var _modal = require("../../../../modal/src/modal/modal.js");
var _index = require("../../index.js");
var _dropdownButton = require("../dropdown-button.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('<DropdownButton>', () => {
  describe('controlled mode', () => {
    describe('open state', () => {
      const onClick = jest.fn();
      const Component = /*#__PURE__*/_react2.default.createElement(_dropdownButton.DropdownButton, {
        onClick: onClick,
        open: true,
        component: /*#__PURE__*/_react2.default.createElement("span", null, "test")
      });
      it('shows the Popper when open is true', async () => {
        // TODO: https://github.com/popperjs/react-popper/issues/350
        const wrapper = (0, _enzyme.mount)(Component);
        await (0, _testUtils.act)(async () => await null);
        const popper = wrapper.find(_popper.Popper);
        expect(popper).toHaveLength(1);
        expect(popper.find('span').text()).toEqual('test');
      });
      it('passes an "open" property to the callback payload with the next open state', async () => {
        // TODO: https://github.com/popperjs/react-popper/issues/350
        const wrapper = (0, _enzyme.mount)(Component);
        await (0, _testUtils.act)(async () => await null);
        wrapper.find(_layer.Layer).find('.backdrop').simulate('click');
        expect(onClick).toHaveBeenCalledTimes(1);
        const args = onClick.mock.calls[0];
        expect(args).toHaveLength(2);
        expect(args[0]).toEqual(expect.objectContaining({
          open: false
        }));
      });
      it('closes dropdown when escape key is pressed', async () => {
        const componentText = 'Dropdown Content';
        const {
          getByTestId,
          queryByText
        } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_dropdownButton.DropdownButton, {
          component: componentText
        }));
        const toggleButton = getByTestId('dhis2-uicore-dropdownbutton-toggle');
        _react.fireEvent.click(toggleButton);
        await (0, _react.waitFor)(() => {
          expect(queryByText(componentText)).toBeInTheDocument();
        });
        _react.fireEvent.keyDown(document, {
          key: 'Escape'
        });
        await (0, _react.waitFor)(() => {
          expect(queryByText(componentText)).not.toBeInTheDocument();
        });
      });
      test('modal remains open when dropdown button is closed on escape click', async () => {
        const dropdownButtonText = 'Dropdown Content';
        const headingText = 'Heading Text';
        const modalContent = /*#__PURE__*/_react2.default.createElement("div", null, /*#__PURE__*/_react2.default.createElement("h1", null, headingText), /*#__PURE__*/_react2.default.createElement(_dropdownButton.DropdownButton, {
          component: dropdownButtonText
        }));
        const {
          getByTestId,
          queryByText
        } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_modal.Modal, {
          hide: false,
          onClose: () => {}
        }, modalContent));
        const toggleButton = getByTestId('dhis2-uicore-dropdownbutton-toggle');
        _react.fireEvent.click(toggleButton);
        await (0, _react.waitFor)(() => {
          expect(queryByText(dropdownButtonText)).toBeInTheDocument();
        });
        _react.fireEvent.keyDown(document, {
          key: 'Escape'
        });
        await (0, _react.waitFor)(() => {
          expect(queryByText(dropdownButtonText)).not.toBeInTheDocument();
          expect(queryByText(headingText)).toBeInTheDocument();
        });
      });
    });
    describe('closed state', () => {
      const onClick = jest.fn();
      const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react2.default.createElement(_dropdownButton.DropdownButton, {
        onClick: onClick,
        open: false,
        component: /*#__PURE__*/_react2.default.createElement("span", null, "test")
      }));
      it('it does not show the Popper when open is false', () => {
        const popper = wrapper.find(_popper.Popper);
        expect(popper).toHaveLength(0);
      });
      it('passes an "open" property to the callback payload with the next open state (false)', () => {
        wrapper.find(_index.Button).simulate('click');
        expect(onClick).toHaveBeenCalledTimes(1);
        const args = onClick.mock.calls[0];
        expect(args).toHaveLength(2);
        expect(args[0]).toEqual(expect.objectContaining({
          open: true
        }));
      });
    });
  });
});