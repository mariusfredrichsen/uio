"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _uiConstants = require("@dhis2/ui-constants");
var _loader = require("@dhis2-ui/loader");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _buttonStyles = _interopRequireDefault(require("./button.styles.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const Button = _ref => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-button',
    destructive,
    disabled,
    icon,
    initialFocus,
    large,
    name,
    primary,
    secondary,
    small,
    tabIndex,
    toggled,
    type = 'button',
    value,
    onBlur,
    onClick,
    onFocus,
    onKeyDown,
    loading,
    ...otherProps
  } = _ref;
  const ref = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    if (initialFocus && ref.current) {
      ref.current.focus();
    }
  }, [initialFocus, ref.current]);
  const {
    'aria-label': ariaLabel,
    title
  } = otherProps;
  if (!children && !title && !ariaLabel) {
    console.debug('Button component has no children but is missing title and ariaLabel attribute.');
  }
  const handleClick = event => onClick && onClick({
    value,
    name
  }, event);
  const handleBlur = event => onBlur && onBlur({
    value,
    name
  }, event);
  const handleFocus = event => onFocus && onFocus({
    value,
    name
  }, event);
  const handleKeyDown = event => onKeyDown && onKeyDown({
    value,
    name
  }, event);
  const iconOnly = icon && !children;
  const buttonClassName = (0, _classnames.default)(className, {
    primary,
    secondary,
    destructive,
    small,
    large,
    'icon-only': iconOnly,
    toggled,
    loading: loading
  });
  return /*#__PURE__*/_react.default.createElement("button", _extends({
    ref: ref,
    name: name,
    "data-test": dataTest,
    disabled: disabled || loading,
    tabIndex: tabIndex,
    type: type,
    onBlur: handleBlur,
    onClick: handleClick,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown
  }, otherProps, {
    className: `jsx-${_buttonStyles.default.__hash}` + " " + (otherProps && otherProps.className != null && otherProps.className || buttonClassName || "")
  }), loading && /*#__PURE__*/_react.default.createElement("span", {
    className: `jsx-${_buttonStyles.default.__hash}` + " " + "loader"
  }, destructive || primary ? /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, {
    extrasmall: true,
    invert: true
  }) : /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, {
    extrasmall: true
  })), icon && /*#__PURE__*/_react.default.createElement("span", {
    className: `jsx-${_buttonStyles.default.__hash}` + " " + "button-icon"
  }, icon), children, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _buttonStyles.default.__hash
  }, _buttonStyles.default));
};
exports.Button = Button;
Button.propTypes = {
  /** Component to render inside the button */
  children: _propTypes.default.node,
  /** A className that will be passed to the `<button>` element */
  className: _propTypes.default.string,
  /**
   * A string that will be applied as a `data-test` attribute on the button element
   * for identification during testing
   */
  dataTest: _propTypes.default.string,
  /**
   * Applies 'destructive' button appearance, implying a dangerous action.
   */
  destructive: _propTypes.default.bool,
  /** Applies a greyed-out appearance and makes the button non-interactive  */
  disabled: _propTypes.default.bool,
  /** An icon element to display inside the button */
  icon: _propTypes.default.element,
  /** Use this variant to capture the initial focus on the page. */
  initialFocus: _propTypes.default.bool,
  /** Makes the button large. Mutually exclusive with `small` */
  large: _uiConstants.sharedPropTypes.sizePropType,
  /** Sets the button into a loading state */
  loading: _propTypes.default.bool,
  /**
   * Sets `name` attribute on button element.
   * Gets passed as part of the first argument to callbacks (see `onClick`).
   */
  name: _propTypes.default.string,
  /**
   * Applies 'primary' button appearance, implying the most important action.
   */
  primary: _propTypes.default.bool,
  /**
   * Applies 'secondary' button appearance.
   */
  secondary: _propTypes.default.bool,
  /** Makes the button small. Mutually exclusive with `large` prop */
  small: _uiConstants.sharedPropTypes.sizePropType,
  /** Tab index for focusing the button with a keyboard */
  tabIndex: _propTypes.default.string,
  /** Changes appearance of button to an on/off state */
  toggled: _propTypes.default.bool,
  /** Sets `type` attribute on `<button>` element */
  type: _propTypes.default.oneOf(['submit', 'reset', 'button']),
  /**
   * Value associated with the button.
   * Gets passed as part of the first argument to callbacks (see `onClick`).
   */
  value: _propTypes.default.string,
  /**
   * Callback to trigger on de-focus (blur).
   * Called with same args as `onClick`
   * */
  onBlur: _propTypes.default.func,
  /**
   * Callback to trigger on click.
   * Called with args `({ value, name }, event)`
   * */
  onClick: _propTypes.default.func,
  /** Callback to trigger on focus. Called with same args as `onClick` */
  onFocus: _propTypes.default.func,
  /** Callback to trigger on key-down. Called with same args as `onClick` */
  onKeyDown: _propTypes.default.func
};