"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SplitButton = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _uiConstants = require("@dhis2/ui-constants");
var _uiIcons = require("@dhis2/ui-icons");
var _layer = require("@dhis2-ui/layer");
var _popper = require("@dhis2-ui/popper");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _index = require("../button/index.js");
var _index2 = _interopRequireDefault(require("../locales/index.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const rightButton = {
  styles: /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2502148942"
  }, [`button.jsx-2502148942{padding:0 ${_uiConstants.spacers.dp12};}`]),
  className: "jsx-2502148942"
};
class SplitButton extends _react.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      open: false
    });
    _defineProperty(this, "anchorRef", /*#__PURE__*/_react.default.createRef());
    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === 'Escape' && this.state.open) {
        event.preventDefault();
        event.stopPropagation();
        this.setState({
          open: false
        });
        this.anchorRef.current && this.anchorRef.current.focus();
      }
    });
    _defineProperty(this, "onClick", (payload, event) => {
      if (this.props.onClick) {
        this.props.onClick({
          name: payload.name,
          value: payload.value,
          open: this.state.open
        }, event);
      }
    });
    _defineProperty(this, "onToggle", () => {
      this.setState(prevState => ({
        open: !prevState.open
      }));
    });
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown);
  }
  render() {
    const {
      open
    } = this.state;
    const {
      component,
      children,
      className,
      name,
      value,
      icon,
      small,
      large,
      primary,
      secondary,
      destructive,
      disabled,
      type,
      tabIndex,
      dataTest = 'dhis2-uicore-splitbutton',
      initialFocus
    } = this.props;
    const arrow = open ? /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronUp16, null) : /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronDown16, null);
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.anchorRef,
      "data-test": dataTest,
      className: "jsx-2116647326"
    }, /*#__PURE__*/_react.default.createElement(_index.Button, {
      name: name,
      value: value,
      icon: icon,
      small: small,
      large: large,
      primary: primary,
      secondary: secondary,
      destructive: destructive,
      disabled: disabled,
      onClick: this.onClick,
      type: type,
      tabIndex: tabIndex,
      className: (0, _classnames.default)(className),
      initialFocus: initialFocus,
      dataTest: `${dataTest}-button`
    }, children), /*#__PURE__*/_react.default.createElement(_index.Button, {
      name: name,
      value: value,
      small: small,
      large: large,
      primary: primary,
      secondary: secondary,
      destructive: destructive,
      disabled: disabled,
      onClick: this.onToggle,
      type: type,
      tabIndex: tabIndex,
      className: (0, _classnames.default)(className, rightButton.className),
      dataTest: `${dataTest}-toggle`,
      title: _index2.default.t('Toggle dropdown'),
      "aria-label": _index2.default.t('Toggle dropdown')
    }, arrow), open && /*#__PURE__*/_react.default.createElement(_layer.Layer, {
      onBackdropClick: this.onToggle,
      transparent: true
    }, /*#__PURE__*/_react.default.createElement(_popper.Popper, {
      dataTest: `${dataTest}-menu`,
      placement: "bottom-end",
      reference: this.anchorRef
    }, component)), rightButton.styles, /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "2116647326"
    }, ["div.jsx-2116647326{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;color:inherit;white-space:nowrap;position:relative;z-index:0;}", "div.jsx-2116647326>button:first-child{border-start-end-radius:0;border-end-end-radius:0;border-inline-end:0;}", "div.jsx-2116647326>button:last-child{border-start-start-radius:0;border-end-start-radius:0;}"]));
  }
}
exports.SplitButton = SplitButton;
_defineProperty(SplitButton, "defaultProps", {
  dataTest: 'dhis2-uicore-splitbutton'
});
SplitButton.propTypes = {
  children: _propTypes.default.string,
  className: _propTypes.default.string,
  /** Component to render when the dropdown is opened */
  component: _propTypes.default.element,
  dataTest: _propTypes.default.string,
  /**
   * Applies 'destructive' button appearance, implying a dangerous action.
   */
  destructive: _propTypes.default.bool,
  /** Disables the button and makes it uninteractive */
  disabled: _propTypes.default.bool,
  /** An icon to add inside the button */
  icon: _propTypes.default.element,
  /** Grants the button the initial focus */
  initialFocus: _propTypes.default.bool,
  /** Changes button size. Mutually exclusive with `small` prop */
  large: _uiConstants.sharedPropTypes.sizePropType,
  name: _propTypes.default.string,
  /**
   * Applies 'primary' button appearance, implying the most important action.
   */
  primary: _propTypes.default.bool,
  /**
   * Applies 'secondary' button appearance.
   */
  secondary: _propTypes.default.bool,
  /** Changes button size. Mutually exclusive with `large` prop */
  small: _uiConstants.sharedPropTypes.sizePropType,
  tabIndex: _propTypes.default.string,
  /** Type of button. Applied to html `button` element */
  type: _propTypes.default.oneOf(['submit', 'reset', 'button']),
  /** Value associated with the button. Passed in object to onClick handler */
  value: _propTypes.default.string,
  onClick: _propTypes.default.func
};