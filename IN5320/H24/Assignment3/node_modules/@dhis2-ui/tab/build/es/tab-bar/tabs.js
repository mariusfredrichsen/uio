import _JSXStyle from "styled-jsx/style";
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useRef, useMemo } from 'react';
const Tabs = _ref => {
  let {
    children,
    fixed,
    dataTest
  } = _ref;
  const tabContainer = useRef(null);
  const childrenRefs = useMemo(() => React.Children.map(children, () => /*#__PURE__*/React.createRef()), [children]);
  const handleKeyDown = event => {
    const currentFocus = document.activeElement;
    if (tabContainer.current && tabContainer.current === currentFocus) {
      if (childrenRefs.length > 0 && childrenRefs[0].current) {
        childrenRefs[0].current.focus();
      }
      return;
    }
    const currentIndex = childrenRefs.findIndex(ref => ref.current === currentFocus);
    if (currentIndex === -1) {
      return;
    }
    if (event.key === 'ArrowRight') {
      event.preventDefault();
      const nextIndex = (currentIndex + 1) % childrenRefs.length;
      childrenRefs[nextIndex].current.focus();
    }
    if (event.key === 'ArrowLeft') {
      event.preventDefault();
      const prevIndex = (currentIndex - 1 + childrenRefs.length) % childrenRefs.length;
      childrenRefs[prevIndex].current.focus();
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    ref: tabContainer,
    "data-test": dataTest,
    role: "tablist",
    tabIndex: 0,
    onKeyDown: handleKeyDown,
    className: _JSXStyle.dynamic([["771129571", [colors.grey400, colors.white]]]) + " " + (cx({
      fixed
    }) || "")
  }, React.Children.map(children, (child, index) => {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.cloneElement(child, {
        ref: childrenRefs[index]
      });
    }
    // Wrap non-element children e.g string in a <span>
    return /*#__PURE__*/React.createElement("span", {
      ref: childrenRefs[index],
      tabIndex: -1,
      className: _JSXStyle.dynamic([["771129571", [colors.grey400, colors.white]]])
    }, child);
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "771129571",
    dynamic: [colors.grey400, colors.white]
  }, [`div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;position:relative;overflow:hidden;box-shadow:inset 0 -1px 0 0 ${colors.grey400};-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;background:${colors.white};}`]));
};
Tabs.propTypes = {
  dataTest: PropTypes.string.isRequired,
  children: PropTypes.node,
  fixed: PropTypes.bool
};
export { Tabs };