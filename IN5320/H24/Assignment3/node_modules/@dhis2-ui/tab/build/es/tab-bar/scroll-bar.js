import _JSXStyle from "styled-jsx/style";
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { IconChevronRight16, IconChevronLeft16 } from '@dhis2/ui-icons';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Component, createRef } from 'react';
import { animatedSideScroll } from './animated-side-scroll.js';
import { detectHorizontalScrollbarHeight } from './detect-horizontal-scrollbar-height.js';
import { ScrollButton } from './scroll-button.js';
class ScrollBar extends Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "scrollBox", /*#__PURE__*/createRef());
    _defineProperty(this, "scrollArea", /*#__PURE__*/createRef());
    _defineProperty(this, "horizontalScrollBarHeight", detectHorizontalScrollbarHeight());
    _defineProperty(this, "scrollBoxResizeObserver", null);
    _defineProperty(this, "calculateShouldHideButtons", () => {
      this.setState({
        hideScrollButtonsInitialized: false
      });
      const {
        current: scrollBox
      } = this.scrollBox;
      const {
        current: scrollArea
      } = this.scrollArea;
      const areaWidth = scrollArea.offsetWidth;
      const boxWidth = scrollBox.offsetWidth;
      const hideScrollButtons = areaWidth <= boxWidth;
      this.setState({
        hideScrollButtons
      });
      if (!hideScrollButtons) {
        if (this.state.scrolledToStart) {
          this.scrollLeft();
        }
        if (this.state.scrolledToEnd) {
          this.scrollRight();
        }
      }
      this.setState({
        hideScrollButtonsInitialized: true
      });
    });
    _defineProperty(this, "scrollRight", () => this.scroll());
    _defineProperty(this, "scrollLeft", () => this.scroll(true));
    _defineProperty(this, "animatedScrollCallback", () => {
      this.updateScrolledToStates();
      this.attachSideScrollListener();
    });
    _defineProperty(this, "updateScrolledToStates", () => {
      const {
        scrollLeft,
        offsetWidth
      } = this.scrollBox.current;
      const {
        offsetWidth: areaOffsetWidth
      } = this.scrollArea.current;
      const scrolledToStart = scrollLeft <= 0;
      const scrolledToEnd = scrollLeft + offsetWidth >= areaOffsetWidth;
      if (this.state.scrolledToStart !== scrolledToStart || this.state.scrolledToEnd !== scrolledToEnd) {
        this.setState({
          scrolledToStart,
          scrolledToEnd
        });
      }
    });
    this.state = {
      scrolledToStart: true,
      scrolledToEnd: false,
      // used to initially hide the entire content to prevent flickering
      hideScrollButtonsInitialized: false,
      // hide buttons initially to simplify calculations
      hideScrollButtons: false
    };
    this.scrollBoxResizeObserver = new ResizeObserver(this.calculateShouldHideButtons);
  }
  componentDidMount() {
    this.scrollSelectedTabIntoView();
    this.attachSideScrollListener();
    this.manageShouldHideButtons();
  }
  componentWillUnmount() {
    this.removeSideScrollListener();
    this.scrollBoxResizeObserver.disconnect();
  }
  manageShouldHideButtons() {
    const {
      current: scrollBox
    } = this.scrollBox;
    this.scrollBoxResizeObserver.observe(scrollBox);
    this.calculateShouldHideButtons();
  }
  scroll(goBackwards) {
    this.removeSideScrollListener();
    animatedSideScroll(this.scrollBox.current, this.animatedScrollCallback, goBackwards);
  }
  scrollSelectedTabIntoView() {
    const scrollBoxEl = this.scrollBox.current;
    const tab = scrollBoxEl.querySelector('.tab.selected');
    if (tab) {
      const tabEnd = tab.offsetLeft + tab.offsetWidth;
      if (tabEnd > scrollBoxEl.offsetWidth) {
        scrollBoxEl.scrollLeft = tabEnd - scrollBoxEl.offsetWidth;
      }
    }
  }
  attachSideScrollListener() {
    this.scrollBox.current.addEventListener('scroll', this.updateScrolledToStates);
  }
  removeSideScrollListener() {
    this.scrollBox.current.removeEventListener('scroll', this.updateScrolledToStates);
  }
  render() {
    const {
      scrolledToStart,
      scrolledToEnd,
      hideScrollButtonsInitialized,
      hideScrollButtons: hideScrollButtonsState
    } = this.state;
    const {
      children,
      className,
      dataTest
    } = this.props;
    const hideScrollButtons = !hideScrollButtonsInitialized || hideScrollButtonsState;
    return /*#__PURE__*/React.createElement("div", {
      "data-test": dataTest,
      className: "jsx-191575146 " + _JSXStyle.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + (cx('scroll-bar', className) || "")
    }, /*#__PURE__*/React.createElement(ScrollButton, {
      disabled: scrolledToStart,
      onClick: this.scrollLeft,
      hidden: hideScrollButtons
    }, /*#__PURE__*/React.createElement(IconChevronLeft16, null)), /*#__PURE__*/React.createElement("div", {
      className: "jsx-191575146 " + _JSXStyle.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + "scroll-box-clipper"
    }, /*#__PURE__*/React.createElement("div", {
      ref: this.scrollBox,
      className: "jsx-191575146 " + _JSXStyle.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + "scroll-box"
    }, /*#__PURE__*/React.createElement("div", {
      ref: this.scrollArea,
      className: "jsx-191575146 " + _JSXStyle.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + "scroll-area"
    }, children))), /*#__PURE__*/React.createElement(ScrollButton, {
      disabled: scrolledToEnd,
      onClick: this.scrollRight,
      hidden: hideScrollButtons
    }, /*#__PURE__*/React.createElement(IconChevronRight16, null)), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "4174900658",
      dynamic: [-this.horizontalScrollBarHeight]
    }, [`.scroll-box.__jsx-style-dynamic-selector{margin-bottom:${-this.horizontalScrollBarHeight}px;}`]), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "191575146"
    }, [".scroll-bar.jsx-191575146{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}", ".scroll-box-clipper.jsx-191575146{overflow-y:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".scroll-box.jsx-191575146{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;overflow-x:scroll;-webkit-overflow-scrolling:touch;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".scroll-box.jsx-191575146::-webkit-scrollbar{display:none;}", ".scroll-area.jsx-191575146{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;overflow-x:hidden;}"]));
  }
}
ScrollBar.propTypes = {
  children: PropTypes.node.isRequired,
  dataTest: PropTypes.string.isRequired,
  className: PropTypes.string
};
export { ScrollBar };