import _JSXStyle from "styled-jsx/style";
import { colors, theme } from '@dhis2/ui-constants';
import { Tooltip } from '@dhis2-ui/tooltip';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useState, useEffect, useRef } from 'react';
export const Tab = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
    icon,
    onClick,
    selected,
    disabled,
    children,
    className,
    dataTest = 'dhis2-uicore-tab'
  } = _ref;
  let tabRef = useRef(null);
  if (ref) {
    tabRef = ref;
  }
  const [isOverflowing, setIsOverflowing] = useState(false);
  useEffect(() => {
    const checkOverflow = () => {
      const isOverflow = tabRef.current.scrollWidth > tabRef.current.clientWidth;
      setIsOverflowing(isOverflow);
    };
    checkOverflow();
  }, []);
  return /*#__PURE__*/React.createElement("button", {
    onClick: disabled ? undefined : event => onClick({}, event),
    "data-test": dataTest,
    ref: tabRef,
    role: "tab",
    "aria-selected": selected ? 'true' : 'false',
    "aria-disabled": disabled ? 'true' : 'false',
    onFocus: disabled ? undefined : event => onClick({}, event),
    tabIndex: -1,
    className: _JSXStyle.dynamic([["2433456263", [colors.grey400, colors.grey600, theme.focus, colors.grey600, colors.grey900, colors.grey600, colors.grey800, theme.primary800, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]]]) + " " + `${cx('tab', className, {
      selected,
      disabled
    })}`
  }, icon, isOverflowing ? /*#__PURE__*/React.createElement(Tooltip, {
    content: children,
    maxWidth: '100%'
  }, /*#__PURE__*/React.createElement("span", {
    ref: tabRef,
    className: _JSXStyle.dynamic([["2433456263", [colors.grey400, colors.grey600, theme.focus, colors.grey600, colors.grey900, colors.grey600, colors.grey800, theme.primary800, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]]])
  }, children)) : /*#__PURE__*/React.createElement("span", {
    ref: tabRef,
    className: _JSXStyle.dynamic([["2433456263", [colors.grey400, colors.grey600, theme.focus, colors.grey600, colors.grey900, colors.grey600, colors.grey800, theme.primary800, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]]])
  }, children), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2433456263",
    dynamic: [colors.grey400, colors.grey600, theme.focus, colors.grey600, colors.grey900, colors.grey600, colors.grey800, theme.primary800, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]
  }, [`button.__jsx-style-dynamic-selector{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;vertical-align:bottom;height:100%;padding:16px 16px 11px;background-color:transparent;outline:none;border:none;border-bottom:1px solid ${colors.grey400};color:${colors.grey600};font-size:14px;line-height:20px;cursor:pointer;}`, ".fixed>button.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", "button.__jsx-style-dynamic-selector::after{content:' ';display:block;position:absolute;bottom:-1px;inset-inline-start:0;height:4px;width:100%;background-color:transparent;}", "span.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;max-width:320px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-webkit-transition:fill 150ms ease-in-out;transition:fill 150ms ease-in-out;}", `button.__jsx-style-dynamic-selector:focus{outline:3px solid ${theme.focus};outline-offset:-3px;}`, "button.__jsx-style-dynamic-selector:focus.__jsx-style-dynamic-selector:not(:focus-visible){outline:none;}", `button.__jsx-style-dynamic-selector>svg{fill:${colors.grey600};width:14px;height:14px;margin:0 4px 0 0;}`, `button.__jsx-style-dynamic-selector:hover{color:${colors.grey900};}`, `button.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector::after{background-color:${colors.grey600};height:2px;}`, `button.__jsx-style-dynamic-selector:active.__jsx-style-dynamic-selector::after{background-color:${colors.grey800};}`, `button.selected.__jsx-style-dynamic-selector{color:${theme.primary800};}`, `button.selected.__jsx-style-dynamic-selector::after{background-color:${theme.primary700};-webkit-transition:background-color 150ms ease-in-out;transition:background-color 150ms ease-in-out;}`, `button.selected.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector::after{background-color:${theme.primary700};height:4px;}`, `button.selected.__jsx-style-dynamic-selector>svg{fill:${theme.primary700};}`, `button.disabled.__jsx-style-dynamic-selector{color:${colors.grey500};cursor:not-allowed;}`, "button.disabled.__jsx-style-dynamic-selector:hover,button.selected.__jsx-style-dynamic-selector:hover{background-color:transparent;}", `button.disabled.__jsx-style-dynamic-selector>svg{fill:${colors.grey500};}`]));
});
Tab.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,
  icon: PropTypes.element,
  /** Indicates this tab is selected */
  selected: PropTypes.bool,
  /** Called with the signature `({}, event)` */
  onClick: PropTypes.func
};
Tab.displayName = 'Tab';