import _JSXStyle from "styled-jsx/style";
import { OrganisationUnitTree } from '@dhis2-ui/organisation-unit-tree';
import React from 'react';
import { SelectorBar, SelectorBarItem } from '../../index.js';
import { MenuSelect, createDecoratorCustomDataProvider, createStatefulDecorator, dataSets, decoratorCommonStyles, workflows } from './common.js';
export const WithMultipleRows = (_, _ref) => {
  let {
    workflow,
    setWorkflow,
    workflowOpen,
    setWorkflowOpen,
    dataSet,
    setDataSet,
    dataSetOpen,
    setDataSetOpen,
    orgUnit,
    setOrgUnit,
    orgUnitOpen,
    setOrgUnitOpen
  } = _ref;
  return /*#__PURE__*/React.createElement("div", {
    className: "jsx-3203152640" + " " + "narrow-container"
  }, /*#__PURE__*/React.createElement(SelectorBar, {
    disableClearSelections: true,
    onClearSelectionClick: () => null
  }, /*#__PURE__*/React.createElement(SelectorBarItem, {
    disabled: false,
    label: "Workflow",
    value: workflow === null || workflow === void 0 ? void 0 : workflow.label,
    noValueMessage: "Choose a workflow",
    open: workflowOpen,
    setOpen: setWorkflowOpen
  }, /*#__PURE__*/React.createElement(MenuSelect, {
    values: workflows,
    selected: workflow === null || workflow === void 0 ? void 0 : workflow.value,
    onChange: _ref2 => {
      let {
        selected
      } = _ref2;
      setWorkflow(workflows.find(currentWorkflow => selected === currentWorkflow.value));
      setWorkflowOpen(false);
    }
  })), /*#__PURE__*/React.createElement(SelectorBarItem, {
    disabled: !workflow,
    label: "Data set",
    value: dataSet === null || dataSet === void 0 ? void 0 : dataSet.label,
    noValueMessage: "Choose a data set",
    open: dataSetOpen,
    setOpen: setDataSetOpen
  }, /*#__PURE__*/React.createElement(MenuSelect, {
    values: dataSets,
    selected: dataSet === null || dataSet === void 0 ? void 0 : dataSet.value,
    onChange: _ref3 => {
      let {
        selected
      } = _ref3;
      setDataSet(dataSets.find(currentWorkflow => selected === currentWorkflow.value));
      setDataSetOpen(false);
    }
  })), /*#__PURE__*/React.createElement(SelectorBarItem, {
    disabled: !workflow && !dataSet,
    label: "Org unit",
    value: orgUnit === null || orgUnit === void 0 ? void 0 : orgUnit.displayName,
    noValueMessage: "Choose an organisation unit",
    open: orgUnitOpen,
    setOpen: setOrgUnitOpen
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      width: 400,
      minHeight: 400,
      maxHeight: '70vh'
    },
    className: "jsx-3203152640"
  }, /*#__PURE__*/React.createElement(OrganisationUnitTree, {
    singleSelection: true,
    onChange: (nextOrgUnit, evt) => {
      evt.stopPropagation();
      setOrgUnit(nextOrgUnit);
      setOrgUnitOpen(false);
    },
    roots: ['A0000000000'],
    selected: orgUnit ? [orgUnit.path] : []
  })))), /*#__PURE__*/React.createElement("p", {
    style: {
      padding: '0 16px',
      textAlign: 'center'
    },
    className: "jsx-3203152640"
  }, "This story shows the selection bar component with multiple rows when a workflow has been selected."), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3203152640"
  }, [".narrow-container.jsx-3203152640{margin:0 auto;width:100%;max-width:600px;}"]));
};
WithMultipleRows.decorators = [decoratorCommonStyles, createStatefulDecorator({
  workflow: workflows[0]
}), createDecoratorCustomDataProvider()];