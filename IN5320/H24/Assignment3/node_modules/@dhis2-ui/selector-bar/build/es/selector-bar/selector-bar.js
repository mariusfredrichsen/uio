import _JSXStyle from "styled-jsx/style";
import { colors, spacers } from '@dhis2/ui-constants';
import { Button } from '@dhis2-ui/button';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useRef, useState, useEffect } from 'react';
import i18n from '../locales/index.js';
const ClearSelection = _ref => {
  let {
    disabled,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3676026375", [spacers.dp8]]]) + " " + "clear-selections"
  }, /*#__PURE__*/React.createElement(Button, {
    small: true,
    secondary: true,
    disabled: disabled,
    onClick: onClick
  }, i18n.t('Clear selections')), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3676026375",
    dynamic: [spacers.dp8]
  }, [`.clear-selections.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:40px;padding:0 ${spacers.dp8};}`]));
};
ClearSelection.propTypes = {
  disabled: PropTypes.bool,
  onClick: PropTypes.func
};
export const SelectorBar = _ref2 => {
  let {
    className,
    children,
    onClearSelectionClick,
    dataTest = 'dhis2-ui-selectorbar',
    disableClearSelections,
    additionalContent,
    ariaLabel
  } = _ref2;
  const container = useRef(null);
  const [childrenToFocus, setChildrenToFocus] = useState([]);
  useEffect(() => {
    if (container.current) {
      const controlsDiv = container.current.querySelector('.controls');
      if (controlsDiv) {
        const childElements = Array.from(controlsDiv.children);
        childElements.forEach(child => {
          child.tabIndex = -1;
        });
        setChildrenToFocus(childElements);
      }
    }
  }, [children]);
  const handleKeyDown = event => {
    const currentFocus = document.activeElement;
    if (container.current && container.current === currentFocus) {
      if (childrenToFocus.length > 0 && childrenToFocus[0]) {
        childrenToFocus[0].focus();
      }
      return;
    }
    if (!childrenToFocus.length) {
      return;
    }
    const currentIndex = childrenToFocus.findIndex(element => element === currentFocus);
    if (currentIndex === -1) {
      return;
    }
    if (event.key === 'ArrowRight') {
      event.preventDefault();
      const nextIndex = (currentIndex + 1) % childrenToFocus.length;
      childrenToFocus[nextIndex].focus();
    }
    if (event.key === 'ArrowLeft') {
      event.preventDefault();
      const prevIndex = (currentIndex - 1 + childrenToFocus.length) % childrenToFocus.length;
      childrenToFocus[prevIndex].focus();
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    onKeyDown: handleKeyDown,
    tabIndex: 0,
    ref: container,
    role: "toolbar",
    "aria-label": ariaLabel,
    className: _JSXStyle.dynamic([["2030607490", [colors.white, colors.grey400,
    /*
     * Specs define the space to be 12px.
     * 8px already come from the clear selection component
     */
    '']]]) + " " + (cx('container', {
      withRHSContents: additionalContent
    }, className) || "")
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2030607490", [colors.white, colors.grey400, '']]]) + " " + "controls"
  }, children, onClearSelectionClick && /*#__PURE__*/React.createElement(ClearSelection, {
    disabled: disableClearSelections,
    onClick: onClearSelectionClick
  })), additionalContent && /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2030607490", [colors.white, colors.grey400, '']]]) + " " + "additional-contents"
  }, additionalContent), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2030607490",
    dynamic: [colors.white, colors.grey400, '']
  }, [`.container.__jsx-style-dynamic-selector{background:${colors.white};box-shadow:inset 0 -1px 0 0 ${colors.grey400};padding-bottom:1px;}`, ".withRHSContents.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".controls.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;gap:1px;}", `.additional-contents.__jsx-style-dynamic-selector{${''} padding-inline-start:4px;}`])));
};
SelectorBar.propTypes = {
  children: PropTypes.any.isRequired,
  additionalContent: PropTypes.any,
  ariaLabel: PropTypes.string,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disableClearSelections: PropTypes.bool,
  onClearSelectionClick: PropTypes.func
};