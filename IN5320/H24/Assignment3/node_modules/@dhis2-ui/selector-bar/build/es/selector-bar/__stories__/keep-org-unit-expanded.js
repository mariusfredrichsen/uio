import { OrganisationUnitTree } from '@dhis2-ui/organisation-unit-tree';
import React, { useState } from 'react';
import { SelectorBar, SelectorBarItem } from '../../index.js';
import { createStatefulDecorator, decoratorCommonStyles, createDecoratorCustomDataProvider } from './common.js';
export const KeepOrgUnitExpanded = (_, _ref) => {
  let {
    orgUnit,
    setOrgUnit,
    orgUnitOpen,
    setOrgUnitOpen
  } = _ref;
  const [expanded, setExpanded] = useState([]);
  const handleExpand = _ref2 => {
    let {
      path
    } = _ref2;
    return setExpanded([...expanded, path]);
  };
  const handleCollapse = _ref3 => {
    let {
      path
    } = _ref3;
    return setExpanded(expanded.filter(p => p !== path));
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SelectorBar, {
    disableClearSelections: !orgUnit,
    onClearSelectionClick: () => setOrgUnit(null)
  }, /*#__PURE__*/React.createElement(SelectorBarItem, {
    label: "Org unit",
    value: orgUnit === null || orgUnit === void 0 ? void 0 : orgUnit.displayName,
    noValueMessage: "Choose an organisation unit",
    open: orgUnitOpen,
    setOpen: setOrgUnitOpen,
    onClearSelectionClick: () => {
      setOrgUnit(null);
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      width: 400,
      minHeight: 400,
      maxHeight: '70vh'
    }
  }, /*#__PURE__*/React.createElement(OrganisationUnitTree, {
    singleSelection: true,
    roots: ['A0000000000'],
    selected: orgUnit ? [orgUnit.path] : [],
    onChange: (nextOrgUnit, evt) => {
      evt.stopPropagation();
      setOrgUnit(nextOrgUnit);
      setOrgUnitOpen(false);
    },
    expanded: expanded,
    handleExpand: handleExpand,
    handleCollapse: handleCollapse
  })))), /*#__PURE__*/React.createElement("p", {
    style: {
      padding: '0 16px'
    }
  }, "This story illustrates how to keep states between mount/unmount cycles of the component rendered inside the selector bar icon"));
};
KeepOrgUnitExpanded.decorators = [decoratorCommonStyles, createStatefulDecorator(), createDecoratorCustomDataProvider()];