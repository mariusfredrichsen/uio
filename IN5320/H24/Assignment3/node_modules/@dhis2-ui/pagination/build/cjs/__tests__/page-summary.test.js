"use strict";

var _enzyme = require("enzyme");
var _react = _interopRequireDefault(require("react"));
var _getDefaultPageSummaryText = require("../get-default-page-summary-text.js");
var _pageSummary = require("../page-summary.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
describe('<PageSummary />', () => {
  const props = {
    dataTest: 'test',
    pageSummaryText: _getDefaultPageSummaryText.getDefaultPageSummaryText
  };
  it('renders without errors', () => {
    (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: 100,
      page: 2,
      pageCount: 5,
      total: 224
    })));
  });
  it('renders the correct message when both total and lastItem are provided', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: 100,
      page: 2,
      pageCount: 5,
      total: 224
    })));
    const expectedString = 'Page 2 of 5, items 51-100 of 224';
    expect(wrapper.find('span').text()).toBe(expectedString);
  });
  it('renders the correct message when only lastItem is provided', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: 100,
      page: 2,
      pageCount: 5
    })));
    const expectedString = 'Page 2, items 51-100';
    expect(wrapper.find('span').text()).toBe(expectedString);
  });
  it('renders the correct message when total is missing and lastItem is not a number', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: NaN,
      page: 2,
      pageCount: 5
    })));
    const expectedString = 'Page 2';
    expect(wrapper.find('span').text()).toBe(expectedString);
  });
});