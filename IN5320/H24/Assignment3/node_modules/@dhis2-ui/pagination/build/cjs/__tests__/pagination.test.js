"use strict";

require("@testing-library/dom");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
var mockPagers = _interopRequireWildcard(require("../__fixtures__/index.js"));
var _pagination = require("../pagination.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
describe('<Pagination />', () => {
  describe('Pagination with total and totalPages', () => {
    const props = {
      ...mockPagers.atTenthPage,
      onPageChange: () => {},
      onPageSizeChange: () => {}
    };
    it('renders without errors', () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, props));
    });
    it('renders a PageSelect and PageSizeSelect by default', () => {
      const {
        getByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, props));
      expect(getByTestId('dhis2-uiwidgets-pagination-page-select')).toBeInTheDocument();
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize')).toBeInTheDocument();
    });
    it('renders without a PageSelect when hidePageSelect is true', () => {
      const {
        getByTestId,
        queryByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        hidePageSelect: true
      })));
      expect(queryByTestId('dhis2-uiwidgets-pagination-page-select')).not.toBeInTheDocument();
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize')).toBeInTheDocument();
    });
    it('renders without a PageSelect when pageCount is not provided', () => {
      const {
        getByTestId,
        queryByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        pageCount: undefined
      })));
      expect(queryByTestId('dhis2-uiwidgets-pagination-page-select')).not.toBeInTheDocument();
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize')).toBeInTheDocument();
    });
    it('renders without a PageSelect when pageCount is 1', () => {
      const {
        getByTestId,
        queryByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        pageCount: 1
      })));
      expect(queryByTestId('dhis2-uiwidgets-pagination-page-select')).not.toBeInTheDocument();
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize')).toBeInTheDocument();
    });
    it('renders without a PageSelect when pageCount is over 2000', () => {
      const {
        getByTestId,
        queryByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        pageCount: 2001
      })));
      expect(queryByTestId('dhis2-uiwidgets-pagination-page-select')).not.toBeInTheDocument();
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize')).toBeInTheDocument();
    });
    it('renders without a PageSizeSelect when hidePageSizeSelect is true', () => {
      const {
        getByTestId,
        queryByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        hidePageSizeSelect: true
      })));
      expect(queryByTestId('dhis2-uiwidgets-pagination-pagesize')).not.toBeInTheDocument();
      expect(getByTestId('dhis2-uiwidgets-pagination-page-select')).toBeInTheDocument();
    });
    it('renders without PageSelect and PageSizeSelect when both are true', () => {
      const {
        queryByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        hidePageSelect: true,
        hidePageSizeSelect: true
      })));
      expect(queryByTestId('dhis2-uiwidgets-pagination-pagesize')).not.toBeInTheDocument();
      expect(queryByTestId('dhis2-uiwidgets-pagination-page-select')).not.toBeInTheDocument();
    });
    it('enables all elements when disabled is falsy', () => {
      const {
        getByTestId,
        getByRole
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, props));
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize').querySelector('.select .root')).not.toHaveClass('disabled');
      expect(getByTestId('dhis2-uiwidgets-pagination-summary').querySelector('span')).not.toHaveClass('inactive');
      expect(getByTestId('dhis2-uiwidgets-pagination-page-select').querySelector('.select .root')).not.toHaveClass('disabled');
      expect(getByRole('button', {
        name: 'Previous'
      })).not.toBeDisabled();
      expect(getByRole('button', {
        name: 'Next'
      })).not.toBeDisabled();
    });
    it('disables all elements when disabled is true', () => {
      const {
        getByTestId,
        getByRole
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, {
        disabled: true
      })));
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize').querySelector('.select .root')).toHaveClass('disabled');
      expect(getByTestId('dhis2-uiwidgets-pagination-summary').querySelector('span')).toHaveClass('inactive');
      expect(getByTestId('dhis2-uiwidgets-pagination-page-select').querySelector('.select .root')).toHaveClass('disabled');
      expect(getByRole('button', {
        name: 'Previous'
      })).toBeDisabled();
      expect(getByRole('button', {
        name: 'Next'
      })).toBeDisabled();
    });
    it('disables previous button when on the first page', () => {
      const {
        getByRole
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, mockPagers.atFirstPage, {
        onPageChange: () => {},
        onPageSizeChange: () => {}
      })));
      expect(getByRole('button', {
        name: 'Previous'
      })).toBeDisabled();
      expect(getByRole('button', {
        name: 'Next'
      })).not.toBeDisabled();
    });
    it('disables next button when on the last page', () => {
      const {
        getByRole
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, mockPagers.atLastPage, {
        onPageChange: () => {},
        onPageSizeChange: () => {}
      })));
      expect(getByRole('button', {
        name: 'Previous'
      })).not.toBeDisabled();
      expect(getByRole('button', {
        name: 'Next'
      })).toBeDisabled();
    });
  });
  describe('Pagination without total and totalPages', () => {
    const props = {
      ...mockPagers.noTotal,
      pageLength: mockPagers.noTotal.pageSize,
      onPageChange: () => {},
      onPageSizeChange: () => {}
    };
    it('renders without errors', () => {
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, props));
    });
    it('renders with a PageSizeSelect but without a PageSelect', () => {
      const {
        queryByTestId,
        getByTestId
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, props));
      expect(getByTestId('dhis2-uiwidgets-pagination-pagesize')).toBeInTheDocument();
      expect(queryByTestId('dhis2-uiwidgets-pagination-page-select')).not.toBeInTheDocument();
    });
    it('prevents forward navigation when on the last page', () => {
      const {
        getByRole
      } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_pagination.Pagination, _extends({}, props, mockPagers.noTotalAtLastPage)));
      expect(getByRole('button', {
        name: 'Previous'
      })).not.toBeDisabled();
      expect(getByRole('button', {
        name: 'Next'
      })).toBeDisabled();
    });
  });
});