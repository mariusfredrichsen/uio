function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { shallow } from 'enzyme';
import React from 'react';
import { getDefaultPageSummaryText } from '../get-default-page-summary-text.js';
import { PageSummary } from '../page-summary.js';
describe('<PageSummary />', () => {
  const props = {
    dataTest: 'test',
    pageSummaryText: getDefaultPageSummaryText
  };
  it('renders without errors', () => {
    shallow( /*#__PURE__*/React.createElement(PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: 100,
      page: 2,
      pageCount: 5,
      total: 224
    })));
  });
  it('renders the correct message when both total and lastItem are provided', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: 100,
      page: 2,
      pageCount: 5,
      total: 224
    })));
    const expectedString = 'Page 2 of 5, items 51-100 of 224';
    expect(wrapper.find('span').text()).toBe(expectedString);
  });
  it('renders the correct message when only lastItem is provided', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: 100,
      page: 2,
      pageCount: 5
    })));
    const expectedString = 'Page 2, items 51-100';
    expect(wrapper.find('span').text()).toBe(expectedString);
  });
  it('renders the correct message when total is missing and lastItem is not a number', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageSummary, _extends({}, props, {
      firstItem: 51,
      lastItem: NaN,
      page: 2,
      pageCount: 5
    })));
    const expectedString = 'Page 2';
    expect(wrapper.find('span').text()).toBe(expectedString);
  });
});