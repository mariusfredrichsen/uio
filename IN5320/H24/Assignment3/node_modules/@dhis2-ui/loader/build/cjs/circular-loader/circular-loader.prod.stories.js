"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Small = exports.Large = exports.ExtraSmall = exports.Default = void 0;
var _uiConstants = require("@dhis2/ui-constants");
var _react = _interopRequireDefault(require("react"));
var _index = require("./index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const subtitle = `Used to inform the user that an element or page is in a loading state`;
const description = `
Use loading indicators whenever a component or application takes longer than 700ms to load. After this time a loader should be displayed so that the user can understand what is happening: loading is in progress. Consider that without a loading indicator a user would be unsure of their current status, so they are important UI elements.

A circular loader is used when the loading time is uncertain and cannot be displayed as a percentage. A circular loader can spin many times, and each spin does not represent any amount of completion.

\`\`\`js
import { CircularLoader } from '@dhis2/ui'
\`\`\`
`;
var _default = exports.default = {
  title: 'Circular Loader',
  component: _index.CircularLoader,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    small: {
      ..._uiConstants.sharedPropTypes.sizeArgType
    },
    large: {
      ..._uiConstants.sharedPropTypes.sizeArgType
    },
    extrasmall: {
      ..._uiConstants.sharedPropTypes.sizeArgType
    },
    invert: {
      ..._uiConstants.sharedPropTypes.sizeArgType
    }
  }
};
const Template = args => /*#__PURE__*/_react.default.createElement(_index.CircularLoader, args);
const Default = exports.Default = Template.bind({});
Default.args = {
  'aria-label': 'Default Loader'
};
const Small = exports.Small = Template.bind({});
Small.args = {
  small: true,
  'aria-label': 'Small Loader'
};
const Large = exports.Large = Template.bind({});
Large.args = {
  large: true,
  'aria-label': 'Large Loader'
};
const ExtraSmall = exports.ExtraSmall = Template.bind({});
ExtraSmall.args = {
  extrasmall: true,
  'aria-label': 'ExtraSmall Loader'
};