import _JSXStyle from "styled-jsx/style";
import { spacers, spacersNum, sharedPropTypes } from '@dhis2/ui-constants';
import { Card } from '@dhis2-ui/card';
import { Center } from '@dhis2-ui/center';
import { Layer } from '@dhis2-ui/layer';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useEffect } from 'react';
import { CloseButton } from './close-button.js';
const resolveLayerStyles = hide => ({
  styles: /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1884450060",
    dynamic: [spacers.dp64, hide ? 'none' : 'block']
  }, [`div.__jsx-style-dynamic-selector{padding:${spacers.dp64};display:${hide ? 'none' : 'block'};}`]),
  className: _JSXStyle.dynamic([["1884450060", [spacers.dp64, hide ? 'none' : 'block']]])
});
export const Modal = _ref => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-modal',
    hide,
    fluid,
    large,
    onClose,
    position = 'top',
    small
  } = _ref;
  const layerStyles = resolveLayerStyles(hide);
  useEffect(() => {
    if (hide) {
      return;
    }
    const handleKeyDown = event => {
      if (event.key === 'Escape' && onClose) {
        event.preventDefault();
        event.stopPropagation();
        onClose();
      }
    };
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [hide, onClose]);
  return /*#__PURE__*/React.createElement(Layer, {
    onBackdropClick: onClose,
    className: layerStyles.className,
    translucent: !hide
  }, /*#__PURE__*/React.createElement(Center, {
    position: position
  }, /*#__PURE__*/React.createElement("aside", {
    role: "dialog",
    "aria-modal": "true",
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3655640549", [2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64]]]) + " " + (cx(className, {
      small,
      large,
      fluid
    }) || "")
  }, /*#__PURE__*/React.createElement(Card, null, onClose && /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onClose
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3655640549", [2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64]]])
  }, children))), layerStyles.styles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3655640549",
    dynamic: [2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64]
  }, [`aside.__jsx-style-dynamic-selector{height:auto;width:600px;max-width:calc(100vw - ${2 * spacersNum.dp64}px);max-height:calc(100vh - ${2 * spacersNum.dp64}px);}`, "aside.small.__jsx-style-dynamic-selector{width:400px;}", "aside.large.__jsx-style-dynamic-selector{width:800px;}", "aside.fluid.__jsx-style-dynamic-selector{width:auto;}", `div.__jsx-style-dynamic-selector{padding:24px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;max-width:calc(100vw - ${2 * spacersNum.dp64}px);max-height:calc(100vh - ${2 * spacersNum.dp64}px);}`]));
};
Modal.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  fluid: PropTypes.bool,
  hide: PropTypes.bool,
  large: sharedPropTypes.sizePropType,
  position: sharedPropTypes.insideAlignmentPropType,
  small: sharedPropTypes.sizePropType,
  /** Callback used when the Modal closes */
  onClose: PropTypes.func
};