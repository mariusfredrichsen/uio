import _JSXStyle from "styled-jsx/style";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
export const TableBody = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    className,
    dataTest = 'dhis2-uicore-tablebody',
    role,
    loading,
    ...props
  } = _ref;
  return /*#__PURE__*/React.createElement("tbody", _extends({}, props, {
    "data-test": dataTest,
    ref: ref,
    role: role,
    className: _JSXStyle.dynamic([["2478922139", [colors.blue600]]]) + " " + (cx(className, {
      loading
    }) || "")
  }), children, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2478922139",
    dynamic: [colors.blue600]
  }, ["tbody.__jsx-style-dynamic-selector{position:relative;}", ".loading.__jsx-style-dynamic-selector:before{content:'';position:absolute;top:0;bottom:0;inset-inline-start:0;inset-inline-end:0;background-color:rgba(255,255,255,0.8);}", `.loading.__jsx-style-dynamic-selector:after{content:'';position:absolute;top:calc(50% - 24px);inset-inline-start:calc(50% - 24px);width:48px;height:48px;border:6px solid rgba(110,122,138,0.15);border-bottom-color:${colors.blue600};border-radius:50%;-webkit-animation:rotation-__jsx-style-dynamic-selector 1s linear infinite;animation:rotation-__jsx-style-dynamic-selector 1s linear infinite;}`, "@-webkit-keyframes rotation-__jsx-style-dynamic-selector{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@keyframes rotation-__jsx-style-dynamic-selector{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}"]));
});
TableBody.displayName = 'TableBody';
TableBody.propTypes = {
  /** Should be `<TableRow>` components */
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  loading: PropTypes.bool,
  role: PropTypes.string
};