import _JSXStyle from "styled-jsx/style";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { mutuallyExclusive, requiredIf } from '@dhis2/prop-types';
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
import styles from './table-header-cell.styles.js';
const AUTO = 'auto';
export const TableHeaderCell = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    active,
    align = 'left',
    backgroundColor,
    bordered,
    children,
    className,
    colSpan,
    dataTest = 'dhis2-uicore-tablecell',
    error,
    fixed,
    large,
    left = AUTO,
    muted,
    rowSpan,
    role,
    scope,
    staticStyle,
    top = AUTO,
    valid,
    width = AUTO,
    onClick,
    ...props
  } = _ref;
  return /*#__PURE__*/React.createElement("th", _extends({}, props, {
    ref: ref,
    colSpan: colSpan,
    rowSpan: rowSpan,
    onClick: onClick,
    "data-test": dataTest,
    role: role,
    scope: scope,
    className: `jsx-${styles.__hash}` + " " + _JSXStyle.dynamic([["2588011372", [left, top, align, width, backgroundColor || colors.grey200, backgroundColor || colors.grey300, backgroundColor || colors.grey300, backgroundColor || colors.grey200]]]) + " " + (cx(className, {
      active,
      bordered,
      error,
      fixed,
      fixedHorizontally: fixed && left !== AUTO,
      large,
      muted,
      staticStyle,
      valid
    }) || "")
  }), children, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2588011372",
    dynamic: [left, top, align, width, backgroundColor || colors.grey200, backgroundColor || colors.grey300, backgroundColor || colors.grey300, backgroundColor || colors.grey200]
  }, [`th.__jsx-style-dynamic-selector{inset-inline-start:${left};top:${top};text-align:${align};width:${width};background-color:${backgroundColor || colors.grey200};}`, `thead th.fixedHorizontally.__jsx-style-dynamic-selector{background-color:${backgroundColor || colors.grey300};}`, `tbody>tr:hover>th.__jsx-style-dynamic-selector:not(.staticStyle),tfoot>tr:hover>th.__jsx-style-dynamic-selector:not(.staticStyle){background-color:${backgroundColor || colors.grey300};}`, `tbody>tr:active>th.__jsx-style-dynamic-selector:not(.staticStyle){background-color:${backgroundColor || colors.grey200};}`]));
});
TableHeaderCell.displayName = 'TableHeaderCell';
const stylePropType = mutuallyExclusive(['valid', 'error', 'muted'], PropTypes.bool);
TableHeaderCell.propTypes = {
  /** To toggle border color, for example for editing */
  active: PropTypes.bool,
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /** Sets background color of the cell. Disables dynamic background colors from active, hover, and selected states */
  backgroundColor: PropTypes.string,
  bordered: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,
  colSpan: PropTypes.string,
  dataTest: PropTypes.string,
  /** Mutually exclusive with muted and valid */
  error: stylePropType,
  fixed: PropTypes.bool,
  large: PropTypes.bool,
  /** Left or top required when fixed */
  left: requiredIf(props => props.fixed && !props.top, PropTypes.string),
  /** Mutually exclusive with error and valid */
  muted: stylePropType,
  role: PropTypes.string,
  rowSpan: PropTypes.string,
  scope: PropTypes.string,
  /** Surpress hover and active event styles */
  staticStyle: PropTypes.bool,
  /** Left or top required when fixed */
  top: requiredIf(props => props.fixed && !props.left, PropTypes.string),
  /** Mutually exclusive with error and muted */
  valid: stylePropType,
  width: PropTypes.string,
  onClick: PropTypes.func
};