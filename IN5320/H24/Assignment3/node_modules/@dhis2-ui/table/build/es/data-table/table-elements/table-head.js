function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
export const TableHead = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    className,
    dataTest,
    role,
    ...props
  } = _ref;
  return /*#__PURE__*/React.createElement("thead", _extends({}, props, {
    className: className,
    "data-test": dataTest,
    ref: ref,
    role: role
  }), children);
});
TableHead.displayName = 'TableHead';
TableHead.propTypes = {
  /** Should be `<TableRowHead>` components */
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  role: PropTypes.string
};