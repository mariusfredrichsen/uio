"use strict";

var _enzyme = require("enzyme");
var _react = _interopRequireDefault(require("react"));
var _dataTable = require("../data-table.js");
var _index = require("../table-elements/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('<DataTable>', () => {
  it('renders children', () => {
    const children = 'children';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, null, children));
    expect(wrapper.containsMatchingElement(children)).toBe(true);
  });
  it('accepts a ref', () => {
    const ref = /*#__PURE__*/_react.default.createRef();
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      ref: ref
    }));
    expect(wrapper.find('table').getDOMNode()).toBe(ref.current);
  });
  it('accepts a className prop', () => {
    const className = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      className: className
    }));
    expect(wrapper.find(_index.Table).prop('className')).toBe(className);
  });
  it('accepts a dataTest prop', () => {
    const dataTest = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      dataTest: dataTest
    }));
    expect(wrapper.find(_index.Table).prop('dataTest')).toBe(dataTest);
  });
  it('accepts a layout prop', () => {
    const layout = 'fixed';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      layout: layout
    }));
    expect(wrapper.find(_index.Table).prop('layout')).toBe(layout);
  });
  it('accepts a role prop', () => {
    const role = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      role: role
    }));
    expect(wrapper.find(_index.Table).prop('role')).toBe(role);
  });
  it('renders a datatable when no scrollHeight or scrollWidth are provided', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, null));
    expect(wrapper.find(_index.Table)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox)).toHaveLength(0);
  });
  it('wraps the datatable in a scroll box when scrollHeight is provided', () => {
    const height = '200px';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      scrollHeight: height
    }));
    expect(wrapper.dive().type()).toBe('div');
    expect(wrapper.find(_index.TableScrollBox)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox).dive().find(_index.Table)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox).prop('maxHeight')).toBe(height);
  });
  it('wraps the datatable in a scroll box when scrollWidth is provided', () => {
    const width = '200px';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      scrollWidth: width
    }));
    expect(wrapper.dive().type()).toBe('div');
    expect(wrapper.find(_index.TableScrollBox)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox).dive().find(_index.Table)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox).prop('maxWidth')).toBe(width);
  });
  it('wraps the datatable in a scroll box when both scrollHeight and scrollWidth are provided', () => {
    const size = '200px';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      scrollHeight: size,
      scrollWidth: size
    }));
    expect(wrapper.dive().type()).toBe('div');
    expect(wrapper.find(_index.TableScrollBox)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox).dive().find(_index.Table)).toHaveLength(1);
    expect(wrapper.find(_index.TableScrollBox).prop('maxHeight')).toBe(size);
    expect(wrapper.find(_index.TableScrollBox).prop('maxWidth')).toBe(size);
  });
  it('accepts a width prop', () => {
    const width = '200px';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTable.DataTable, {
      width: width
    }));
    expect(wrapper.find(_index.Table).prop('width')).toBe(width);
  });
});