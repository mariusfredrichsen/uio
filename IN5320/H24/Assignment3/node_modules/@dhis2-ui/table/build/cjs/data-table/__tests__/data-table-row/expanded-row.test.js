"use strict";

var _enzyme = require("enzyme");
var _react = _interopRequireDefault(require("react"));
var _expandedRow = require("../../data-table-row/expanded-row.js");
var _index = require("../../table-elements/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('<ExpandedRow>', () => {
  it('renders children', () => {
    const children = 'children';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, null, children));
    expect(wrapper.containsMatchingElement(children)).toBe(true);
  });
  it('accepts a colSpan prop', () => {
    const colSpan = '4';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
      colSpan: colSpan
    }));
    expect(wrapper.find(_index.TableDataCell).prop('colSpan')).toBe(colSpan);
  });
  it('accepts a className prop', () => {
    const className = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
      className: className
    }));
    expect(wrapper.find(_index.TableRow).prop('className')).toBe(`${className}-expandedrow`);
  });
  it('accepts a dataTest prop', () => {
    const dataTest = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
      dataTest: dataTest
    }));
    expect(wrapper.find(_index.TableRow).prop('dataTest')).toBe(`${dataTest}-expandedrow`);
  });
  it('accepts a selected prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
      selected: true
    }));
    expect(wrapper.find(_index.TableRow).prop('selected')).toBe(true);
  });
  it('accepts a setIsHoveringExpandedContent prop', () => {
    const cb = jest.fn();
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
      setIsHoveringExpandedContent: cb
    }));
    const tr = wrapper.find(_index.TableRow).dive().find('tr');
    tr.simulate('mouseover');
    expect(cb).toHaveBeenCalledTimes(1);
    expect(cb).toHaveBeenLastCalledWith(true);
    tr.simulate('mouseout');
    expect(cb).toHaveBeenCalledTimes(2);
    expect(cb).toHaveBeenLastCalledWith(false);
  });
});