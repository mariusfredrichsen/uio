"use strict";

var _enzyme = require("enzyme");
var _react = _interopRequireDefault(require("react"));
var _dataTableRow = require("../data-table-row/data-table-row.js");
var _dragHandleCell = require("../data-table-row/drag-handle-cell.js");
var _expandHandleCell = require("../data-table-row/expand-handle-cell.js");
var _expandedRow = require("../data-table-row/expanded-row.js");
var _index = require("../table-elements/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('<DataTableRow>', () => {
  it('renders children', () => {
    const children = 'children';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, null, children));
    expect(wrapper.containsMatchingElement(children)).toBe(true);
  });
  it('accepts a ref', () => {
    const ref = /*#__PURE__*/_react.default.createRef();
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement("table", null, /*#__PURE__*/_react.default.createElement("thead", null, /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      ref: ref
    }))));
    expect(wrapper.find('tr').getDOMNode()).toBe(ref.current);
  });
  it('accepts a className prop', () => {
    const className = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      className: className
    }));
    expect(wrapper.find(_index.TableRow).prop('className')).toBe(className);
  });
  it('accepts a dataTest prop', () => {
    const dataTest = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      dataTest: dataTest
    }));
    expect(wrapper.find(_index.TableRow).prop('dataTest')).toBe(dataTest);
  });
  it('accepts a draggable prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      draggable: true
    }));
    expect(wrapper.find(_index.TableRow).prop('draggable')).toBe(true);
    expect(wrapper.find(_dragHandleCell.DragHandleCell)).toHaveLength(1);
  });
  it('accepts an expandable prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      expandable: true,
      expandableContent: "test",
      onExpandToggle: () => {}
    }));
    expect(wrapper.find(_expandHandleCell.ExpandHandleCell)).toHaveLength(1);
  });
  it('accepts an expandableContent prop', () => {
    const expandableContent = /*#__PURE__*/_react.default.createElement("div", null, "content");
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      expandableContent: expandableContent,
      expanded: true,
      expandable: true,
      onExpandToggle: () => {}
    }));
    const additionalRowTag = wrapper.find(_expandedRow.ExpandedRow).dive().find(_index.TableRow).dive().find('tr');

    // render expandableContent in additional row
    expect(additionalRowTag).toHaveLength(1);

    // Hover styles
    additionalRowTag.simulate('mouseover');
    expect(wrapper.find(_index.TableRow).dive().find('tr').hasClass('isHoveringExpandedContent')).toBe(true);
    additionalRowTag.simulate('mouseout');
    expect(wrapper.find(_index.TableRow).dive().find('tr').hasClass('isHoveringExpandedContent')).toBe(false);
  });
  it('accepts an expanded prop', () => {
    const wrapperClosed = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      expandable: true,
      expandableContent: "test",
      onExpandToggle: () => {}
    }));
    const wrapperOpen = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      expanded: true,
      expandable: true,
      expandableContent: "test",
      onExpandToggle: () => {}
    }));
    expect(wrapperClosed.find(_expandedRow.ExpandedRow)).toHaveLength(0);
    expect(wrapperOpen.find(_expandedRow.ExpandedRow)).toHaveLength(1);
  });
  it('accepts a role prop', () => {
    const role = 'test';
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      role: role
    }));
    expect(wrapper.find(_index.TableRow).prop('role')).toBe(role);
  });
  it('accepts a selected prop', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      selected: true
    }));
    expect(wrapper.find(_index.TableRow).prop('selected')).toBe(true);
  });
  it('accepts an onExpandToggle prop', () => {
    const cb = jest.fn();
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      expandable: true,
      expandableContent: "test",
      onExpandToggle: cb
    }));
    wrapper.find(_expandHandleCell.ExpandHandleCell).dive().simulate('click');
    expect(cb).toHaveBeenCalledTimes(1);
    expect(cb).toHaveBeenCalledWith({
      expanded: true
    });
  });
  it('accepts a hover prop', () => {
    const cb = jest.fn();
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_dataTableRow.DataTableRow, {
      expandable: true,
      expandableContent: "test",
      onExpandToggle: cb,
      onMouseOver: cb,
      onClick: cb
    }));
    wrapper.find('tr').simulate('mouseover');
    wrapper.find('tr').simulate('click');
    expect(cb).toHaveBeenCalledTimes(2);
  });
});